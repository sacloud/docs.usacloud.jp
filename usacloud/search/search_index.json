{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"usacloud\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 usacloud \u306f \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 \u7528\u306e\u516c\u8a8dCLI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u3059\u3002 Note \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Usacloud v1\u7cfb\u5411\u3051\u3067\u3059\u3002 v0\u7cfb\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://github.com/sacloud/usacloud/tree/v0/build_docs/docs \u3053\u308c\u304b\u3089Usacloud\u3092\u5229\u7528\u958b\u59cb\u3059\u308b\u65b9\u306f Usacloud\u5c0e\u5165\u30ac\u30a4\u30c9 \u304b\u3089\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002","title":"\u30db\u30fc\u30e0"},{"location":"#usacloud","text":"usacloud \u306f \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 \u7528\u306e\u516c\u8a8dCLI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u3059\u3002 Note \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Usacloud v1\u7cfb\u5411\u3051\u3067\u3059\u3002 v0\u7cfb\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://github.com/sacloud/usacloud/tree/v0/build_docs/docs \u3053\u308c\u304b\u3089Usacloud\u3092\u5229\u7528\u958b\u59cb\u3059\u308b\u65b9\u306f Usacloud\u5c0e\u5165\u30ac\u30a4\u30c9 \u304b\u3089\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002","title":"usacloud\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8"},{"location":"guides/basic_usage/","text":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9 \u30b3\u30de\u30f3\u30c9\u57fa\u672c\u69cb\u6587 usacloud \u30b3\u30de\u30f3\u30c9\u306e\u57fa\u672c\u69cb\u6587\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002 $ usacloud <\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9> <\u30b3\u30de\u30f3\u30c9> [ \u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3 ] [ \u5f15\u6570 ] \u6307\u5b9a\u3067\u304d\u308b\u5024 \u30ea\u30bd\u30fc\u30b9\u3084\u30b3\u30de\u30f3\u30c9\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3067\u304d\u308b\u5024\u306f help\u8868\u793a \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u4f8b #------------------------------------------------------------------------------ # \u30b5\u30fc\u30d0\u30fc(server)\u306b\u5bfe\u3059\u308b\u4e00\u89a7\u8868\u793a\u30b3\u30de\u30f3\u30c9(ls)\u306e\u5834\u5408\u306e\u4f8b #------------------------------------------------------------------------------ # \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9(\u30aa\u30d7\u30b7\u30e7\u30f3/\u5f15\u6570\u306a\u3057) $ usacloud server ls # \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3042\u308a $ usacloud --zone tk1a server ls # \u30aa\u30d7\u30b7\u30e7\u30f3(\u77ed\u3044\u5f62\u5f0f) $ usacloud server ls -q # \u30aa\u30d7\u30b7\u30e7\u30f3(\u9577\u3044\u5f62\u5f0f) $ usacloud server ls --quiet # \u30aa\u30d7\u30b7\u30e7\u30f3\u306f=\u3092\u660e\u793a\u3057\u3066\u3082OK $ usacloud server ls --name = foovar help\u8868\u793a -h \u307e\u305f\u306f --help \u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3068\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u4f4d\u7f6e\u3067\u8868\u793a\u3067\u304d\u308b\u5185\u5bb9\u304c\u5909\u5316\u3057\u307e\u3059\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3/\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u30d8\u30eb\u30d7\u8868\u793a usacloud -h \u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u8868\u793a # # \u66f8\u5f0f: usacloud <\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9> -h # # \u30b5\u30fc\u30d0\u30fc(server)\u306e\u30d8\u30eb\u30d7\u8868\u793a\u306e\u4f8b usacloud server -h \u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3/\u5f15\u6570\u306e\u30d8\u30eb\u30d7\u8868\u793a # # \u66f8\u5f0f: usacloud <\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9> <\u30b3\u30de\u30f3\u30c9> -h # # \u30b5\u30fc\u30d0\u30fc(server1)\u306e\u4e00\u89a7\u8868\u793a\u30b3\u30de\u30f3\u30c9(ls)\u306e\u30d8\u30eb\u30d7\u8868\u793a\u306e\u4f8b usacloud server ls -h \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 \u4e3b\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ee5\u4e0b\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\u5168\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b3\u30f3\u30d5\u30a3\u30b0( --config ) \u5229\u7528\u3059\u308b\u30b3\u30f3\u30d5\u30a3\u30b0(\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30a8\u30a4\u30ea\u30a2\u30b9: --profile ) \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f usacloud config list \u30b3\u30de\u30f3\u30c9\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u307b\u304b\u3001 usacloud config create \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u65b0\u898f\u4f5c\u6210\u3082\u53ef\u80fd\u3067\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/current \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_PROFILE / USACLOUD_PROFILE \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --profile \u306e\u6307\u5b9a\u3067\u3053\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 Warning Usacloud v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081v1\u3067\u3082\u74b0\u5883\u5909\u6570 USACLOUD_PROFILE \u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5ec3\u6b62\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002 API\u30c8\u30fc\u30af\u30f3( --token ) \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --token \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 API\u30b7\u30fc\u30af\u30ec\u30c3\u30c8( --secret ) \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN_SECRET \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --secret \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 \u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u51fa\u529b\u306e\u8a2d\u5b9a \u51fa\u529b\u306e\u884c\u308f\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u51fa\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 ( bill csv \u306a\u3069\u306e\u4e00\u90e8\u30b3\u30de\u30f3\u30c9\u3067\u306f\u51fa\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059) \u51fa\u529b\u30bf\u30a4\u30d7( --output-type or --out ) \u51fa\u529b\u5f62\u5f0f\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002 table : \u30c6\u30fc\u30d6\u30eb\u5f62\u5f0f json : JSON\u5f62\u5f0f yaml : YAML\u5f62\u5f0f \u672a\u6307\u5b9a\u306e\u5834\u5408\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 --default-output-type \u306e\u8a2d\u5b9a\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 quiet\u30e2\u30fc\u30c9( --quiet or -q ) ID\u306e\u307f\u51fa\u529b\u3057\u307e\u3059\u3002 \u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f --output-type \u3068\u4e00\u7dd2\u306b\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002 \u30d5\u30a9\u30fc\u30de\u30c3\u30c8( --format or --fmt ) \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092go\u8a00\u8a9e\u306e text/template \u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 usacloud server ls --format \"ID is {{.ID}}, Name is {{.Name}}\" \u30af\u30a8\u30ea( --query | --query-driver ) JMESPath \u307e\u305f\u306f jq \u3067\u51fa\u529b\u306e\u52a0\u5de5\u304c\u884c\u3048\u307e\u3059\u3002 \u5229\u7528\u4f8b(JMESPath): $ usacloud server list --query \"[].Name\" [ \"server1\" , \"server2\" , \"server3\" ] \u5229\u7528\u4f8b(jq): $ usacloud server list --query-driver jq --query \".[].Name\" \"server1\" \"server2\" \"server3\" --query \u3068 --query-driver \u306e\u8a73\u7d30\u306f \u30af\u30a8\u30ea \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30be\u30fc\u30f3\u6307\u5b9a \u30be\u30fc\u30f3\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30ea\u30bd\u30fc\u30b9\u306e\u5834\u5408 --zone \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 $ usacloud server list --zone is1a \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067\u30be\u30fc\u30f3\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002 \u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c --zone \u306b all \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\u3059\u3002 # \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u3092\u4e00\u89a7\u8868\u793a $ usacloud server list --zone = all # \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u306e\u3046\u3061\u3001\u540d\u79f0\u306bexample\u3092\u542b\u3080\u30b5\u30fc\u30d0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3 $ usacloud server shutdown --zone = all example # \u5168\u30be\u30fc\u30f3\u306b\u30b5\u30fc\u30d0\u4f5c\u6210 $ usacloud server create --name example ... --zone = all \u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30d5\u30a1\u30a4\u30eb or JSON\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a( --parameters ) \u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u30d1\u30e9\u30e1\u30fc\u30bf\u3092JSON\u307e\u305f\u306fJSON\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # \u6587\u5b57\u5217\u3067\u6307\u5b9a\u3059\u308b\u4f8b $ usacloud server list --parameters '{\"Names\": [\"example\"]}' # \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3067\u6307\u5b9a\u3059\u308b\u4f8b $ cat example.json { \"Names\" : [ \"example\" ] } $ usacloud server list --parameters example.json JSON\u30d5\u30a1\u30a4\u30eb\u306f --example \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8a18\u8ff0\u4f8b\u3092\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002 Tip --parameters \u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306e\u4f75\u7528/\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306e\u4e0a\u66f8\u304d\u304c\u53ef\u80fd\u3067\u3059\u3002 \u5171\u901a\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u500b\u5225\u306e\u5024\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3001\u3068\u3044\u3046\u4f7f\u3044\u65b9\u304c\u51fa\u6765\u307e\u3059\u3002 \u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30d1\u30e9\u30e1\u30fc\u30bf\u4f8b\u306e\u51fa\u529b( --example ) --parameters \u3067\u6307\u5b9a\u3059\u308bJSON\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 $ usacloud switch create --example { \"Zone\" : \"tk1a | tk1b | is1a | is1b | tk1v\" , \"Name\" : \"example\" , \"Description\" : \"example\" , \"Tags\" : [ \"tag1=example1\" , \"tag2=example2\" ] , \"IconID\" : 123456789012 } \u901a\u5e38\u306f\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u306b\u4fdd\u5b58\u3057\u305f\u4e0a\u3067\u7de8\u96c6\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002 # \u30d1\u30e9\u30e1\u30fc\u30bf\u4f8b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b $ usacloud switch create --example > parameters.json # \u7de8\u96c6 $ vi parameters.json # \u5229\u7528 $ usacloud switch create --parameters parameters.json \u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: yes\u30aa\u30d7\u30b7\u30e7\u30f3( -y or --assumeyes ) \u5b9f\u884c\u6642\u306b\u78ba\u8a8d\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 \u78ba\u8a8d\u30c0\u30a4\u30a2\u30ed\u30b0\u5168\u3066\u306b y \u307e\u305f\u306f yes \u3092\u5165\u529b\u3057\u307e\u3059\u3002 \u5f15\u6570: ID or \u540d\u79f0 or \u30bf\u30b0\u3067\u306e\u6307\u5b9a \u7279\u5b9a\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u5bfe\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306e\u5834\u5408\u3001ID\u3001\u540d\u79f0\u3001\u307e\u305f\u306f\u30bf\u30b0\u3092\u5f15\u6570\u306b\u3068\u308a\u307e\u3059\u3002 ID\u3068\u30bf\u30b0\u306e\u5834\u5408\u306f\u5b8c\u5168\u4e00\u81f4\u3001\u540d\u79f0\u306e\u5834\u5408\u306f(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f)\u90e8\u5206\u4e00\u81f4\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u304c\u64cd\u4f5c\u5bfe\u8c61\u3068\u306a\u308a\u307e\u3059\u3002 Info \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 --argument-match-mode \u307e\u305f\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb ArgumentMatchMode \u306b exact \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5f15\u6570\u3068\u540d\u79f0\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 \u3001 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Warning \u8907\u6570\u30ea\u30bd\u30fc\u30b9\u306e\u4e00\u62ec\u64cd\u4f5c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u30b3\u30de\u30f3\u30c9\u306e\u5834\u5408\u3001\u5bfe\u8c61\u304c\u8907\u6570\u3068\u306a\u308b\u6307\u5b9a\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 \u4f8b: #------------------------------------------------------------------------------ # \u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306e\u4f8b #------------------------------------------------------------------------------ $ usacloud server ls +--------------+---------+-----+--------+---------------+--------+ | ID | NAME | CPU | MEMORY | IPADDRESS | STATUS | +--------------+---------+-----+--------+---------------+--------+ | 000000000011 | Test1-1 | 1 | 1024MB | 192 .0.2.11/24 | up | | 000000000021 | Test2-1 | 1 | 1024MB | 192 .0.2.21/24 | up | | 000000000031 | Test3-1 | 1 | 1024MB | 192 .0.2.31/24 | up | | 000000000032 | Test3-2 | 1 | 1024MB | 192 .0.2.32/24 | up | +--------------+---------+-----+--------+---------------+--------+ #------------------------------------------------------------------------------ # \u90e8\u5206\u4e00\u81f4(\u4f8b1) #------------------------------------------------------------------------------ $ usacloud server boot Test # \u540d\u79f0\u306bTest\u3092\u542b\u3080\u3082\u306e Target resource IDs = > [ 000000000011 , 000000000021 , 000000000031 , 000000000032 ] Are you sure you want to boot? ( y/n ) [ n ] : #------------------------------------------------------------------------------ # \u90e8\u5206\u4e00\u81f4(\u4f8b2) #------------------------------------------------------------------------------ $ usacloud server boot Test3 # \u540d\u79f0\u306bTest3\u3092\u542b\u3080\u3082\u306e Target resource IDs = > [ 000000000031 , 000000000032 ] Are you sure you want to boot? ( y/n ) [ n ] : read / list \u30b3\u30de\u30f3\u30c9\u306e\u4f7f\u3044\u5206\u3051 Usacloud\u3067\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3057\u3066 list \u3068 read \u3092\u591a\u304f\u306e\u30ea\u30bd\u30fc\u30b9\u3067\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 \u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3092\u8a31\u5bb9\u3059\u308b\u304b \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u65b9\u6cd5 read \u306e\u7279\u5fb4 \u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3057\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308b \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u306f\u5f15\u6570\u3067\u884c\u3046 list \u306e\u7279\u5fb4 \u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3057\u3066\u3082\u30a8\u30e9\u30fc\u3068\u306a\u3089\u306a\u3044 \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u306f\u30d5\u30e9\u30b0(\u30aa\u30d7\u30b7\u30e7\u30f3)\u3067\u884c\u3046 Tips read \u306f\u4ed6\u306e\u30b3\u30de\u30f3\u30c9\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u4f8b: \u30a2\u30a4\u30b3\u30f3\u3092\u540d\u524d\u3067\u691c\u7d22\u3057\u3001ID\u3092\u30b9\u30a4\u30c3\u30c1\u4f5c\u6210\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u6e21\u3059(\u30a2\u30a4\u30b3\u30f3\u304c\u8907\u6570\u30d2\u30c3\u30c8\u3057\u305f\u3089\u30a8\u30e9\u30fc\u3068\u306a\u308b) usacloud switch create --icon-id=$(usacloud icon read -q example)","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9"},{"location":"guides/basic_usage/#_1","text":"","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9"},{"location":"guides/basic_usage/#_2","text":"usacloud \u30b3\u30de\u30f3\u30c9\u306e\u57fa\u672c\u69cb\u6587\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002 $ usacloud <\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9> <\u30b3\u30de\u30f3\u30c9> [ \u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3 ] [ \u5f15\u6570 ]","title":"\u30b3\u30de\u30f3\u30c9\u57fa\u672c\u69cb\u6587"},{"location":"guides/basic_usage/#_3","text":"\u30ea\u30bd\u30fc\u30b9\u3084\u30b3\u30de\u30f3\u30c9\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3067\u304d\u308b\u5024\u306f help\u8868\u793a \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002","title":"\u6307\u5b9a\u3067\u304d\u308b\u5024"},{"location":"guides/basic_usage/#_4","text":"#------------------------------------------------------------------------------ # \u30b5\u30fc\u30d0\u30fc(server)\u306b\u5bfe\u3059\u308b\u4e00\u89a7\u8868\u793a\u30b3\u30de\u30f3\u30c9(ls)\u306e\u5834\u5408\u306e\u4f8b #------------------------------------------------------------------------------ # \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9(\u30aa\u30d7\u30b7\u30e7\u30f3/\u5f15\u6570\u306a\u3057) $ usacloud server ls # \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3042\u308a $ usacloud --zone tk1a server ls # \u30aa\u30d7\u30b7\u30e7\u30f3(\u77ed\u3044\u5f62\u5f0f) $ usacloud server ls -q # \u30aa\u30d7\u30b7\u30e7\u30f3(\u9577\u3044\u5f62\u5f0f) $ usacloud server ls --quiet # \u30aa\u30d7\u30b7\u30e7\u30f3\u306f=\u3092\u660e\u793a\u3057\u3066\u3082OK $ usacloud server ls --name = foovar","title":"\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u4f8b"},{"location":"guides/basic_usage/#help","text":"-h \u307e\u305f\u306f --help \u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3068\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u4f4d\u7f6e\u3067\u8868\u793a\u3067\u304d\u308b\u5185\u5bb9\u304c\u5909\u5316\u3057\u307e\u3059\u3002","title":"help\u8868\u793a"},{"location":"guides/basic_usage/#_5","text":"usacloud -h","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3/\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u30d8\u30eb\u30d7\u8868\u793a"},{"location":"guides/basic_usage/#_6","text":"# # \u66f8\u5f0f: usacloud <\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9> -h # # \u30b5\u30fc\u30d0\u30fc(server)\u306e\u30d8\u30eb\u30d7\u8868\u793a\u306e\u4f8b usacloud server -h","title":"\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u8868\u793a"},{"location":"guides/basic_usage/#_7","text":"# # \u66f8\u5f0f: usacloud <\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9> <\u30b3\u30de\u30f3\u30c9> -h # # \u30b5\u30fc\u30d0\u30fc(server1)\u306e\u4e00\u89a7\u8868\u793a\u30b3\u30de\u30f3\u30c9(ls)\u306e\u30d8\u30eb\u30d7\u8868\u793a\u306e\u4f8b usacloud server ls -h","title":"\u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3/\u5f15\u6570\u306e\u30d8\u30eb\u30d7\u8868\u793a"},{"location":"guides/basic_usage/#_8","text":"\u4e3b\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ee5\u4e0b\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\u5168\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3"},{"location":"guides/basic_usage/#-config","text":"\u5229\u7528\u3059\u308b\u30b3\u30f3\u30d5\u30a3\u30b0(\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30a8\u30a4\u30ea\u30a2\u30b9: --profile ) \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f usacloud config list \u30b3\u30de\u30f3\u30c9\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u307b\u304b\u3001 usacloud config create \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u65b0\u898f\u4f5c\u6210\u3082\u53ef\u80fd\u3067\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/current \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_PROFILE / USACLOUD_PROFILE \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --profile \u306e\u6307\u5b9a\u3067\u3053\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 Warning Usacloud v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081v1\u3067\u3082\u74b0\u5883\u5909\u6570 USACLOUD_PROFILE \u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5ec3\u6b62\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002","title":"\u30b3\u30f3\u30d5\u30a3\u30b0(--config)"},{"location":"guides/basic_usage/#api-token","text":"\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --token \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002","title":"API\u30c8\u30fc\u30af\u30f3(--token)"},{"location":"guides/basic_usage/#api-secret","text":"\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN_SECRET \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --secret \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002","title":"API\u30b7\u30fc\u30af\u30ec\u30c3\u30c8(--secret)"},{"location":"guides/basic_usage/#_9","text":"\u51fa\u529b\u306e\u884c\u308f\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u51fa\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 ( bill csv \u306a\u3069\u306e\u4e00\u90e8\u30b3\u30de\u30f3\u30c9\u3067\u306f\u51fa\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059)","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u51fa\u529b\u306e\u8a2d\u5b9a"},{"location":"guides/basic_usage/#-output-type-or-out","text":"\u51fa\u529b\u5f62\u5f0f\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002 table : \u30c6\u30fc\u30d6\u30eb\u5f62\u5f0f json : JSON\u5f62\u5f0f yaml : YAML\u5f62\u5f0f \u672a\u6307\u5b9a\u306e\u5834\u5408\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 --default-output-type \u306e\u8a2d\u5b9a\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002","title":"\u51fa\u529b\u30bf\u30a4\u30d7(--output-type or --out)"},{"location":"guides/basic_usage/#quiet-quiet-or-q","text":"ID\u306e\u307f\u51fa\u529b\u3057\u307e\u3059\u3002 \u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f --output-type \u3068\u4e00\u7dd2\u306b\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002","title":"quiet\u30e2\u30fc\u30c9(--quiet or -q)"},{"location":"guides/basic_usage/#-format-or-fmt","text":"\u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092go\u8a00\u8a9e\u306e text/template \u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 usacloud server ls --format \"ID is {{.ID}}, Name is {{.Name}}\"","title":"\u30d5\u30a9\u30fc\u30de\u30c3\u30c8(--format or --fmt)"},{"location":"guides/basic_usage/#-query-query-driver","text":"JMESPath \u307e\u305f\u306f jq \u3067\u51fa\u529b\u306e\u52a0\u5de5\u304c\u884c\u3048\u307e\u3059\u3002","title":"\u30af\u30a8\u30ea(--query | --query-driver)"},{"location":"guides/basic_usage/#jmespath","text":"$ usacloud server list --query \"[].Name\" [ \"server1\" , \"server2\" , \"server3\" ]","title":"\u5229\u7528\u4f8b(JMESPath):"},{"location":"guides/basic_usage/#jq","text":"$ usacloud server list --query-driver jq --query \".[].Name\" \"server1\" \"server2\" \"server3\" --query \u3068 --query-driver \u306e\u8a73\u7d30\u306f \u30af\u30a8\u30ea \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u5229\u7528\u4f8b(jq):"},{"location":"guides/basic_usage/#_10","text":"\u30be\u30fc\u30f3\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30ea\u30bd\u30fc\u30b9\u306e\u5834\u5408 --zone \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 $ usacloud server list --zone is1a \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067\u30be\u30fc\u30f3\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30be\u30fc\u30f3\u6307\u5b9a"},{"location":"guides/basic_usage/#_11","text":"--zone \u306b all \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\u3059\u3002 # \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u3092\u4e00\u89a7\u8868\u793a $ usacloud server list --zone = all # \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u306e\u3046\u3061\u3001\u540d\u79f0\u306bexample\u3092\u542b\u3080\u30b5\u30fc\u30d0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3 $ usacloud server shutdown --zone = all example # \u5168\u30be\u30fc\u30f3\u306b\u30b5\u30fc\u30d0\u4f5c\u6210 $ usacloud server create --name example ... --zone = all","title":"\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c"},{"location":"guides/basic_usage/#or-json-parameters","text":"\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u30d1\u30e9\u30e1\u30fc\u30bf\u3092JSON\u307e\u305f\u306fJSON\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 # \u6587\u5b57\u5217\u3067\u6307\u5b9a\u3059\u308b\u4f8b $ usacloud server list --parameters '{\"Names\": [\"example\"]}' # \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3067\u6307\u5b9a\u3059\u308b\u4f8b $ cat example.json { \"Names\" : [ \"example\" ] } $ usacloud server list --parameters example.json JSON\u30d5\u30a1\u30a4\u30eb\u306f --example \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8a18\u8ff0\u4f8b\u3092\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002 Tip --parameters \u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306e\u4f75\u7528/\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306e\u4e0a\u66f8\u304d\u304c\u53ef\u80fd\u3067\u3059\u3002 \u5171\u901a\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u500b\u5225\u306e\u5024\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3001\u3068\u3044\u3046\u4f7f\u3044\u65b9\u304c\u51fa\u6765\u307e\u3059\u3002","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30d5\u30a1\u30a4\u30eb or JSON\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a(--parameters)"},{"location":"guides/basic_usage/#-example","text":"--parameters \u3067\u6307\u5b9a\u3059\u308bJSON\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 $ usacloud switch create --example { \"Zone\" : \"tk1a | tk1b | is1a | is1b | tk1v\" , \"Name\" : \"example\" , \"Description\" : \"example\" , \"Tags\" : [ \"tag1=example1\" , \"tag2=example2\" ] , \"IconID\" : 123456789012 } \u901a\u5e38\u306f\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u306b\u4fdd\u5b58\u3057\u305f\u4e0a\u3067\u7de8\u96c6\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002 # \u30d1\u30e9\u30e1\u30fc\u30bf\u4f8b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b $ usacloud switch create --example > parameters.json # \u7de8\u96c6 $ vi parameters.json # \u5229\u7528 $ usacloud switch create --parameters parameters.json","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30d1\u30e9\u30e1\u30fc\u30bf\u4f8b\u306e\u51fa\u529b(--example)"},{"location":"guides/basic_usage/#yes-y-or-assumeyes","text":"\u5b9f\u884c\u6642\u306b\u78ba\u8a8d\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 \u78ba\u8a8d\u30c0\u30a4\u30a2\u30ed\u30b0\u5168\u3066\u306b y \u307e\u305f\u306f yes \u3092\u5165\u529b\u3057\u307e\u3059\u3002","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: yes\u30aa\u30d7\u30b7\u30e7\u30f3(-y or --assumeyes)"},{"location":"guides/basic_usage/#id-or-or","text":"\u7279\u5b9a\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u5bfe\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306e\u5834\u5408\u3001ID\u3001\u540d\u79f0\u3001\u307e\u305f\u306f\u30bf\u30b0\u3092\u5f15\u6570\u306b\u3068\u308a\u307e\u3059\u3002 ID\u3068\u30bf\u30b0\u306e\u5834\u5408\u306f\u5b8c\u5168\u4e00\u81f4\u3001\u540d\u79f0\u306e\u5834\u5408\u306f(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f)\u90e8\u5206\u4e00\u81f4\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u304c\u64cd\u4f5c\u5bfe\u8c61\u3068\u306a\u308a\u307e\u3059\u3002 Info \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 --argument-match-mode \u307e\u305f\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb ArgumentMatchMode \u306b exact \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5f15\u6570\u3068\u540d\u79f0\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 \u3001 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Warning \u8907\u6570\u30ea\u30bd\u30fc\u30b9\u306e\u4e00\u62ec\u64cd\u4f5c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u30b3\u30de\u30f3\u30c9\u306e\u5834\u5408\u3001\u5bfe\u8c61\u304c\u8907\u6570\u3068\u306a\u308b\u6307\u5b9a\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 \u4f8b: #------------------------------------------------------------------------------ # \u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306e\u4f8b #------------------------------------------------------------------------------ $ usacloud server ls +--------------+---------+-----+--------+---------------+--------+ | ID | NAME | CPU | MEMORY | IPADDRESS | STATUS | +--------------+---------+-----+--------+---------------+--------+ | 000000000011 | Test1-1 | 1 | 1024MB | 192 .0.2.11/24 | up | | 000000000021 | Test2-1 | 1 | 1024MB | 192 .0.2.21/24 | up | | 000000000031 | Test3-1 | 1 | 1024MB | 192 .0.2.31/24 | up | | 000000000032 | Test3-2 | 1 | 1024MB | 192 .0.2.32/24 | up | +--------------+---------+-----+--------+---------------+--------+ #------------------------------------------------------------------------------ # \u90e8\u5206\u4e00\u81f4(\u4f8b1) #------------------------------------------------------------------------------ $ usacloud server boot Test # \u540d\u79f0\u306bTest\u3092\u542b\u3080\u3082\u306e Target resource IDs = > [ 000000000011 , 000000000021 , 000000000031 , 000000000032 ] Are you sure you want to boot? ( y/n ) [ n ] : #------------------------------------------------------------------------------ # \u90e8\u5206\u4e00\u81f4(\u4f8b2) #------------------------------------------------------------------------------ $ usacloud server boot Test3 # \u540d\u79f0\u306bTest3\u3092\u542b\u3080\u3082\u306e Target resource IDs = > [ 000000000031 , 000000000032 ] Are you sure you want to boot? ( y/n ) [ n ] :","title":"\u5f15\u6570: ID or \u540d\u79f0 or \u30bf\u30b0\u3067\u306e\u6307\u5b9a"},{"location":"guides/basic_usage/#readlist","text":"Usacloud\u3067\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3057\u3066 list \u3068 read \u3092\u591a\u304f\u306e\u30ea\u30bd\u30fc\u30b9\u3067\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 \u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3092\u8a31\u5bb9\u3059\u308b\u304b \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u65b9\u6cd5","title":"read/list\u30b3\u30de\u30f3\u30c9\u306e\u4f7f\u3044\u5206\u3051"},{"location":"guides/basic_usage/#read","text":"\u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3057\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308b \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u306f\u5f15\u6570\u3067\u884c\u3046","title":"read\u306e\u7279\u5fb4"},{"location":"guides/basic_usage/#list","text":"\u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3057\u3066\u3082\u30a8\u30e9\u30fc\u3068\u306a\u3089\u306a\u3044 \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u306f\u30d5\u30e9\u30b0(\u30aa\u30d7\u30b7\u30e7\u30f3)\u3067\u884c\u3046 Tips read \u306f\u4ed6\u306e\u30b3\u30de\u30f3\u30c9\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u4f8b: \u30a2\u30a4\u30b3\u30f3\u3092\u540d\u524d\u3067\u691c\u7d22\u3057\u3001ID\u3092\u30b9\u30a4\u30c3\u30c1\u4f5c\u6210\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u6e21\u3059(\u30a2\u30a4\u30b3\u30f3\u304c\u8907\u6570\u30d2\u30c3\u30c8\u3057\u305f\u3089\u30a8\u30e9\u30fc\u3068\u306a\u308b) usacloud switch create --icon-id=$(usacloud icon read -q example)","title":"list\u306e\u7279\u5fb4"},{"location":"guides/completion/","text":"completion\u30b3\u30de\u30f3\u30c9 Usacloud\u3067\u306f\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u306e\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u51fa\u529b\u3059\u308b usacloud completion \u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 $ usacloud completion -h Usage: usacloud completion [ bash | zsh | fish | powershell ] Flags: -h, --help help for completion completion\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f \u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002 $ usacloud completion <bash | zsh | fish | powershell> bash \u3042\u3089\u304b\u3058\u3081bash-completion\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306a\u3069\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u5316\u3057\u307e\u3059\u3002 source <(usacloud completion bash) \u5404\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u30b7\u30a7\u30eb\u88dc\u5b8c\u3092\u81ea\u52d5\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 #Linux\u306e\u5834\u5408 usacloud completion bash > /etc/bash_completion.d/usacloud #MacOS\u306e\u5834\u5408 usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud zsh If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once: echo \"autoload -U compinit; compinit\" >> ~/.zshrc To load completions for each session, execute once: usacloud completion zsh > \"${fpath[1]}/_usacloud\" You will need to start a new shell for this setup to take effect. fish usacloud completion fish | source To load completions for each session, execute once: usacloud completion fish > ~/.config/fish/completions/usacloud.fish","title":"completion\u30b3\u30de\u30f3\u30c9"},{"location":"guides/completion/#completion","text":"Usacloud\u3067\u306f\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u306e\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u51fa\u529b\u3059\u308b usacloud completion \u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 $ usacloud completion -h Usage: usacloud completion [ bash | zsh | fish | powershell ] Flags: -h, --help help for completion","title":"completion\u30b3\u30de\u30f3\u30c9"},{"location":"guides/completion/#completion_1","text":"\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002 $ usacloud completion <bash | zsh | fish | powershell>","title":"completion\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f"},{"location":"guides/completion/#bash","text":"\u3042\u3089\u304b\u3058\u3081bash-completion\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306a\u3069\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u5316\u3057\u307e\u3059\u3002 source <(usacloud completion bash) \u5404\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u30b7\u30a7\u30eb\u88dc\u5b8c\u3092\u81ea\u52d5\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 #Linux\u306e\u5834\u5408 usacloud completion bash > /etc/bash_completion.d/usacloud #MacOS\u306e\u5834\u5408 usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud","title":"bash"},{"location":"guides/completion/#zsh","text":"If shell completion is not already enabled in your environment you will need to enable it. You can execute the following once: echo \"autoload -U compinit; compinit\" >> ~/.zshrc To load completions for each session, execute once: usacloud completion zsh > \"${fpath[1]}/_usacloud\" You will need to start a new shell for this setup to take effect.","title":"zsh"},{"location":"guides/completion/#fish","text":"usacloud completion fish | source To load completions for each session, execute once: usacloud completion fish > ~/.config/fish/completions/usacloud.fish","title":"fish"},{"location":"guides/query/","text":"\u30af\u30a8\u30ea / \u51fa\u529b\u306e\u52a0\u5de5 JMESPath \u307e\u305f\u306f jq \u3067\u51fa\u529b\u306e\u52a0\u5de5\u304c\u884c\u3048\u307e\u3059\u3002 \u30af\u30a8\u30ea\u306e\u4f7f\u3044\u65b9 \u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002 $ usacloud <\u30ea\u30bd\u30fc\u30b9\u540d> <\u30b3\u30de\u30f3\u30c9> --query = \"<query>\" [ --query-driver = < \"jmespath\" | \"jq\" > ] [ ID or Name or Tags ] --query : JMESPath\u307e\u305f\u306fjq\u306b\u6e21\u3059\u30af\u30a8\u30ea(expression) --query-driver : --query \u3092\u51e6\u7406\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u6307\u5b9a\u3001 jmespath (\u30c7\u30d5\u30a9\u30eb\u30c8)\u307e\u305f\u306f jq \u304c\u6307\u5b9a\u53ef\u80fd \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u5207\u308a\u66ff\u3048 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e DefaultQueryDriver \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067 --query-driver \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u306b\u5229\u7528\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5229\u7528\u4f8b # \u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u5207\u308a\u66ff\u3048 $ export SAKURACLOUD_DEFAULT_QUERY_DRIVER = jq $ usacloud server list --query \".[].Name\" \"server1\" \"server2\" \"server3\" --query \u4ee5\u5916\u306e\u51fa\u529b\u95a2\u9023\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306e\u4f75\u7528 --quiet / -q \u307e\u305f\u306f --format \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001 --query \u306e\u6307\u5b9a\u306f\u7121\u8996\u3055\u308c\u307e\u3059 --query \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001 --output-type \u306e\u6307\u5b9a\u306f\u7121\u8996\u3055\u308c\u307e\u3059","title":"\u30af\u30a8\u30ea/\u51fa\u529b\u306e\u52a0\u5de5"},{"location":"guides/query/#_1","text":"JMESPath \u307e\u305f\u306f jq \u3067\u51fa\u529b\u306e\u52a0\u5de5\u304c\u884c\u3048\u307e\u3059\u3002","title":"\u30af\u30a8\u30ea / \u51fa\u529b\u306e\u52a0\u5de5"},{"location":"guides/query/#_2","text":"\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002 $ usacloud <\u30ea\u30bd\u30fc\u30b9\u540d> <\u30b3\u30de\u30f3\u30c9> --query = \"<query>\" [ --query-driver = < \"jmespath\" | \"jq\" > ] [ ID or Name or Tags ] --query : JMESPath\u307e\u305f\u306fjq\u306b\u6e21\u3059\u30af\u30a8\u30ea(expression) --query-driver : --query \u3092\u51e6\u7406\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u6307\u5b9a\u3001 jmespath (\u30c7\u30d5\u30a9\u30eb\u30c8)\u307e\u305f\u306f jq \u304c\u6307\u5b9a\u53ef\u80fd","title":"\u30af\u30a8\u30ea\u306e\u4f7f\u3044\u65b9"},{"location":"guides/query/#_3","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e DefaultQueryDriver \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067 --query-driver \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u306b\u5229\u7528\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u5207\u308a\u66ff\u3048"},{"location":"guides/query/#_4","text":"# \u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u5207\u308a\u66ff\u3048 $ export SAKURACLOUD_DEFAULT_QUERY_DRIVER = jq $ usacloud server list --query \".[].Name\" \"server1\" \"server2\" \"server3\"","title":"\u5229\u7528\u4f8b"},{"location":"guides/query/#-query","text":"--quiet / -q \u307e\u305f\u306f --format \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001 --query \u306e\u6307\u5b9a\u306f\u7121\u8996\u3055\u308c\u307e\u3059 --query \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001 --output-type \u306e\u6307\u5b9a\u306f\u7121\u8996\u3055\u308c\u307e\u3059","title":"--query\u4ee5\u5916\u306e\u51fa\u529b\u95a2\u9023\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306e\u4f75\u7528"},{"location":"guides/rest/","text":"rest\u30b3\u30de\u30f3\u30c9(\u4e0a\u7d1a\u8005\u5411\u3051) Usacloud\u3067\u306f\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u305f\u3081\u306e usacloud rest \u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 $ usacloud rest -h Usage: usacloud rest [ flags ] usacloud rest [ command ] Available Commands: === Basic Commands === request Flags: -d, --data string -h, --help help for rest -X, --method string ( *required ) options: [ get/post/put/delete/GET/POST/PUT/DELETE ] ( default \"get\" ) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [ jmespath/jq ] --zone string rest\u30b3\u30de\u30f3\u30c9\u306e\u6319\u52d5 usacloud rest \u30b3\u30de\u30f3\u30c9\u306fUsacloud\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3084\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3069\u304b\u3089API\u30ad\u30fc\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u53c2\u7167\u3057\u3066API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u3067\u3059\u3002 Usacloud\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308b\u62bd\u8c61\u5316\u3092\u631f\u307e\u305a\u306b\u76f4\u63a5API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3044\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3057\u307e\u3059\u3002 \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 API\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\u3057\u306a\u304c\u3089API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u3088\u3046\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 rest\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f \u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002 $ usacloud rest [ \u30aa\u30d7\u30b7\u30e7\u30f3 ] <URL> \u5229\u7528\u3067\u304d\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 -d / --data : \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3002JSON\u6587\u5b57\u5217\u307e\u305f\u306fJSON\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u6307\u5b9a ( curl \u30b3\u30de\u30f3\u30c9\u306e -d \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306a @\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 \u5f62\u5f0f\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093) -X / --method : \u30ea\u30af\u30a8\u30b9\u30c8\u306eHTTP\u30e1\u30bd\u30c3\u30c9\u3002 GET / POST / PUT / DELETE \u304c\u6307\u5b9a\u53ef\u80fd(\u5c0f\u6587\u5b57\u3067\u3082OK) --zone : \u30ea\u30af\u30a8\u30b9\u30c8\u5148\u30be\u30fc\u30f3\u3001\u5f15\u6570\u306b https:// \u3067\u59cb\u307e\u308bURL\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u7121\u52b9 --query : \u51fa\u529b\u306b\u5bfe\u3057JMESPath or jq\u3067\u52a0\u5de5\u3059\u308b\u969b\u306e\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3002\u6587\u5b57\u5217\u307e\u305f\u306f\u30af\u30a8\u30ea\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u6307\u5b9a --query-driver : --query \u306e\u51e6\u7406\u306b\u4f7f\u7528\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u3002 jmespath / jq \u304c\u6307\u5b9a\u53ef\u80fd Note --query-driver \u672a\u6307\u5b9a\u6642\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e DefaultQueryDriver \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 ( DefaultQueryDriver \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: jmespath ) \u5f15\u6570\u306b\u306f\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u3067URL\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30d1\u30bf\u30fc\u30f31: URL\u5168\u4f53\u3092\u6307\u5b9a - https://secure.sakura.ad.jp/cloud/zone/is1a/api/cloud/1.1/server \u30d1\u30bf\u30fc\u30f32: \u90e8\u5206\u7684\u306b\u6307\u5b9a - /server \u30d1\u30bf\u30fc\u30f32\u306e\u5834\u5408\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304b\u3089API\u30eb\u30fc\u30c8URL(\u30c7\u30d5\u30a9\u30eb\u30c8\u306f https://secure.sakura.ad.jp/cloud/zone )\u3084\u30be\u30fc\u30f3\u306a\u3069\u3092\u8aad\u307f\u51fa\u3057\u3066URL\u3092\u88dc\u5b8c\u3057\u307e\u3059\u3002 \u5229\u7528\u4f8b # \u7279\u5b9a\u30b5\u30fc\u30d0\u306e\u96fb\u6e90\u3092OFF\u306b\u3059\u308b $ export SERVER_ID = 123456789012 $ usacloud rest -X DELETE /server/ $SERVER_ID /power","title":"rest\u30b3\u30de\u30f3\u30c9"},{"location":"guides/rest/#rest","text":"Usacloud\u3067\u306f\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u305f\u3081\u306e usacloud rest \u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002 $ usacloud rest -h Usage: usacloud rest [ flags ] usacloud rest [ command ] Available Commands: === Basic Commands === request Flags: -d, --data string -h, --help help for rest -X, --method string ( *required ) options: [ get/post/put/delete/GET/POST/PUT/DELETE ] ( default \"get\" ) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [ jmespath/jq ] --zone string","title":"rest\u30b3\u30de\u30f3\u30c9(\u4e0a\u7d1a\u8005\u5411\u3051)"},{"location":"guides/rest/#rest_1","text":"usacloud rest \u30b3\u30de\u30f3\u30c9\u306fUsacloud\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3084\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3069\u304b\u3089API\u30ad\u30fc\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u53c2\u7167\u3057\u3066API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u3067\u3059\u3002 Usacloud\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308b\u62bd\u8c61\u5316\u3092\u631f\u307e\u305a\u306b\u76f4\u63a5API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3044\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3057\u307e\u3059\u3002 \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 API\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\u3057\u306a\u304c\u3089API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u3088\u3046\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002","title":"rest\u30b3\u30de\u30f3\u30c9\u306e\u6319\u52d5"},{"location":"guides/rest/#rest_2","text":"\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002 $ usacloud rest [ \u30aa\u30d7\u30b7\u30e7\u30f3 ] <URL> \u5229\u7528\u3067\u304d\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 -d / --data : \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3002JSON\u6587\u5b57\u5217\u307e\u305f\u306fJSON\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u6307\u5b9a ( curl \u30b3\u30de\u30f3\u30c9\u306e -d \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306a @\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9 \u5f62\u5f0f\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093) -X / --method : \u30ea\u30af\u30a8\u30b9\u30c8\u306eHTTP\u30e1\u30bd\u30c3\u30c9\u3002 GET / POST / PUT / DELETE \u304c\u6307\u5b9a\u53ef\u80fd(\u5c0f\u6587\u5b57\u3067\u3082OK) --zone : \u30ea\u30af\u30a8\u30b9\u30c8\u5148\u30be\u30fc\u30f3\u3001\u5f15\u6570\u306b https:// \u3067\u59cb\u307e\u308bURL\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u7121\u52b9 --query : \u51fa\u529b\u306b\u5bfe\u3057JMESPath or jq\u3067\u52a0\u5de5\u3059\u308b\u969b\u306e\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3002\u6587\u5b57\u5217\u307e\u305f\u306f\u30af\u30a8\u30ea\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u6307\u5b9a --query-driver : --query \u306e\u51e6\u7406\u306b\u4f7f\u7528\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u3002 jmespath / jq \u304c\u6307\u5b9a\u53ef\u80fd Note --query-driver \u672a\u6307\u5b9a\u6642\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e DefaultQueryDriver \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 ( DefaultQueryDriver \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024: jmespath ) \u5f15\u6570\u306b\u306f\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u3067URL\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30d1\u30bf\u30fc\u30f31: URL\u5168\u4f53\u3092\u6307\u5b9a - https://secure.sakura.ad.jp/cloud/zone/is1a/api/cloud/1.1/server \u30d1\u30bf\u30fc\u30f32: \u90e8\u5206\u7684\u306b\u6307\u5b9a - /server \u30d1\u30bf\u30fc\u30f32\u306e\u5834\u5408\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304b\u3089API\u30eb\u30fc\u30c8URL(\u30c7\u30d5\u30a9\u30eb\u30c8\u306f https://secure.sakura.ad.jp/cloud/zone )\u3084\u30be\u30fc\u30f3\u306a\u3069\u3092\u8aad\u307f\u51fa\u3057\u3066URL\u3092\u88dc\u5b8c\u3057\u307e\u3059\u3002","title":"rest\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f"},{"location":"guides/rest/#_1","text":"# \u7279\u5b9a\u30b5\u30fc\u30d0\u306e\u96fb\u6e90\u3092OFF\u306b\u3059\u308b $ export SERVER_ID = 123456789012 $ usacloud rest -X DELETE /server/ $SERVER_ID /power","title":"\u5229\u7528\u4f8b"},{"location":"installation/start_guide/","text":"Usacloud\u5c0e\u5165\u30ac\u30a4\u30c9 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb macOS/Linux curl -fsSL https://github.com/sacloud/usacloud/releases/latest/download/install.sh | bash Windows( chocolatey ) choco install usacloud chocolatey\u306e usacloud\u30d1\u30c3\u30b1\u30fc\u30b8 \u306f @223n \u3055\u3093\u306b\u3088\u3063\u3066\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u305d\u306e\u4ed6\u306e\u5834\u5408 GitHub Releases\u30da\u30fc\u30b8\u304b\u3089\u4efb\u610f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5411\u3051\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\u3057\u3001\u4efb\u610f\u306e\u30d5\u30a9\u30eb\u30c0\u30fc\u5185\u306b\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 (PATH\u3092\u901a\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059) https://github.com/sacloud/usacloud/releases/latest/ Docker\u3092\u5229\u7528\u3059\u308b\u5834\u5408 usacloud \u5b9f\u884c\u7528\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066 ghcr.io/sacloud/usacloud \u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002 # Docker\u3067\u306eusacloud\u5b9f\u884c\u4f8b docker run -it --rm \\ -e SAKURACLOUD_ACCESS_TOKEN \\ -e SAKURACLOUD_ACCESS_TOKEN_SECRET \\ -e SAKURACLOUD_ZONE \\ ghcr.io/sacloud/usacloud server ls Warning v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081\u306bDockerHub\u3067 sacloud/usacloud \u30a4\u30e1\u30fc\u30b8\u3092\u914d\u5e03\u3057\u3066\u3044\u307e\u3059\u304c\u5c06\u6765\u7684\u306b\u5ec3\u6b62\u4e88\u5b9a\u3067\u3059\u3002 ghcr.io/sacloud/usacloud \u306e\u5229\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002 \u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion) bash_completion \u306a\u3069\u306e\u30b7\u30a7\u30eb\u88dc\u5b8c\u304c\u5229\u7528\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u306b\u51fa\u6765\u307e\u3059\u3002 Bash # Linux\u306e\u5834\u5408 $ usacloud completion bash > /etc/bash_completion.d/usacloud # MacOS\u306e\u5834\u5408 $ usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud Zsh $ usacloud completion zsh > \"${fpath[1]}/_usacloud\" Fish: $ usacloud completion fish > ~/.config/fish/completions/usacloud.fish \u8a73\u7d30\u306f completion\u30b3\u30de\u30f3\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u8a2d\u5b9a usacloud \u306e\u5b9f\u884c\u306b\u306f\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30ad\u30fc\u306e\u53d6\u5f97/\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3044API\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: API\u30ad\u30fc\u306e\u65b0\u898f\u4f5c\u6210\u30fb\u7de8\u96c6 API\u30ad\u30fc\u306e\u8a2d\u5b9a API\u30ad\u30fc\u3092\u53d6\u5f97\u3057\u305f\u3089\u3001 usacloud config \u3092\u5b9f\u884c\u3057API\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u753b\u9762\u306e\u6307\u793a\u306b\u5f93\u3044\u3001\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3(token)\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8(secret)\u3001\u64cd\u4f5c\u5bfe\u8c61\u306e\u30be\u30fc\u30f3\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u51fa\u529b\u5f62\u5f0f\u3092\u5165\u529b\u3057\u307e\u3059\u3002 $ usacloud config Setting SakuraCloud API Token = > Enter token: [ \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u5165\u529b ] Setting SakuraCloud API Secret = > Enter secret: [ \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u5165\u529b ] Setting SakuraCloud Zone = > Enter zone [ is1a/is1b/tk1a/tk1b/tk1v ] : [ \u30be\u30fc\u30f3\u3092\u5165\u529b ] Setting Default Output Type = > Enter default-output-type [ table/json/yaml ] : [ \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u51fa\u529b\u5f62\u5f0f\u3092\u5165\u529b ] Written your settings to ~/.usacloud/default/config.json \u64cd\u4f5c\u5bfe\u8c61\u306e\u30be\u30fc\u30f3\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 is1a : \u77f3\u72e9\u7b2c1\u30be\u30fc\u30f3 is1b : \u77f3\u72e9\u7b2c2\u30be\u30fc\u30f3 tk1a : \u6771\u4eac\u7b2c1\u30be\u30fc\u30f3 tk1b : \u6771\u4eac\u7b2c2\u30be\u30fc\u30f3 tk1v : \u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9 Note \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 --zones \u3084\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067 Zones \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u8a2d\u5b9a\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u304c\u4e0a\u8a18\u3068\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Warning usacloud config \u30b3\u30de\u30f3\u30c9\u3067\u5165\u529b\u3057\u305f\u5185\u5bb9\u306f\u5e73\u6587\u3067JSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ~/.usacloud/<\u30d5\u30a1\u30a4\u30eb\u540d>/config.json \u306b\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3 0700 \u3067\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u53d6\u308a\u6271\u3044\u306f\u5341\u5206\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Tip usacloud config \u3067\u306f\u57fa\u672c\u7684\u306a\u9805\u76ee\u306e\u8a2d\u5b9a\u306e\u307f\u304c\u884c\u3048\u307e\u3059\u3002 \u3088\u308a\u8a73\u7d30\u306a\u8a2d\u5b9a\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u751f\u6210\u3055\u308c\u305fJSON\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 JSON\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3067\u304d\u308b\u5185\u5bb9\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u305d\u306e\u4ed6\u306eAPI\u30ad\u30fc\u8a2d\u5b9a\u65b9\u6cd5 \u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a API\u30ad\u30fc\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 $ export SAKURACLOUD_ACCESS_TOKEN = \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3 $ export SAKURACLOUD_ACCESS_TOKEN_SECRET = \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8 $ export SAKURACLOUD_ZONE = \u30be\u30fc\u30f3 \u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 $ usacloud --token = \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3 --secret = \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8 --zone = \u30be\u30fc\u30f3 server ls Warning \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3 --token / --secret \u3092\u5229\u7528\u3057\u305f\u5834\u5408\u3001\u30d2\u30b9\u30c8\u30ea\u30fc\u306b\u5024\u304c\u6b8b\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u53d6\u308a\u6271\u3044\u306f\u5341\u5206\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u8907\u6570\u7b87\u6240\u3067\u6307\u5b9a\u3057\u305f\u5834\u5408\u306e\u512a\u5148\u9806\u4f4d \u8907\u6570\u306e\u7b87\u6240\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u9806\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059(\u5f8c\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u3082\u306e\u304c\u512a\u5148)\u3002 \u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb( usacloud config \u3067\u4fdd\u5b58\u3055\u308c\u308b\u3082\u306e)\u3067\u306e\u6307\u5b9a \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306e\u6307\u5b9a \u4ee5\u4e0a\u3067\u8a2d\u5b9a\u7d42\u4e86\u3067\u3059\u3002\u7d9a\u3044\u3066 \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9 \u306b\u9032\u3093\u3067\u304f\u3060\u3055\u3044\u3002","title":"Usacloud\u5c0e\u5165\u30ac\u30a4\u30c9"},{"location":"installation/start_guide/#usacloud","text":"","title":"Usacloud\u5c0e\u5165\u30ac\u30a4\u30c9"},{"location":"installation/start_guide/#install","text":"","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"installation/start_guide/#macoslinux","text":"curl -fsSL https://github.com/sacloud/usacloud/releases/latest/download/install.sh | bash","title":"macOS/Linux"},{"location":"installation/start_guide/#windowschocolatey","text":"choco install usacloud chocolatey\u306e usacloud\u30d1\u30c3\u30b1\u30fc\u30b8 \u306f @223n \u3055\u3093\u306b\u3088\u3063\u3066\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"Windows(chocolatey)"},{"location":"installation/start_guide/#_1","text":"GitHub Releases\u30da\u30fc\u30b8\u304b\u3089\u4efb\u610f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5411\u3051\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\u3057\u3001\u4efb\u610f\u306e\u30d5\u30a9\u30eb\u30c0\u30fc\u5185\u306b\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 (PATH\u3092\u901a\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059) https://github.com/sacloud/usacloud/releases/latest/","title":"\u305d\u306e\u4ed6\u306e\u5834\u5408"},{"location":"installation/start_guide/#docker","text":"usacloud \u5b9f\u884c\u7528\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066 ghcr.io/sacloud/usacloud \u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002 # Docker\u3067\u306eusacloud\u5b9f\u884c\u4f8b docker run -it --rm \\ -e SAKURACLOUD_ACCESS_TOKEN \\ -e SAKURACLOUD_ACCESS_TOKEN_SECRET \\ -e SAKURACLOUD_ZONE \\ ghcr.io/sacloud/usacloud server ls Warning v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081\u306bDockerHub\u3067 sacloud/usacloud \u30a4\u30e1\u30fc\u30b8\u3092\u914d\u5e03\u3057\u3066\u3044\u307e\u3059\u304c\u5c06\u6765\u7684\u306b\u5ec3\u6b62\u4e88\u5b9a\u3067\u3059\u3002 ghcr.io/sacloud/usacloud \u306e\u5229\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002","title":"Docker\u3092\u5229\u7528\u3059\u308b\u5834\u5408"},{"location":"installation/start_guide/#shell_completion","text":"bash_completion \u306a\u3069\u306e\u30b7\u30a7\u30eb\u88dc\u5b8c\u304c\u5229\u7528\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u306b\u51fa\u6765\u307e\u3059\u3002","title":"\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)"},{"location":"installation/start_guide/#bash","text":"# Linux\u306e\u5834\u5408 $ usacloud completion bash > /etc/bash_completion.d/usacloud # MacOS\u306e\u5834\u5408 $ usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud","title":"Bash"},{"location":"installation/start_guide/#zsh","text":"$ usacloud completion zsh > \"${fpath[1]}/_usacloud\"","title":"Zsh"},{"location":"installation/start_guide/#fish","text":"$ usacloud completion fish > ~/.config/fish/completions/usacloud.fish \u8a73\u7d30\u306f completion\u30b3\u30de\u30f3\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"Fish:"},{"location":"installation/start_guide/#configuration","text":"usacloud \u306e\u5b9f\u884c\u306b\u306f\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30ad\u30fc\u306e\u53d6\u5f97/\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3044API\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: API\u30ad\u30fc\u306e\u65b0\u898f\u4f5c\u6210\u30fb\u7de8\u96c6","title":"\u8a2d\u5b9a"},{"location":"installation/start_guide/#api","text":"API\u30ad\u30fc\u3092\u53d6\u5f97\u3057\u305f\u3089\u3001 usacloud config \u3092\u5b9f\u884c\u3057API\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u753b\u9762\u306e\u6307\u793a\u306b\u5f93\u3044\u3001\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3(token)\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8(secret)\u3001\u64cd\u4f5c\u5bfe\u8c61\u306e\u30be\u30fc\u30f3\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u51fa\u529b\u5f62\u5f0f\u3092\u5165\u529b\u3057\u307e\u3059\u3002 $ usacloud config Setting SakuraCloud API Token = > Enter token: [ \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u5165\u529b ] Setting SakuraCloud API Secret = > Enter secret: [ \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u5165\u529b ] Setting SakuraCloud Zone = > Enter zone [ is1a/is1b/tk1a/tk1b/tk1v ] : [ \u30be\u30fc\u30f3\u3092\u5165\u529b ] Setting Default Output Type = > Enter default-output-type [ table/json/yaml ] : [ \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u51fa\u529b\u5f62\u5f0f\u3092\u5165\u529b ] Written your settings to ~/.usacloud/default/config.json \u64cd\u4f5c\u5bfe\u8c61\u306e\u30be\u30fc\u30f3\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 is1a : \u77f3\u72e9\u7b2c1\u30be\u30fc\u30f3 is1b : \u77f3\u72e9\u7b2c2\u30be\u30fc\u30f3 tk1a : \u6771\u4eac\u7b2c1\u30be\u30fc\u30f3 tk1b : \u6771\u4eac\u7b2c2\u30be\u30fc\u30f3 tk1v : \u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9 Note \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 --zones \u3084\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067 Zones \u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u8a2d\u5b9a\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u304c\u4e0a\u8a18\u3068\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Warning usacloud config \u30b3\u30de\u30f3\u30c9\u3067\u5165\u529b\u3057\u305f\u5185\u5bb9\u306f\u5e73\u6587\u3067JSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f ~/.usacloud/<\u30d5\u30a1\u30a4\u30eb\u540d>/config.json \u306b\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3 0700 \u3067\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u53d6\u308a\u6271\u3044\u306f\u5341\u5206\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Tip usacloud config \u3067\u306f\u57fa\u672c\u7684\u306a\u9805\u76ee\u306e\u8a2d\u5b9a\u306e\u307f\u304c\u884c\u3048\u307e\u3059\u3002 \u3088\u308a\u8a73\u7d30\u306a\u8a2d\u5b9a\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u751f\u6210\u3055\u308c\u305fJSON\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 JSON\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3067\u304d\u308b\u5185\u5bb9\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"API\u30ad\u30fc\u306e\u8a2d\u5b9a"},{"location":"installation/start_guide/#api_1","text":"","title":"\u305d\u306e\u4ed6\u306eAPI\u30ad\u30fc\u8a2d\u5b9a\u65b9\u6cd5"},{"location":"installation/start_guide/#_2","text":"API\u30ad\u30fc\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 $ export SAKURACLOUD_ACCESS_TOKEN = \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3 $ export SAKURACLOUD_ACCESS_TOKEN_SECRET = \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8 $ export SAKURACLOUD_ZONE = \u30be\u30fc\u30f3","title":"\u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a"},{"location":"installation/start_guide/#_3","text":"\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 $ usacloud --token = \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3 --secret = \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8 --zone = \u30be\u30fc\u30f3 server ls Warning \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3 --token / --secret \u3092\u5229\u7528\u3057\u305f\u5834\u5408\u3001\u30d2\u30b9\u30c8\u30ea\u30fc\u306b\u5024\u304c\u6b8b\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u53d6\u308a\u6271\u3044\u306f\u5341\u5206\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a"},{"location":"installation/start_guide/#_4","text":"\u8907\u6570\u306e\u7b87\u6240\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u9806\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059(\u5f8c\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u3082\u306e\u304c\u512a\u5148)\u3002 \u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb( usacloud config \u3067\u4fdd\u5b58\u3055\u308c\u308b\u3082\u306e)\u3067\u306e\u6307\u5b9a \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306e\u6307\u5b9a \u4ee5\u4e0a\u3067\u8a2d\u5b9a\u7d42\u4e86\u3067\u3059\u3002\u7d9a\u3044\u3066 \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9 \u306b\u9032\u3093\u3067\u304f\u3060\u3055\u3044\u3002","title":"\u8907\u6570\u7b87\u6240\u3067\u6307\u5b9a\u3057\u305f\u5834\u5408\u306e\u512a\u5148\u9806\u4f4d"},{"location":"references/archive/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / archive \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Operation Commands upload download ftp-open ftp-close Other Commands wait-until-ready list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings --scope string options: [user/shared] --os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Archive-specific options === --size int (*required when --source-file is specified) --source-archive-id int --source-disk-id int --source-file string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"SizeGB\": 20, \"SourceFile\": \"/path/to/raw/file\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"NoWait\": false } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format upload Usage Usage: upload { ID | NAME | TAG }... [flags] Flags: === Upload options === --source-file string === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format download Usage Usage: download { ID | NAME | TAG } [flags] Flags: === Download options === --destination string (aliases: --dest) -f, --force overwrite file when --destination file is already exist === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format ftp-open Usage Usage: ftp-open { ID | NAME | TAG }... [flags] Aliases: ftp-open, open-ftp Flags: === FTP options === --change-password === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format ftp-close Usage Usage: ftp-close { ID | NAME | TAG }... [flags] Aliases: ftp-close, close-ftp Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait, wait-for-copy Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"archive"},{"location":"references/archive/#archive","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / archive"},{"location":"references/archive/#_1","text":"Basic Commands list create read update delete Operation Commands upload download ftp-open ftp-close Other Commands wait-until-ready","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/archive/#list","text":"","title":"list"},{"location":"references/archive/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings --scope string options: [user/shared] --os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#create","text":"","title":"create"},{"location":"references/archive/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Archive-specific options === --size int (*required when --source-file is specified) --source-archive-id int --source-disk-id int --source-file string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"SizeGB\": 20, \"SourceFile\": \"/path/to/raw/file\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/archive/#read","text":"","title":"read"},{"location":"references/archive/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#update","text":"","title":"update"},{"location":"references/archive/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/archive/#delete","text":"","title":"delete"},{"location":"references/archive/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#upload","text":"","title":"upload"},{"location":"references/archive/#usage_5","text":"Usage: upload { ID | NAME | TAG }... [flags] Flags: === Upload options === --source-file string === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#download","text":"","title":"download"},{"location":"references/archive/#usage_6","text":"Usage: download { ID | NAME | TAG } [flags] Flags: === Download options === --destination string (aliases: --dest) -f, --force overwrite file when --destination file is already exist === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#ftp-open","text":"","title":"ftp-open"},{"location":"references/archive/#usage_7","text":"Usage: ftp-open { ID | NAME | TAG }... [flags] Aliases: ftp-open, open-ftp Flags: === FTP options === --change-password === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#ftp-close","text":"","title":"ftp-close"},{"location":"references/archive/#usage_8","text":"Usage: ftp-close { ID | NAME | TAG }... [flags] Aliases: ftp-close, close-ftp Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/archive/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/archive/#usage_9","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait, wait-for-copy Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/auth-status/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / auth-status \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands read read Usage Usage: read [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"auth-status"},{"location":"references/auth-status/#auth-status","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / auth-status"},{"location":"references/auth-status/#_1","text":"Basic Commands read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/auth-status/#read","text":"","title":"read"},{"location":"references/auth-status/#usage","text":"Usage: read [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/auto-backup/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / auto-backup \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Auto-Backup-specific options === --disk-id int (*required) --max-backup-num int (*required) --weekdays strings (*required) options: [all/sun/mon/tue/wed/thu/fri/sat] === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskID\": 123456789012, \"Weekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"MaxNumOfArchives\": 5 } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Auto-Backup-specific options === --max-backup-num int --weekdays strings options: [all/sun/mon/tue/wed/thu/fri/sat] === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Weekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"MaxNumOfArchives\": 5 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"auto-backup"},{"location":"references/auto-backup/#auto-backup","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / auto-backup"},{"location":"references/auto-backup/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/auto-backup/#list","text":"","title":"list"},{"location":"references/auto-backup/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/auto-backup/#create","text":"","title":"create"},{"location":"references/auto-backup/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Auto-Backup-specific options === --disk-id int (*required) --max-backup-num int (*required) --weekdays strings (*required) options: [all/sun/mon/tue/wed/thu/fri/sat] === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/auto-backup/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskID\": 123456789012, \"Weekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"MaxNumOfArchives\": 5 }","title":"Parameter Examples"},{"location":"references/auto-backup/#read","text":"","title":"read"},{"location":"references/auto-backup/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/auto-backup/#update","text":"","title":"update"},{"location":"references/auto-backup/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Auto-Backup-specific options === --max-backup-num int --weekdays strings options: [all/sun/mon/tue/wed/thu/fri/sat] === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/auto-backup/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Weekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"MaxNumOfArchives\": 5 }","title":"Parameter Examples"},{"location":"references/auto-backup/#delete","text":"","title":"delete"},{"location":"references/auto-backup/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bill/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / bill \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list csv list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Bill-specific options === --month int (*required when --year is specified) --year int (*required when --month is specified) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format csv Usage Usage: csv BillID [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"bill"},{"location":"references/bill/#bill","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / bill"},{"location":"references/bill/#_1","text":"Basic Commands list csv","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/bill/#list","text":"","title":"list"},{"location":"references/bill/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Bill-specific options === --month int (*required when --year is specified) --year int (*required when --month is specified) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bill/#csv","text":"","title":"csv"},{"location":"references/bill/#usage_1","text":"Usage: csv BillID [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bridge/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / bridge \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Operation Commands connect-switch disconnect-switch list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\" } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\" } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format connect-switch Usage Usage: connect-switch { ID | NAME | TAG } [flags] Aliases: connect-switch, switch-connect Flags: === Bridge-specific options === --switch-id int (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format disconnect-switch Usage Usage: disconnect-switch { ID | NAME | TAG } [flags] Aliases: disconnect-switch, switch-disconnect Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"bridge"},{"location":"references/bridge/#bridge","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / bridge"},{"location":"references/bridge/#_1","text":"Basic Commands list create read update delete Operation Commands connect-switch disconnect-switch","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/bridge/#list","text":"","title":"list"},{"location":"references/bridge/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bridge/#create","text":"","title":"create"},{"location":"references/bridge/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bridge/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\" }","title":"Parameter Examples"},{"location":"references/bridge/#read","text":"","title":"read"},{"location":"references/bridge/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bridge/#update","text":"","title":"update"},{"location":"references/bridge/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bridge/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\" }","title":"Parameter Examples"},{"location":"references/bridge/#delete","text":"","title":"delete"},{"location":"references/bridge/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bridge/#connect-switch","text":"","title":"connect-switch"},{"location":"references/bridge/#usage_5","text":"Usage: connect-switch { ID | NAME | TAG } [flags] Aliases: connect-switch, switch-connect Flags: === Bridge-specific options === --switch-id int (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/bridge/#disconnect-switch","text":"","title":"disconnect-switch"},{"location":"references/bridge/#usage_6","text":"Usage: disconnect-switch { ID | NAME | TAG } [flags] Aliases: disconnect-switch, switch-disconnect Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / cdrom \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Operation Commands upload download ftp-open ftp-close list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] --names strings --tags strings --scope string options: [user/shared] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Cdrom-specific options === --size int (*required when --source-file is specified) (default 5) --source-file string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"SizeGB\": 5, \"SourceFile\": \"/path/to/iso/file\" } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format upload Usage Usage: upload { ID | NAME | TAG }... [flags] Flags: === Cdrom-specific options === --source-file string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format download Usage Usage: download { ID | NAME | TAG } [flags] Flags: === Cdrom-specific options === --change-password --destination string (aliases: --dest) -f, --force overwrite file when --destination file is already exist === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format ftp-open Usage Usage: ftp-open { ID | NAME | TAG }... [flags] Aliases: ftp-open, open-ftp Flags: === Cdrom-specific options === --change-password === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format ftp-close Usage Usage: ftp-close { ID | NAME | TAG }... [flags] Aliases: ftp-close, close-ftp Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"cdrom"},{"location":"references/cdrom/#cdrom","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / cdrom"},{"location":"references/cdrom/#_1","text":"Basic Commands list create read update delete Operation Commands upload download ftp-open ftp-close","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/cdrom/#list","text":"","title":"list"},{"location":"references/cdrom/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] --names strings --tags strings --scope string options: [user/shared] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#create","text":"","title":"create"},{"location":"references/cdrom/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Cdrom-specific options === --size int (*required when --source-file is specified) (default 5) --source-file string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"SizeGB\": 5, \"SourceFile\": \"/path/to/iso/file\" }","title":"Parameter Examples"},{"location":"references/cdrom/#read","text":"","title":"read"},{"location":"references/cdrom/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#update","text":"","title":"update"},{"location":"references/cdrom/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/cdrom/#delete","text":"","title":"delete"},{"location":"references/cdrom/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#upload","text":"","title":"upload"},{"location":"references/cdrom/#usage_5","text":"Usage: upload { ID | NAME | TAG }... [flags] Flags: === Cdrom-specific options === --source-file string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#download","text":"","title":"download"},{"location":"references/cdrom/#usage_6","text":"Usage: download { ID | NAME | TAG } [flags] Flags: === Cdrom-specific options === --change-password --destination string (aliases: --dest) -f, --force overwrite file when --destination file is already exist === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#ftp-open","text":"","title":"ftp-open"},{"location":"references/cdrom/#usage_7","text":"Usage: ftp-open { ID | NAME | TAG }... [flags] Aliases: ftp-open, open-ftp Flags: === Cdrom-specific options === --change-password === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/cdrom/#ftp-close","text":"","title":"ftp-close"},{"location":"references/cdrom/#usage_8","text":"Usage: ftp-close { ID | NAME | TAG }... [flags] Aliases: ftp-close, close-ftp Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/completion/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / completion To load completions: Bash: $ source < ( usacloud completion bash ) # To load completions for each session, execute once: Linux: $ usacloud completion bash > /etc/bash_completion.d/usacloud MacOS: $ usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud Zsh: # If shell completion is not already enabled in your environment you will need # to enable it. You can execute the following once: $ echo \"autoload -U compinit; compinit\" >> ~/.zshrc # To load completions for each session, execute once: $ usacloud completion zsh > \" ${ fpath [1] } /_usacloud\" # You will need to start a new shell for this setup to take effect. Fish: $ usacloud completion fish | source # To load completions for each session, execute once: $ usacloud completion fish > ~/.config/fish/completions/usacloud.fish Usage: usacloud completion [bash|zsh|fish|powershell] Flags: -h, --help help for completion","title":"completion"},{"location":"references/completion/#completion","text":"To load completions: Bash: $ source < ( usacloud completion bash ) # To load completions for each session, execute once: Linux: $ usacloud completion bash > /etc/bash_completion.d/usacloud MacOS: $ usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud Zsh: # If shell completion is not already enabled in your environment you will need # to enable it. You can execute the following once: $ echo \"autoload -U compinit; compinit\" >> ~/.zshrc # To load completions for each session, execute once: $ usacloud completion zsh > \" ${ fpath [1] } /_usacloud\" # You will need to start a new shell for this setup to take effect. Fish: $ usacloud completion fish | source # To load completions for each session, execute once: $ usacloud completion fish > ~/.config/fish/completions/usacloud.fish Usage: usacloud completion [bash|zsh|fish|powershell] Flags: -h, --help help for completion","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / completion"},{"location":"references/config/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / config \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list current show use path create edit delete list Usage Usage: list Aliases: list, ls current Usage Usage: current show Usage Usage: show [flags] Flags: === Config-specific options === --name string use Usage Usage: use [flags] Flags: === Config-specific options === --name string path Usage Usage: path [flags] Flags: === Config-specific options === --name string create Usage Usage: create [flags] Flags: === Config-specific options === --access-token string (aliases: --token) --access-token-secret string (aliases: --secret) --default-output-type string --name string --no-color --use --zone string edit Usage Usage: edit [flags] Flags: === Config-specific options === --access-token string (aliases: --token) --access-token-secret string (aliases: --secret) --default-output-type string --name string --no-color --use --zone string delete Usage Usage: delete [flags] Flags: === Config-specific options === --name string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes","title":"config"},{"location":"references/config/#config","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / config"},{"location":"references/config/#_1","text":"Basic Commands list current show use path create edit delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/config/#list","text":"","title":"list"},{"location":"references/config/#usage","text":"Usage: list Aliases: list, ls","title":"Usage"},{"location":"references/config/#current","text":"","title":"current"},{"location":"references/config/#usage_1","text":"Usage: current","title":"Usage"},{"location":"references/config/#show","text":"","title":"show"},{"location":"references/config/#usage_2","text":"Usage: show [flags] Flags: === Config-specific options === --name string","title":"Usage"},{"location":"references/config/#use","text":"","title":"use"},{"location":"references/config/#usage_3","text":"Usage: use [flags] Flags: === Config-specific options === --name string","title":"Usage"},{"location":"references/config/#path","text":"","title":"path"},{"location":"references/config/#usage_4","text":"Usage: path [flags] Flags: === Config-specific options === --name string","title":"Usage"},{"location":"references/config/#create","text":"","title":"create"},{"location":"references/config/#usage_5","text":"Usage: create [flags] Flags: === Config-specific options === --access-token string (aliases: --token) --access-token-secret string (aliases: --secret) --default-output-type string --name string --no-color --use --zone string","title":"Usage"},{"location":"references/config/#edit","text":"","title":"edit"},{"location":"references/config/#usage_6","text":"Usage: edit [flags] Flags: === Config-specific options === --access-token string (aliases: --token) --access-token-secret string (aliases: --secret) --default-output-type string --name string --no-color --use --zone string","title":"Usage"},{"location":"references/config/#delete","text":"","title":"delete"},{"location":"references/config/#usage_7","text":"Usage: delete [flags] Flags: === Config-specific options === --name string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes","title":"Usage"},{"location":"references/container-registry/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / container-registry \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Container-Registry-specific options === --access-level string (*required) options: [readwrite/readonly/none] --subdomain-label string (*required) --users string --virtual-domain string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"AccessLevel\": \"readwrite | readonly | none\", \"SubDomainLabel\": \"your-sub-domain\", \"VirtualDomain\": \"your-domain.example.com\", \"Users\": [ { \"UserName\": \"example-user-name\", \"Password\": \"example-password\", \"Permission\": \"all | readwrite | readonly\" } ] } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Container-Registry-specific options === --access-level string options: [readwrite/readonly/none] --subdomain-label string --users string --virtual-domain string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"AccessLevel\": \"readwrite | readonly | none\", \"SubDomainLabel\": \"your-sub-domain\", \"VirtualDomain\": \"your-domain.example.com\", \"Users\": [ { \"UserName\": \"example-user-name\", \"Password\": \"example-password\", \"Permission\": \"all | readwrite | readonly\" } ] } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"container-registry"},{"location":"references/container-registry/#container-registry","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / container-registry"},{"location":"references/container-registry/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/container-registry/#list","text":"","title":"list"},{"location":"references/container-registry/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/container-registry/#create","text":"","title":"create"},{"location":"references/container-registry/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Container-Registry-specific options === --access-level string (*required) options: [readwrite/readonly/none] --subdomain-label string (*required) --users string --virtual-domain string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/container-registry/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"AccessLevel\": \"readwrite | readonly | none\", \"SubDomainLabel\": \"your-sub-domain\", \"VirtualDomain\": \"your-domain.example.com\", \"Users\": [ { \"UserName\": \"example-user-name\", \"Password\": \"example-password\", \"Permission\": \"all | readwrite | readonly\" } ] }","title":"Parameter Examples"},{"location":"references/container-registry/#read","text":"","title":"read"},{"location":"references/container-registry/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/container-registry/#update","text":"","title":"update"},{"location":"references/container-registry/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Container-Registry-specific options === --access-level string options: [readwrite/readonly/none] --subdomain-label string --users string --virtual-domain string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/container-registry/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"AccessLevel\": \"readwrite | readonly | none\", \"SubDomainLabel\": \"your-sub-domain\", \"VirtualDomain\": \"your-domain.example.com\", \"Users\": [ { \"UserName\": \"example-user-name\", \"Password\": \"example-password\", \"Permission\": \"all | readwrite | readonly\" } ] }","title":"Parameter Examples"},{"location":"references/container-registry/#delete","text":"","title":"delete"},{"location":"references/container-registry/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/coupon/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / coupon \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"coupon"},{"location":"references/coupon/#coupon","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / coupon"},{"location":"references/coupon/#_1","text":"Basic Commands list","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/coupon/#list","text":"","title":"list"},{"location":"references/coupon/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / database \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list-parameters Power Management Commands boot shutdown reset Monitoring Commands monitor-cpu monitor-database monitor-disk monitor-interface Other Commands wait-until-ready wait-until-shutdown list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --database-type string (*required) options: [postgresql/postgres/mariadb] --plan string (*required) options: [10g/30g/90g/240g/500g/1t] === Database-specific options === --database-parameters strings === WebUI options === --enable-web-ui === Backup options === --enable-backup --backup-weekdays strings (*required when --enable-backup is specified) options: [all/sun/mon/tue/wed/thu/fri/sat] --backup-start-time-hour int --backup-start-time-minute int options: [0/15/30/45] === Network options === --switch-id int (*required) --ip-address strings (*required) (aliases: --ipaddress) --netmask int (*required) (aliases: --network-mask-len) --gateway string (aliases: --default-route) --port int --source-range strings (aliases: --source-network) === Replication options === --enable-replication --replica-user-password string (*required when --enable-replication is specified) === User options === --username string (*required) --password string (*required) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DatabaseType\": \"postgresql | postgres | mariadb\", \"PlanID\": \"10g | 30g | 90g | 240g | 500g | 1t\", \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.11\" ], \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"Port\": 5432, \"SourceNetwork\": [ \"192.0.2.0/24\" ], \"Username\": \"username\", \"Password\": \"password\", \"EnableReplication\": true, \"ReplicaUserPassword\": \"password\", \"EnableWebUI\": true, \"EnableBackup\": true, \"BackupWeekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"BackupStartTimeHour\": 1, \"BackupStartTimeMinute\": 30, \"DatabaseParameters\": { \"max_connections\": \"150\" }, \"NoWait\": false } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Database-specific options === --database-parameters strings === WebUI options === --enable-web-ui === Backup options === --enable-backup --backup-weekdays strings options: [all/sun/mon/tue/wed/thu/fri/sat] --backup-start-time-hour int --backup-start-time-minute int === Network options === --source-range strings (aliases: --source-network) === Replication options === --enable-replication --replica-user-password string (*required when --enable-replication is specified) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"SourceNetwork\": [ \"192.0.2.0/24\" ], \"EnableReplication\": true, \"ReplicaUserPassword\": \"password\", \"EnableWebUI\": true, \"EnableBackup\": true, \"BackupWeekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"BackupStartTimeHour\": 1, \"BackupStartTimeMinute\": 30, \"DatabaseParameters\": null, \"NoWait\": false } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format list-parameters Usage Usage: list-parameters { ID | NAME | TAG }... [flags] Aliases: list-parameters, list-parameter Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format boot Usage Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format shutdown Usage Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Database-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format reset Usage Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-cpu Usage Usage: monitor-cpu { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format monitor-database Usage Usage: monitor-database { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format monitor-disk Usage Usage: monitor-disk { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format monitor-interface Usage Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format wait-until-shutdown Usage Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"database"},{"location":"references/database/#database","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / database"},{"location":"references/database/#_1","text":"Basic Commands list create read update delete list-parameters Power Management Commands boot shutdown reset Monitoring Commands monitor-cpu monitor-database monitor-disk monitor-interface Other Commands wait-until-ready wait-until-shutdown","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/database/#list","text":"","title":"list"},{"location":"references/database/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#create","text":"","title":"create"},{"location":"references/database/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --database-type string (*required) options: [postgresql/postgres/mariadb] --plan string (*required) options: [10g/30g/90g/240g/500g/1t] === Database-specific options === --database-parameters strings === WebUI options === --enable-web-ui === Backup options === --enable-backup --backup-weekdays strings (*required when --enable-backup is specified) options: [all/sun/mon/tue/wed/thu/fri/sat] --backup-start-time-hour int --backup-start-time-minute int options: [0/15/30/45] === Network options === --switch-id int (*required) --ip-address strings (*required) (aliases: --ipaddress) --netmask int (*required) (aliases: --network-mask-len) --gateway string (aliases: --default-route) --port int --source-range strings (aliases: --source-network) === Replication options === --enable-replication --replica-user-password string (*required when --enable-replication is specified) === User options === --username string (*required) --password string (*required) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DatabaseType\": \"postgresql | postgres | mariadb\", \"PlanID\": \"10g | 30g | 90g | 240g | 500g | 1t\", \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.11\" ], \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"Port\": 5432, \"SourceNetwork\": [ \"192.0.2.0/24\" ], \"Username\": \"username\", \"Password\": \"password\", \"EnableReplication\": true, \"ReplicaUserPassword\": \"password\", \"EnableWebUI\": true, \"EnableBackup\": true, \"BackupWeekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"BackupStartTimeHour\": 1, \"BackupStartTimeMinute\": 30, \"DatabaseParameters\": { \"max_connections\": \"150\" }, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/database/#read","text":"","title":"read"},{"location":"references/database/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#update","text":"","title":"update"},{"location":"references/database/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Database-specific options === --database-parameters strings === WebUI options === --enable-web-ui === Backup options === --enable-backup --backup-weekdays strings options: [all/sun/mon/tue/wed/thu/fri/sat] --backup-start-time-hour int --backup-start-time-minute int === Network options === --source-range strings (aliases: --source-network) === Replication options === --enable-replication --replica-user-password string (*required when --enable-replication is specified) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"SourceNetwork\": [ \"192.0.2.0/24\" ], \"EnableReplication\": true, \"ReplicaUserPassword\": \"password\", \"EnableWebUI\": true, \"EnableBackup\": true, \"BackupWeekdays\": [ \"all | sun | mon | tue | wed | thu | fri | sat\" ], \"BackupStartTimeHour\": 1, \"BackupStartTimeMinute\": 30, \"DatabaseParameters\": null, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/database/#delete","text":"","title":"delete"},{"location":"references/database/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#list-parameters","text":"","title":"list-parameters"},{"location":"references/database/#usage_5","text":"Usage: list-parameters { ID | NAME | TAG }... [flags] Aliases: list-parameters, list-parameter Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#boot","text":"","title":"boot"},{"location":"references/database/#usage_6","text":"Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#shutdown","text":"","title":"shutdown"},{"location":"references/database/#usage_7","text":"Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Database-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#reset","text":"","title":"reset"},{"location":"references/database/#usage_8","text":"Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#monitor-cpu","text":"","title":"monitor-cpu"},{"location":"references/database/#usage_9","text":"Usage: monitor-cpu { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#monitor-database","text":"","title":"monitor-database"},{"location":"references/database/#usage_10","text":"Usage: monitor-database { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#monitor-disk","text":"","title":"monitor-disk"},{"location":"references/database/#usage_11","text":"Usage: monitor-disk { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#monitor-interface","text":"","title":"monitor-interface"},{"location":"references/database/#usage_12","text":"Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/database/#usage_13","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/database/#wait-until-shutdown","text":"","title":"wait-until-shutdown"},{"location":"references/database/#usage_14","text":"Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk-plan/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / disk-plan \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"disk-plan"},{"location":"references/disk-plan/#disk-plan","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / disk-plan"},{"location":"references/disk-plan/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/disk-plan/#list","text":"","title":"list"},{"location":"references/disk-plan/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk-plan/#read","text":"","title":"read"},{"location":"references/disk-plan/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / disk \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Operation Commands connect-to-server edit disconnect-from-server resize-partition Monitoring Commands monitor-disk Other Commands wait-until-ready list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --disk-plan string (*required) options: [ssd/hdd] (default \"ssd\") --size int (default 20) --connector string (*required) options: [virtio/ide] (aliases: --connection) (default \"virtio\") === Disk-specific options === --distant-from int --server-id int === Edit disk options === --edit-disk-host-name string --edit-disk-password string --edit-disk-ip-address string --edit-disk-netmask int (aliases: --network-mask-len) --edit-disk-gateway string (aliases: --default-route) --edit-disk-disable-pw-auth --edit-disk-enable-dhcp --edit-disk-change-partition-uuid --edit-disk-ssh-keys strings --edit-disk-ssh-key-ids int --edit-disk-make-ssh-keys-ephemeral --edit-disk-note-ids int --edit-disk-notes string --edit-disk-make-notes-ephemeral === Source options === --os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] --source-disk-id int --source-archive-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskPlan\": \"ssd | hdd\", \"SizeGB\": 20, \"Connection\": \"virtio | ide\", \"OSType\": \"centos | centos8stream | centos8 | centos7 | ubuntu | ubuntu2004 | ubuntu1804 | ubuntu1604 | debian | debian10 | debian9 | coreos | rancheros | k3os | kusanagi | freebsd | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"ServerID\": 123456789012, \"DistantFrom\": [ 123456789012 ], \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": false } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Plan options === --connector string options: [virtio/ide] (aliases: --connection) === Edit disk options === --edit-disk-host-name string --edit-disk-password string --edit-disk-ip-address string --edit-disk-netmask int (aliases: --network-mask-len) --edit-disk-gateway string (aliases: --default-route) --edit-disk-disable-pw-auth --edit-disk-enable-dhcp --edit-disk-change-partition-uuid --edit-disk-ssh-keys strings --edit-disk-ssh-key-ids int --edit-disk-make-ssh-keys-ephemeral --edit-disk-note-ids int --edit-disk-notes string --edit-disk-make-notes-ephemeral === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Connection\": \"virtio | ide\", \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": false } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format connect-to-server Usage Usage: connect-to-server { ID | NAME | TAG } [flags] Aliases: connect-to-server, server-connect Flags: === Disk-specific options === --server-id int (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format edit Usage Usage: edit { ID | NAME | TAG }... [flags] Flags: === Edit disk options === --host-name string --password string --ip-address string --netmask int (aliases: --network-mask-len) --gateway string (aliases: --default-route) --disable-pw-auth --enable-dhcp --change-partition-uuid --ssh-keys strings --ssh-key-ids int --make-ssh-keys-ephemeral --note-ids int --notes string --make-notes-ephemeral === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format disconnect-from-server Usage Usage: disconnect-from-server { ID | NAME | TAG } [flags] Aliases: disconnect-from-server, server-disconnect Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format resize-partition Usage Usage: resize-partition { ID | NAME | TAG } [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-disk Usage Usage: monitor-disk { ID | NAME | TAG }... [flags] Aliases: monitor-disk, monitor Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait, wait-for-copy Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"disk"},{"location":"references/disk/#disk","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / disk"},{"location":"references/disk/#_1","text":"Basic Commands list create read update delete Operation Commands connect-to-server edit disconnect-from-server resize-partition Monitoring Commands monitor-disk Other Commands wait-until-ready","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/disk/#list","text":"","title":"list"},{"location":"references/disk/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#create","text":"","title":"create"},{"location":"references/disk/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --disk-plan string (*required) options: [ssd/hdd] (default \"ssd\") --size int (default 20) --connector string (*required) options: [virtio/ide] (aliases: --connection) (default \"virtio\") === Disk-specific options === --distant-from int --server-id int === Edit disk options === --edit-disk-host-name string --edit-disk-password string --edit-disk-ip-address string --edit-disk-netmask int (aliases: --network-mask-len) --edit-disk-gateway string (aliases: --default-route) --edit-disk-disable-pw-auth --edit-disk-enable-dhcp --edit-disk-change-partition-uuid --edit-disk-ssh-keys strings --edit-disk-ssh-key-ids int --edit-disk-make-ssh-keys-ephemeral --edit-disk-note-ids int --edit-disk-notes string --edit-disk-make-notes-ephemeral === Source options === --os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] --source-disk-id int --source-archive-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskPlan\": \"ssd | hdd\", \"SizeGB\": 20, \"Connection\": \"virtio | ide\", \"OSType\": \"centos | centos8stream | centos8 | centos7 | ubuntu | ubuntu2004 | ubuntu1804 | ubuntu1604 | debian | debian10 | debian9 | coreos | rancheros | k3os | kusanagi | freebsd | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"ServerID\": 123456789012, \"DistantFrom\": [ 123456789012 ], \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/disk/#read","text":"","title":"read"},{"location":"references/disk/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#update","text":"","title":"update"},{"location":"references/disk/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Plan options === --connector string options: [virtio/ide] (aliases: --connection) === Edit disk options === --edit-disk-host-name string --edit-disk-password string --edit-disk-ip-address string --edit-disk-netmask int (aliases: --network-mask-len) --edit-disk-gateway string (aliases: --default-route) --edit-disk-disable-pw-auth --edit-disk-enable-dhcp --edit-disk-change-partition-uuid --edit-disk-ssh-keys strings --edit-disk-ssh-key-ids int --edit-disk-make-ssh-keys-ephemeral --edit-disk-note-ids int --edit-disk-notes string --edit-disk-make-notes-ephemeral === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Connection\": \"virtio | ide\", \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/disk/#delete","text":"","title":"delete"},{"location":"references/disk/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#connect-to-server","text":"","title":"connect-to-server"},{"location":"references/disk/#usage_5","text":"Usage: connect-to-server { ID | NAME | TAG } [flags] Aliases: connect-to-server, server-connect Flags: === Disk-specific options === --server-id int (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#edit","text":"","title":"edit"},{"location":"references/disk/#usage_6","text":"Usage: edit { ID | NAME | TAG }... [flags] Flags: === Edit disk options === --host-name string --password string --ip-address string --netmask int (aliases: --network-mask-len) --gateway string (aliases: --default-route) --disable-pw-auth --enable-dhcp --change-partition-uuid --ssh-keys strings --ssh-key-ids int --make-ssh-keys-ephemeral --note-ids int --notes string --make-notes-ephemeral === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#disconnect-from-server","text":"","title":"disconnect-from-server"},{"location":"references/disk/#usage_7","text":"Usage: disconnect-from-server { ID | NAME | TAG } [flags] Aliases: disconnect-from-server, server-disconnect Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#resize-partition","text":"","title":"resize-partition"},{"location":"references/disk/#usage_8","text":"Usage: resize-partition { ID | NAME | TAG } [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#monitor-disk","text":"","title":"monitor-disk"},{"location":"references/disk/#usage_9","text":"Usage: monitor-disk { ID | NAME | TAG }... [flags] Aliases: monitor-disk, monitor Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/disk/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/disk/#usage_10","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait, wait-for-copy Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/dns/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / dns \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Dns-specific options === --records string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Records\": [ { \"Name\": \"www\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 }, { \"Name\": \"@\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 } ] } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Dns-specific options === --records string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Records\": [ { \"Name\": \"www\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 }, { \"Name\": \"@\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 } ] } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"dns"},{"location":"references/dns/#dns","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / dns"},{"location":"references/dns/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/dns/#list","text":"","title":"list"},{"location":"references/dns/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/dns/#create","text":"","title":"create"},{"location":"references/dns/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Dns-specific options === --records string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/dns/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Records\": [ { \"Name\": \"www\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 }, { \"Name\": \"@\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 } ] }","title":"Parameter Examples"},{"location":"references/dns/#read","text":"","title":"read"},{"location":"references/dns/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/dns/#update","text":"","title":"update"},{"location":"references/dns/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Dns-specific options === --records string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/dns/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Records\": [ { \"Name\": \"www\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 }, { \"Name\": \"@\", \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\", \"RData\": \"192.0.2.11\", \"TTL\": 300 } ] }","title":"Parameter Examples"},{"location":"references/dns/#delete","text":"","title":"delete"},{"location":"references/dns/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/env/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u74b0\u5883\u5909\u6570 \u74b0\u5883\u5909\u6570\u3067\u6307\u5b9a\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u4e00\u89a7\u3002 \u5404\u9805\u76ee\u306e\u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u95a2\u9023 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 \u8aac\u660e - SAKURACLOUD_PROFILE \u5229\u7528\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u79f0 - SAKURACLOUD_PROFILE_DIR \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u683c\u7d0d\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea API\u30ad\u30fc\u95a2\u9023 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 AccessToken SAKURACLOUD_ACCESS_TOKEN AccessTokenSecret SAKURACLOUD_ACCESS_TOKEN_SECRET Zone SAKURACLOUD_ZONE Zones SAKURACLOUD_ZONES Usacloud\u30b3\u30de\u30f3\u30c9\u52d5\u4f5c\u95a2\u9023 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 ArgumentMatchMode SAKURACLOUD_ARGUMENT_MATCH_MODE DefaultOutputType SAKURACLOUD_DEFAULT_OUTPUT_TYPE DefaultQueryDriver SAKURACLOUD_DEFAULT_QUERY_DRIVER ProcessTimeoutSec SAKURACLOUD_PROCESS_TIMEOUT_SEC API\u52d5\u4f5c\u95a2\u9023 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 AcceptLanguage SAKURACLOUD_ACCEPT_LANGUAGE RetryMax SAKURACLOUD_RETRY_MAX RetryWaitMax SAKURACLOUD_RETRY_WAIT_MAX RetryWaitMin SAKURACLOUD_RETRY_WAIT_MIN HTTPRequestTimeout SAKURACLOUD_API_REQUEST_TIMEOUT HTTPRequestRateLimit SAKURACLOUD_API_REQUEST_RATE_LIMIT APIRootURL SAKURACLOUD_API_ROOT_URL DefaultZone SAKURACLOUD_DEFAULT_ZONE \u30c7\u30d0\u30c3\u30b0\u95a2\u9023 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 TraceMode SAKURACLOUD_TRACE FakeMode SAKURACLOUD_FAKE_MODE FakeStorePath SAKURACLOUD_FAKE_STORE_PATH","title":"\u74b0\u5883\u5909\u6570"},{"location":"references/env/#_1","text":"\u74b0\u5883\u5909\u6570\u3067\u6307\u5b9a\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u4e00\u89a7\u3002 \u5404\u9805\u76ee\u306e\u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u74b0\u5883\u5909\u6570"},{"location":"references/env/#_2","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 \u8aac\u660e - SAKURACLOUD_PROFILE \u5229\u7528\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u79f0 - SAKURACLOUD_PROFILE_DIR \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u683c\u7d0d\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u95a2\u9023"},{"location":"references/env/#api","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 AccessToken SAKURACLOUD_ACCESS_TOKEN AccessTokenSecret SAKURACLOUD_ACCESS_TOKEN_SECRET Zone SAKURACLOUD_ZONE Zones SAKURACLOUD_ZONES","title":"API\u30ad\u30fc\u95a2\u9023"},{"location":"references/env/#usacloud","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 ArgumentMatchMode SAKURACLOUD_ARGUMENT_MATCH_MODE DefaultOutputType SAKURACLOUD_DEFAULT_OUTPUT_TYPE DefaultQueryDriver SAKURACLOUD_DEFAULT_QUERY_DRIVER ProcessTimeoutSec SAKURACLOUD_PROCESS_TIMEOUT_SEC","title":"Usacloud\u30b3\u30de\u30f3\u30c9\u52d5\u4f5c\u95a2\u9023"},{"location":"references/env/#api_1","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 AcceptLanguage SAKURACLOUD_ACCEPT_LANGUAGE RetryMax SAKURACLOUD_RETRY_MAX RetryWaitMax SAKURACLOUD_RETRY_WAIT_MAX RetryWaitMin SAKURACLOUD_RETRY_WAIT_MIN HTTPRequestTimeout SAKURACLOUD_API_REQUEST_TIMEOUT HTTPRequestRateLimit SAKURACLOUD_API_REQUEST_RATE_LIMIT APIRootURL SAKURACLOUD_API_ROOT_URL DefaultZone SAKURACLOUD_DEFAULT_ZONE","title":"API\u52d5\u4f5c\u95a2\u9023"},{"location":"references/env/#_3","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 TraceMode SAKURACLOUD_TRACE FakeMode SAKURACLOUD_FAKE_MODE FakeStorePath SAKURACLOUD_FAKE_STORE_PATH","title":"\u30c7\u30d0\u30c3\u30b0\u95a2\u9023"},{"location":"references/esme/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / esme \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Operation Commands logs send-message list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format logs Usage Usage: logs { ID | NAME | TAG }... [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format send-message Usage Usage: send-message { ID | NAME | TAG } [flags] Aliases: send-message, send Flags: === Esme-specific options === --destination string (*required) (aliases: --dest) --otp string --sender string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Destination\": \"81zzzzzzzzzz\", \"Sender\": \"example-sender\", \"OTP\": \"your-otp\" }","title":"esme"},{"location":"references/esme/#esme","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / esme"},{"location":"references/esme/#_1","text":"Basic Commands list create read update delete Operation Commands logs send-message","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/esme/#list","text":"","title":"list"},{"location":"references/esme/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/esme/#create","text":"","title":"create"},{"location":"references/esme/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/esme/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/esme/#read","text":"","title":"read"},{"location":"references/esme/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/esme/#update","text":"","title":"update"},{"location":"references/esme/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/esme/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/esme/#delete","text":"","title":"delete"},{"location":"references/esme/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/esme/#logs","text":"","title":"logs"},{"location":"references/esme/#usage_5","text":"Usage: logs { ID | NAME | TAG }... [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/esme/#send-message","text":"","title":"send-message"},{"location":"references/esme/#usage_6","text":"Usage: send-message { ID | NAME | TAG } [flags] Aliases: send-message, send Flags: === Esme-specific options === --destination string (*required) (aliases: --dest) --otp string --sender string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/esme/#parameter-examples_2","text":"{ \"Destination\": \"81zzzzzzzzzz\", \"Sender\": \"example-sender\", \"OTP\": \"your-otp\" }","title":"Parameter Examples"},{"location":"references/global/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 usacloud \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6307\u5b9a\u53ef\u80fd\u306a\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3002 Info \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044\u9805\u76ee\u306e\u8a2d\u5b9a\u304c\u884c\u3048\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Info \u4e00\u90e8\u306e\u9805\u76ee\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u8a2d\u5b9a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u4e00\u89a7 --profile --token --secret --zones --no-color --trace --fake --fake-store --process-timeout-sec --argument-match-mode --version / -v --help / -h \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb( --profile ) \u5229\u7528\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb(\u30b3\u30f3\u30d5\u30a3\u30b0)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30a8\u30a4\u30ea\u30a2\u30b9: --config ) \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f usacloud profile list \u30b3\u30de\u30f3\u30c9\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u307b\u304b\u3001 usacloud profile create \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u65b0\u898f\u4f5c\u6210\u3082\u53ef\u80fd\u3067\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/current \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_PROFILE / USACLOUD_PROFILE \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --profile \u306e\u6307\u5b9a\u3067\u3053\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 Warning Usacloud v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081v1\u3067\u3082\u74b0\u5883\u5909\u6570 USACLOUD_PROFILE \u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5ec3\u6b62\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002 API\u30c8\u30fc\u30af\u30f3( --token ) \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --token \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 API\u30b7\u30fc\u30af\u30ec\u30c3\u30c8( --secret ) \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN_SECRET \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --secret \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 \u64cd\u4f5c\u5bfe\u8c61\u30be\u30fc\u30f3( --zones ) usacloud \u30b3\u30de\u30f3\u30c9\u3067\u64cd\u4f5c\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u306e\u4e00\u89a7\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u3053\u3053\u3067\u306e\u6307\u5b9a\u306f\u5404\u30b3\u30de\u30f3\u30c9\u3067\u306e --zone \u6307\u5b9a\u3084 --zone=all \u3092\u6307\u5b9a\u3057\u305f\u969b\u306e\u6319\u52d5\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002 \u7701\u7565\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002 libsacloud: types.ZoneNames \u30ab\u30e9\u30fc\u51fa\u529b\u306e\u7121\u52b9\u5316( --no-color ) \u7aef\u672b\u3078\u306e\u51fa\u529b\u6642\u306bANSI\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u7528\u3044\u305f\u30ab\u30e9\u30fc\u51fa\u529b\u3092\u7121\u52b9\u306b\u3057\u307e\u3059\u3002 Fake\u30c9\u30e9\u30a4\u30d0\u306e\u6709\u52b9\u5316( --fake ) \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u547c\u3073\u51fa\u3057\u306bFake\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u5229\u7528\u3057\u307e\u3059\u3002 \u4e3b\u306b\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f\u78ba\u8a8d\u306a\u3069\u306e\u30c6\u30b9\u30c8\u7528\u9014\u3067\u5229\u7528\u3057\u307e\u3059\u3002 --fake-store \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u30c0\u30df\u30fcAPI\u306e\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306f\u30a4\u30f3\u30e1\u30e2\u30ea\u3068\u306a\u308a\u307e\u3059\u3002 Fake\u30c9\u30e9\u30a4\u30d0\u3067\u306eJSON\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9( --fake-store ) Fake\u30c9\u30e9\u30a4\u30d0\u30fc\u304c\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u3053\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068Fake\u30c9\u30e9\u30a4\u30d0\u30fc\u304cJSON\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8( --process-timeout-sec ) usacloud \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u5168\u4f53\u306b\u5bfe\u3059\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u79d2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u672a\u6307\u5b9a\u306e\u5834\u5408\u306f 2\u6642\u9593(7200) \u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002 \u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u306e\u6bd4\u8f03\u65b9\u6cd5( --argument-match-mode ) \u64cd\u4f5c\u5bfe\u8c61\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306b\u304a\u3044\u3066\u30ea\u30bd\u30fc\u30b9\u540d\u3068\u5f15\u6570\u3092\u6bd4\u8f03\u3059\u308b\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 partial (\u30c7\u30d5\u30a9\u30eb\u30c8): \u90e8\u5206\u4e00\u81f4 exact : \u5b8c\u5168\u4e00\u81f4 \u30c8\u30ec\u30fc\u30b9\u51fa\u529b( --trace ) \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u547c\u3073\u51fa\u3057\u306e\u30c8\u30ec\u30fc\u30b9\u30ed\u30b0\u3092\u6a19\u6e96\u30a8\u30e9\u30fc\u3078\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002 \u30d0\u30fc\u30b8\u30e7\u30f3\u8868\u793a( --version / -v ) usacloud\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u30d8\u30eb\u30d7\u8868\u793a( --help / -h ) \u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u307e\u3059\u3002","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3"},{"location":"references/global/#_1","text":"usacloud \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6307\u5b9a\u53ef\u80fd\u306a\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3002 Info \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044\u9805\u76ee\u306e\u8a2d\u5b9a\u304c\u884c\u3048\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Info \u4e00\u90e8\u306e\u9805\u76ee\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u8a2d\u5b9a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3"},{"location":"references/global/#_2","text":"--profile --token --secret --zones --no-color --trace --fake --fake-store --process-timeout-sec --argument-match-mode --version / -v --help / -h","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u4e00\u89a7"},{"location":"references/global/#profile","text":"\u5229\u7528\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb(\u30b3\u30f3\u30d5\u30a3\u30b0)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30a8\u30a4\u30ea\u30a2\u30b9: --config ) \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f usacloud profile list \u30b3\u30de\u30f3\u30c9\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u307b\u304b\u3001 usacloud profile create \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u65b0\u898f\u4f5c\u6210\u3082\u53ef\u80fd\u3067\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/current \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_PROFILE / USACLOUD_PROFILE \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --profile \u306e\u6307\u5b9a\u3067\u3053\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002 Warning Usacloud v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081v1\u3067\u3082\u74b0\u5883\u5909\u6570 USACLOUD_PROFILE \u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5ec3\u6b62\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb(--profile)"},{"location":"references/global/#token","text":"\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --token \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002","title":"API\u30c8\u30fc\u30af\u30f3(--token)"},{"location":"references/global/#secret","text":"\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u901a\u5e38\u3053\u306e\u5024\u306f ~/.usacloud/[current-profile-nane]/config.json \u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570 SAKURACLOUD_ACCESS_TOKEN_SECRET \u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e --secret \u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002","title":"API\u30b7\u30fc\u30af\u30ec\u30c3\u30c8(--secret)"},{"location":"references/global/#zones","text":"usacloud \u30b3\u30de\u30f3\u30c9\u3067\u64cd\u4f5c\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u306e\u4e00\u89a7\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u3053\u3053\u3067\u306e\u6307\u5b9a\u306f\u5404\u30b3\u30de\u30f3\u30c9\u3067\u306e --zone \u6307\u5b9a\u3084 --zone=all \u3092\u6307\u5b9a\u3057\u305f\u969b\u306e\u6319\u52d5\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002 \u7701\u7565\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002 libsacloud: types.ZoneNames","title":"\u64cd\u4f5c\u5bfe\u8c61\u30be\u30fc\u30f3(--zones)"},{"location":"references/global/#no_color","text":"\u7aef\u672b\u3078\u306e\u51fa\u529b\u6642\u306bANSI\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u7528\u3044\u305f\u30ab\u30e9\u30fc\u51fa\u529b\u3092\u7121\u52b9\u306b\u3057\u307e\u3059\u3002","title":"\u30ab\u30e9\u30fc\u51fa\u529b\u306e\u7121\u52b9\u5316(--no-color)"},{"location":"references/global/#fake","text":"\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u547c\u3073\u51fa\u3057\u306bFake\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u5229\u7528\u3057\u307e\u3059\u3002 \u4e3b\u306b\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f\u78ba\u8a8d\u306a\u3069\u306e\u30c6\u30b9\u30c8\u7528\u9014\u3067\u5229\u7528\u3057\u307e\u3059\u3002 --fake-store \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u30c0\u30df\u30fcAPI\u306e\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306f\u30a4\u30f3\u30e1\u30e2\u30ea\u3068\u306a\u308a\u307e\u3059\u3002","title":"Fake\u30c9\u30e9\u30a4\u30d0\u306e\u6709\u52b9\u5316(--fake)"},{"location":"references/global/#fake_store","text":"Fake\u30c9\u30e9\u30a4\u30d0\u30fc\u304c\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u3053\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068Fake\u30c9\u30e9\u30a4\u30d0\u30fc\u304cJSON\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","title":"Fake\u30c9\u30e9\u30a4\u30d0\u3067\u306eJSON\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9(--fake-store)"},{"location":"references/global/#process_timeout_sec","text":"usacloud \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u5168\u4f53\u306b\u5bfe\u3059\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u79d2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u672a\u6307\u5b9a\u306e\u5834\u5408\u306f 2\u6642\u9593(7200) \u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002","title":"\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8(--process-timeout-sec)"},{"location":"references/global/#argument_match_mode","text":"\u64cd\u4f5c\u5bfe\u8c61\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306b\u304a\u3044\u3066\u30ea\u30bd\u30fc\u30b9\u540d\u3068\u5f15\u6570\u3092\u6bd4\u8f03\u3059\u308b\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 partial (\u30c7\u30d5\u30a9\u30eb\u30c8): \u90e8\u5206\u4e00\u81f4 exact : \u5b8c\u5168\u4e00\u81f4","title":"\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u306e\u6bd4\u8f03\u65b9\u6cd5(--argument-match-mode)"},{"location":"references/global/#trace","text":"\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u547c\u3073\u51fa\u3057\u306e\u30c8\u30ec\u30fc\u30b9\u30ed\u30b0\u3092\u6a19\u6e96\u30a8\u30e9\u30fc\u3078\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002","title":"\u30c8\u30ec\u30fc\u30b9\u51fa\u529b(--trace)"},{"location":"references/global/#version","text":"usacloud\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\u3002","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u8868\u793a(--version / -v)"},{"location":"references/global/#help","text":"\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u307e\u3059\u3002","title":"\u30d8\u30eb\u30d7\u8868\u793a(--help / -h)"},{"location":"references/gslb/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / gslb \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Gslb-specific options === --servers string --sorry-server string === Health check options === --health-check-host-header string --health-check-path string --health-check-port int --health-check-protocol string (*required) --health-check-status int (aliases: --response-code) --delay-loop int (*required) (default 10) --weighted === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp\", \"HostHeader\": \"www.example.com\", \"Path\": \"/\", \"ResponseCode\": 200, \"Port\": 80 }, \"DelayLoop\": 10, \"Weighted\": true, \"SorryServer\": \"192.0.2.1\", \"DestinationServers\": [ { \"IPAddress\": \"192.0.2.11\", \"Enabled\": \"True\", \"Weight\": \"1\" } ] } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Gslb-specific options === --servers string --sorry-server string === Health check options === --health-check-host-header string --health-check-path string --health-check-port int --health-check-protocol string --health-check-status int (aliases: --response-code) --delay-loop int --weighted === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp\", \"HostHeader\": \"www.example.com\", \"Path\": \"/\", \"ResponseCode\": 200, \"Port\": 80 }, \"DelayLoop\": 10, \"Weighted\": true, \"SorryServer\": \"192.0.2.1\", \"DestinationServers\": [ { \"IPAddress\": \"192.0.2.11\", \"Enabled\": \"True\", \"Weight\": \"1\" } ] } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"gslb"},{"location":"references/gslb/#gslb","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / gslb"},{"location":"references/gslb/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/gslb/#list","text":"","title":"list"},{"location":"references/gslb/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/gslb/#create","text":"","title":"create"},{"location":"references/gslb/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Gslb-specific options === --servers string --sorry-server string === Health check options === --health-check-host-header string --health-check-path string --health-check-port int --health-check-protocol string (*required) --health-check-status int (aliases: --response-code) --delay-loop int (*required) (default 10) --weighted === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/gslb/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp\", \"HostHeader\": \"www.example.com\", \"Path\": \"/\", \"ResponseCode\": 200, \"Port\": 80 }, \"DelayLoop\": 10, \"Weighted\": true, \"SorryServer\": \"192.0.2.1\", \"DestinationServers\": [ { \"IPAddress\": \"192.0.2.11\", \"Enabled\": \"True\", \"Weight\": \"1\" } ] }","title":"Parameter Examples"},{"location":"references/gslb/#read","text":"","title":"read"},{"location":"references/gslb/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/gslb/#update","text":"","title":"update"},{"location":"references/gslb/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Gslb-specific options === --servers string --sorry-server string === Health check options === --health-check-host-header string --health-check-path string --health-check-port int --health-check-protocol string --health-check-status int (aliases: --response-code) --delay-loop int --weighted === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/gslb/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp\", \"HostHeader\": \"www.example.com\", \"Path\": \"/\", \"ResponseCode\": 200, \"Port\": 80 }, \"DelayLoop\": 10, \"Weighted\": true, \"SorryServer\": \"192.0.2.1\", \"DestinationServers\": [ { \"IPAddress\": \"192.0.2.11\", \"Enabled\": \"True\", \"Weight\": \"1\" } ] }","title":"Parameter Examples"},{"location":"references/gslb/#delete","text":"","title":"delete"},{"location":"references/gslb/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/icon/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / icon \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings --scope string options: [user/shared] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --tags strings === Icon-specific options === --image string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"Image\": \"/path/to/your/icon/image.png\" } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --tags strings === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ] } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"icon"},{"location":"references/icon/#icon","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / icon"},{"location":"references/icon/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/icon/#list","text":"","title":"list"},{"location":"references/icon/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings --scope string options: [user/shared] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/icon/#create","text":"","title":"create"},{"location":"references/icon/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --tags strings === Icon-specific options === --image string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/icon/#parameter-examples","text":"{ \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"Image\": \"/path/to/your/icon/image.png\" }","title":"Parameter Examples"},{"location":"references/icon/#read","text":"","title":"read"},{"location":"references/icon/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/icon/#update","text":"","title":"update"},{"location":"references/icon/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --tags strings === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/icon/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ] }","title":"Parameter Examples"},{"location":"references/icon/#delete","text":"","title":"delete"},{"location":"references/icon/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/interface/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / interface \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --mac-addresses strings --packet-filer-ids strings --packet-filter-names strings --server-ids strings --server-names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"interface"},{"location":"references/interface/#interface","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / interface"},{"location":"references/interface/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/interface/#list","text":"","title":"list"},{"location":"references/interface/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --mac-addresses strings --packet-filer-ids strings --packet-filter-names strings --server-ids strings --server-names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/interface/#read","text":"","title":"read"},{"location":"references/interface/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet-plan/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / internet-plan \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"internet-plan"},{"location":"references/internet-plan/#internet-plan","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / internet-plan"},{"location":"references/internet-plan/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/internet-plan/#list","text":"","title":"list"},{"location":"references/internet-plan/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet-plan/#read","text":"","title":"read"},{"location":"references/internet-plan/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / internet \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Subnet Operation Commands list-subnet add-subnet delete-subnet IPv6 Operation Commands enable-ipv6 disable-ipv6 Monitoring Commands monitor-router list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --switch-ids strings --switch-names strings --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Internet-specific options === --band-width int (*required) options: [100/250/500/1000/1500/2000/2500/3000/3500/4000/4500/5000] (aliases: --band-width-mbps) (default 100) --enable-ipv6 --netmask int (*required) options: [28/27/26] (aliases: --network-mask-len) (default 28) --not-found-retry int (default 10) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"NetworkMaskLen\": 28, \"BandWidthMbps\": 100, \"EnableIPv6\": true, \"NoWait\": false, \"NotFoundRetry\": 10 } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Internet-specific options === --band-width int options: [100/250/500/1000/1500/2000/2500/3000/3500/4000/4500/5000] (aliases: --band-width-mbps) --enable-ipv6 === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"BandWidthMbps\": 28, \"EnableIPv6\": true } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format list-subnet Usage Usage: list-subnet { ID | NAME | TAG }... [flags] Aliases: list-subnet, subnet-list Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format add-subnet Usage Usage: add-subnet { ID | NAME | TAG }... [flags] Aliases: add-subnet, subnet-add Flags: === Internet-specific options === --netmask int (*required) options: [28/27/26] (aliases: --network-mask-len) (default 28) --next-hop string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format delete-subnet Usage Usage: delete-subnet { ID | NAME | TAG } [flags] Aliases: delete-subnet, subnet-delete Flags: === Internet-specific options === --subnet-id int (*required) === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format enable-ipv6 Usage Usage: enable-ipv6 { ID | NAME | TAG }... [flags] Aliases: enable-ipv6, ipv6-enable Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format disable-ipv6 Usage Usage: disable-ipv6 { ID | NAME | TAG }... [flags] Aliases: disable-ipv6, ipv6-disable Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-router Usage Usage: monitor-router { ID | NAME | TAG }... [flags] Aliases: monitor-router, monitor Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"internet"},{"location":"references/internet/#internet","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / internet"},{"location":"references/internet/#_1","text":"Basic Commands list create read update delete Subnet Operation Commands list-subnet add-subnet delete-subnet IPv6 Operation Commands enable-ipv6 disable-ipv6 Monitoring Commands monitor-router","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/internet/#list","text":"","title":"list"},{"location":"references/internet/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --switch-ids strings --switch-names strings --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#create","text":"","title":"create"},{"location":"references/internet/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Internet-specific options === --band-width int (*required) options: [100/250/500/1000/1500/2000/2500/3000/3500/4000/4500/5000] (aliases: --band-width-mbps) (default 100) --enable-ipv6 --netmask int (*required) options: [28/27/26] (aliases: --network-mask-len) (default 28) --not-found-retry int (default 10) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"NetworkMaskLen\": 28, \"BandWidthMbps\": 100, \"EnableIPv6\": true, \"NoWait\": false, \"NotFoundRetry\": 10 }","title":"Parameter Examples"},{"location":"references/internet/#read","text":"","title":"read"},{"location":"references/internet/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#update","text":"","title":"update"},{"location":"references/internet/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Internet-specific options === --band-width int options: [100/250/500/1000/1500/2000/2500/3000/3500/4000/4500/5000] (aliases: --band-width-mbps) --enable-ipv6 === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"BandWidthMbps\": 28, \"EnableIPv6\": true }","title":"Parameter Examples"},{"location":"references/internet/#delete","text":"","title":"delete"},{"location":"references/internet/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#list-subnet","text":"","title":"list-subnet"},{"location":"references/internet/#usage_5","text":"Usage: list-subnet { ID | NAME | TAG }... [flags] Aliases: list-subnet, subnet-list Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#add-subnet","text":"","title":"add-subnet"},{"location":"references/internet/#usage_6","text":"Usage: add-subnet { ID | NAME | TAG }... [flags] Aliases: add-subnet, subnet-add Flags: === Internet-specific options === --netmask int (*required) options: [28/27/26] (aliases: --network-mask-len) (default 28) --next-hop string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#delete-subnet","text":"","title":"delete-subnet"},{"location":"references/internet/#usage_7","text":"Usage: delete-subnet { ID | NAME | TAG } [flags] Aliases: delete-subnet, subnet-delete Flags: === Internet-specific options === --subnet-id int (*required) === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#enable-ipv6","text":"","title":"enable-ipv6"},{"location":"references/internet/#usage_8","text":"Usage: enable-ipv6 { ID | NAME | TAG }... [flags] Aliases: enable-ipv6, ipv6-enable Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#disable-ipv6","text":"","title":"disable-ipv6"},{"location":"references/internet/#usage_9","text":"Usage: disable-ipv6 { ID | NAME | TAG }... [flags] Aliases: disable-ipv6, ipv6-disable Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/internet/#monitor-router","text":"","title":"monitor-router"},{"location":"references/internet/#usage_10","text":"Usage: monitor-router { ID | NAME | TAG }... [flags] Aliases: monitor-router, monitor Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipaddress/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipaddress \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read Other Commands update-host-name list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read ipv4_address [flags] Aliases: read, show Flags: === Ipaddress-specific options === --ipaddress string (*required) (aliases: --ip-address) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update-host-name Usage Usage: update-host-name { ID | NAME | TAG }... [flags] Flags: === Ipaddress-specific options === --host-name string (*required) --ip-address string (*required) --retry-interval int (default 10) --retry-max int (default 30) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"IPAddress\": \"192.0.2.11\", \"HostName\": \"www.example.com\", \"RetryMax\": 30, \"RetryInterval\": 10 }","title":"ipaddress"},{"location":"references/ipaddress/#ipaddress","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipaddress"},{"location":"references/ipaddress/#_1","text":"Basic Commands list read Other Commands update-host-name","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/ipaddress/#list","text":"","title":"list"},{"location":"references/ipaddress/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipaddress/#read","text":"","title":"read"},{"location":"references/ipaddress/#usage_1","text":"Usage: read ipv4_address [flags] Aliases: read, show Flags: === Ipaddress-specific options === --ipaddress string (*required) (aliases: --ip-address) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipaddress/#update-host-name","text":"","title":"update-host-name"},{"location":"references/ipaddress/#usage_2","text":"Usage: update-host-name { ID | NAME | TAG }... [flags] Flags: === Ipaddress-specific options === --host-name string (*required) --ip-address string (*required) --retry-interval int (default 10) --retry-max int (default 30) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipaddress/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"IPAddress\": \"192.0.2.11\", \"HostName\": \"www.example.com\", \"RetryMax\": 30, \"RetryInterval\": 10 }","title":"Parameter Examples"},{"location":"references/ipv6addr/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipv6addr \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Ipv6addr-specific options === --hostnames strings (aliases: --host-names) --ipv6-addresses strings --switch-ids strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Ipv6addr-specific options === --host-name string (*required) --ipv6addr string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read [flags] Aliases: read, show Flags: === Ipv6addr-specific options === --ipv6addr string (*required) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update [flags] Flags: === Ipv6addr-specific options === --host-name string (*required) --ipv6addr string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format delete Usage Usage: delete [flags] Aliases: delete, rm Flags: === Ipv6addr-specific options === --ipv6addr string (*required) === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"ipv6addr"},{"location":"references/ipv6addr/#ipv6addr","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipv6addr"},{"location":"references/ipv6addr/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/ipv6addr/#list","text":"","title":"list"},{"location":"references/ipv6addr/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Ipv6addr-specific options === --hostnames strings (aliases: --host-names) --ipv6-addresses strings --switch-ids strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipv6addr/#create","text":"","title":"create"},{"location":"references/ipv6addr/#usage_1","text":"Usage: create [flags] Flags: === Ipv6addr-specific options === --host-name string (*required) --ipv6addr string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipv6addr/#read","text":"","title":"read"},{"location":"references/ipv6addr/#usage_2","text":"Usage: read [flags] Aliases: read, show Flags: === Ipv6addr-specific options === --ipv6addr string (*required) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipv6addr/#update","text":"","title":"update"},{"location":"references/ipv6addr/#usage_3","text":"Usage: update [flags] Flags: === Ipv6addr-specific options === --host-name string (*required) --ipv6addr string (*required) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipv6addr/#delete","text":"","title":"delete"},{"location":"references/ipv6addr/#usage_4","text":"Usage: delete [flags] Aliases: delete, rm Flags: === Ipv6addr-specific options === --ipv6addr string (*required) === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipv6net/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipv6net \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Ipv6net-specific options === --internet-ids strings --internet-names strings --switch-ids strings --switch-names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"ipv6net"},{"location":"references/ipv6net/#ipv6net","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipv6net"},{"location":"references/ipv6net/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/ipv6net/#list","text":"","title":"list"},{"location":"references/ipv6net/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Ipv6net-specific options === --internet-ids strings --internet-names strings --switch-ids strings --switch-names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ipv6net/#read","text":"","title":"read"},{"location":"references/ipv6net/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/license-info/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / license-info \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"license-info"},{"location":"references/license-info/#license-info","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / license-info"},{"location":"references/license-info/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/license-info/#list","text":"","title":"list"},{"location":"references/license-info/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/license-info/#read","text":"","title":"read"},{"location":"references/license-info/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/license/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / license \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) === License-specific options === --license-info-id int (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"LicenseInfoID\": 123456789012 } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\" } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"license"},{"location":"references/license/#license","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / license"},{"location":"references/license/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/license/#list","text":"","title":"list"},{"location":"references/license/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/license/#create","text":"","title":"create"},{"location":"references/license/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) === License-specific options === --license-info-id int (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/license/#parameter-examples","text":"{ \"Name\": \"example\", \"LicenseInfoID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/license/#read","text":"","title":"read"},{"location":"references/license/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/license/#update","text":"","title":"update"},{"location":"references/license/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/license/#parameter-examples_1","text":"{ \"Name\": \"example\" }","title":"Parameter Examples"},{"location":"references/license/#delete","text":"","title":"delete"},{"location":"references/license/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / load-balancer \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface Other Commands wait-until-ready wait-until-shutdown list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --plan string (*required) options: [standard/highspec] (default \"standard\") === Network options === --vrid int --switch-id int (*required) --ip-address strings (*required) (aliases: --ipaddress) --netmask int (*required) (aliases: --network-mask-len) --gateway string (aliases: --default-route) --port int --virtual-ip-addresses string (aliases: --vips) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PlanID\": \"standard | highspec\", \"VRID\": 1, \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"Port\": 80, \"VirtualIPAddresses\": [ { \"VirtualIPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"DelayLoop\": \"10\", \"SorryServer\": \"192.0.2.1\", \"Description\": \"example\", \"Servers\": [ { \"IPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"Enabled\": \"True\", \"HealthCheck\": { \"Protocol\": \"http | https | tcp | ping\", \"Path\": \"/\", \"ResponseCode\": \"200\" } } ] } ], \"NoWait\": false } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Network options === --virtual-ip-addresses string (aliases: --vips) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"VirtualIPAddresses\": [ { \"VirtualIPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"DelayLoop\": \"10\", \"SorryServer\": \"192.0.2.1\", \"Description\": \"example\", \"Servers\": [ { \"IPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"Enabled\": \"True\", \"HealthCheck\": { \"Protocol\": \"http | https | tcp | ping\", \"Path\": \"/\", \"ResponseCode\": \"200\" } } ] } ], \"NoWait\": false } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format boot Usage Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format shutdown Usage Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Load-Balancer-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format reset Usage Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-interface Usage Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format wait-until-shutdown Usage Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"load-balancer"},{"location":"references/load-balancer/#load-balancer","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / load-balancer"},{"location":"references/load-balancer/#_1","text":"Basic Commands list create read update delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface Other Commands wait-until-ready wait-until-shutdown","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/load-balancer/#list","text":"","title":"list"},{"location":"references/load-balancer/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#create","text":"","title":"create"},{"location":"references/load-balancer/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --plan string (*required) options: [standard/highspec] (default \"standard\") === Network options === --vrid int --switch-id int (*required) --ip-address strings (*required) (aliases: --ipaddress) --netmask int (*required) (aliases: --network-mask-len) --gateway string (aliases: --default-route) --port int --virtual-ip-addresses string (aliases: --vips) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PlanID\": \"standard | highspec\", \"VRID\": 1, \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"Port\": 80, \"VirtualIPAddresses\": [ { \"VirtualIPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"DelayLoop\": \"10\", \"SorryServer\": \"192.0.2.1\", \"Description\": \"example\", \"Servers\": [ { \"IPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"Enabled\": \"True\", \"HealthCheck\": { \"Protocol\": \"http | https | tcp | ping\", \"Path\": \"/\", \"ResponseCode\": \"200\" } } ] } ], \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/load-balancer/#read","text":"","title":"read"},{"location":"references/load-balancer/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#update","text":"","title":"update"},{"location":"references/load-balancer/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Network options === --virtual-ip-addresses string (aliases: --vips) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"VirtualIPAddresses\": [ { \"VirtualIPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"DelayLoop\": \"10\", \"SorryServer\": \"192.0.2.1\", \"Description\": \"example\", \"Servers\": [ { \"IPAddress\": \"192.0.2.101\", \"Port\": \"80\", \"Enabled\": \"True\", \"HealthCheck\": { \"Protocol\": \"http | https | tcp | ping\", \"Path\": \"/\", \"ResponseCode\": \"200\" } } ] } ], \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/load-balancer/#delete","text":"","title":"delete"},{"location":"references/load-balancer/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#boot","text":"","title":"boot"},{"location":"references/load-balancer/#usage_5","text":"Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#shutdown","text":"","title":"shutdown"},{"location":"references/load-balancer/#usage_6","text":"Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Load-Balancer-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#reset","text":"","title":"reset"},{"location":"references/load-balancer/#usage_7","text":"Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#monitor-interface","text":"","title":"monitor-interface"},{"location":"references/load-balancer/#usage_8","text":"Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/load-balancer/#usage_9","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/load-balancer/#wait-until-shutdown","text":"","title":"wait-until-shutdown"},{"location":"references/load-balancer/#usage_10","text":"Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/local-router/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / local-router \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Monitoring Commands monitor-local-router Other Commands health list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Local-Router-specific options === --ip-addresses strings --netmask int (aliases: --network-mask-len) --peers string --static-routes string --switch-category string --switch-code string --switch-zone-id string --virtual-ip-address string --vrid int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Switch\": { \"Code\": \"123456789012\", \"Category\": \"cloud\", \"ZoneID\": \"tk1a | tk1b | is1a | is1b | tk1v\" }, \"Interface\": { \"VirtualIPAddress\": \"192.0.2.101\", \"IPAddress\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"VRID\": 1 }, \"Peers\": [ { \"ID\": 123456789012, \"SecretKey\": \"*****\", \"Enabled\": true, \"Description\": \"example-peer\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.1\" } ] } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Local-Router-specific options === --ip-addresses strings --netmask int (aliases: --network-mask-len) --peers string --static-routes string --switch-category string --switch-code string --switch-zone-id string --virtual-ip-address string --vrid int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Switch\": { \"Code\": \"123456789012\", \"Category\": \"cloud\", \"ZoneID\": \"tk1a | tk1b | is1a | is1b | tk1v\" }, \"Interface\": { \"VirtualIPAddress\": \"192.0.2.101\", \"IPAddress\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"VRID\": 1 }, \"Peers\": [ { \"ID\": 123456789012, \"SecretKey\": \"*****\", \"Enabled\": true, \"Description\": \"example-peer\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.1\" } ] } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format monitor-local-router Usage Usage: monitor-local-router { ID | NAME | TAG }... [flags] Aliases: monitor-local-router, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format health Usage Usage: health { ID | NAME | TAG }... [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"local-router"},{"location":"references/local-router/#local-router","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / local-router"},{"location":"references/local-router/#_1","text":"Basic Commands list create read update delete Monitoring Commands monitor-local-router Other Commands health","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/local-router/#list","text":"","title":"list"},{"location":"references/local-router/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/local-router/#create","text":"","title":"create"},{"location":"references/local-router/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Local-Router-specific options === --ip-addresses strings --netmask int (aliases: --network-mask-len) --peers string --static-routes string --switch-category string --switch-code string --switch-zone-id string --virtual-ip-address string --vrid int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/local-router/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Switch\": { \"Code\": \"123456789012\", \"Category\": \"cloud\", \"ZoneID\": \"tk1a | tk1b | is1a | is1b | tk1v\" }, \"Interface\": { \"VirtualIPAddress\": \"192.0.2.101\", \"IPAddress\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"VRID\": 1 }, \"Peers\": [ { \"ID\": 123456789012, \"SecretKey\": \"*****\", \"Enabled\": true, \"Description\": \"example-peer\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.1\" } ] }","title":"Parameter Examples"},{"location":"references/local-router/#read","text":"","title":"read"},{"location":"references/local-router/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/local-router/#update","text":"","title":"update"},{"location":"references/local-router/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Local-Router-specific options === --ip-addresses strings --netmask int (aliases: --network-mask-len) --peers string --static-routes string --switch-category string --switch-code string --switch-zone-id string --virtual-ip-address string --vrid int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/local-router/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Switch\": { \"Code\": \"123456789012\", \"Category\": \"cloud\", \"ZoneID\": \"tk1a | tk1b | is1a | is1b | tk1v\" }, \"Interface\": { \"VirtualIPAddress\": \"192.0.2.101\", \"IPAddress\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"VRID\": 1 }, \"Peers\": [ { \"ID\": 123456789012, \"SecretKey\": \"*****\", \"Enabled\": true, \"Description\": \"example-peer\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.1\" } ] }","title":"Parameter Examples"},{"location":"references/local-router/#delete","text":"","title":"delete"},{"location":"references/local-router/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/local-router/#monitor-local-router","text":"","title":"monitor-local-router"},{"location":"references/local-router/#usage_5","text":"Usage: monitor-local-router { ID | NAME | TAG }... [flags] Aliases: monitor-local-router, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/local-router/#health","text":"","title":"health"},{"location":"references/local-router/#usage_6","text":"Usage: health { ID | NAME | TAG }... [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / mobile-gateway \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface logs Other Commands wait-until-ready wait-until-shutdown list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Mobile-Gateway-specific options === --boot-after-create --dns1 string --dns2 string --inter-device-communication-enabled --internet-connection-enabled --sim-routes string --sims string --static-routes string --traffic-config-auto-traffic-shaping --traffic-config-band-width-limit-in-kbps int --traffic-config-email-notify-enabled --traffic-config-slack-notify-enabled --traffic-config-slack-notify-webhooks-url string --traffic-config-traffic-quota-in-mb int === Network options === --private-interface-ip-address string (*required) --private-interface-network-mask-len int --private-interface-switch-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"InternetConnectionEnabled\": true, \"InterDeviceCommunicationEnabled\": true, \"SIMs\": [ { \"SIMID\": 123456789012, \"IPAddress\": \"192.0.2.11\" } ], \"SIMRoutes\": [ { \"SIMID\": 123456789012, \"Prefix\": \"192.0.2.0/24\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.2\" } ], \"PrivateInterface\": { \"SwitchID\": 123456789012, \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24 }, \"DNS\": { \"DNS1\": \"133.242.0.3 | 210.188.224.10 | n.n.n.n\", \"DNS2\": \"133.242.0.4 | 210.188.224.11 | n.n.n.n\" }, \"TrafficConfig\": { \"TrafficQuotaInMB\": 10, \"BandWidthLimitInKbps\": 128, \"EmailNotifyEnabled\": true, \"SlackNotifyEnabled\": true, \"SlackNotifyWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"AutoTrafficShaping\": true }, \"NoWait\": false, \"BootAfterCreate\": true } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Mobile-Gateway-specific options === --dns1 string --dns2 string --inter-device-communication-enabled --internet-connection-enabled --sim-routes string --sims string --static-routes string --traffic-config-auto-traffic-shaping --traffic-config-band-width-limit-in-kbps int --traffic-config-email-notify-enabled --traffic-config-slack-notify-enabled --traffic-config-slack-notify-webhooks-url string --traffic-config-traffic-quota-in-mb int === Network options === --private-interface-ip-address string --private-interface-network-mask-len int --private-interface-switch-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PrivateInterface\": { \"SwitchID\": 123456789012, \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24 }, \"InternetConnectionEnabled\": true, \"InterDeviceCommunicationEnabled\": true, \"SIMs\": [ { \"SIMID\": 123456789012, \"IPAddress\": \"192.0.2.11\" } ], \"SIMRoutes\": [ { \"SIMID\": 123456789012, \"Prefix\": \"192.0.2.0/24\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.2\" } ], \"DNS\": { \"DNS1\": \"133.242.0.3 | 210.188.224.10 | n.n.n.n\", \"DNS2\": \"133.242.0.4 | 210.188.224.11 | n.n.n.n\" }, \"TrafficConfig\": { \"TrafficQuotaInMB\": 10, \"BandWidthLimitInKbps\": 128, \"EmailNotifyEnabled\": true, \"SlackNotifyEnabled\": true, \"SlackNotifyWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"AutoTrafficShaping\": true }, \"NoWait\": false } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format boot Usage Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format shutdown Usage Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Mobile-Gateway-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format reset Usage Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-interface Usage Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format logs Usage Usage: logs { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format wait-until-shutdown Usage Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"mobile-gateway"},{"location":"references/mobile-gateway/#mobile-gateway","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / mobile-gateway"},{"location":"references/mobile-gateway/#_1","text":"Basic Commands list create read update delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface logs Other Commands wait-until-ready wait-until-shutdown","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/mobile-gateway/#list","text":"","title":"list"},{"location":"references/mobile-gateway/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#create","text":"","title":"create"},{"location":"references/mobile-gateway/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Mobile-Gateway-specific options === --boot-after-create --dns1 string --dns2 string --inter-device-communication-enabled --internet-connection-enabled --sim-routes string --sims string --static-routes string --traffic-config-auto-traffic-shaping --traffic-config-band-width-limit-in-kbps int --traffic-config-email-notify-enabled --traffic-config-slack-notify-enabled --traffic-config-slack-notify-webhooks-url string --traffic-config-traffic-quota-in-mb int === Network options === --private-interface-ip-address string (*required) --private-interface-network-mask-len int --private-interface-switch-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"InternetConnectionEnabled\": true, \"InterDeviceCommunicationEnabled\": true, \"SIMs\": [ { \"SIMID\": 123456789012, \"IPAddress\": \"192.0.2.11\" } ], \"SIMRoutes\": [ { \"SIMID\": 123456789012, \"Prefix\": \"192.0.2.0/24\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.2\" } ], \"PrivateInterface\": { \"SwitchID\": 123456789012, \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24 }, \"DNS\": { \"DNS1\": \"133.242.0.3 | 210.188.224.10 | n.n.n.n\", \"DNS2\": \"133.242.0.4 | 210.188.224.11 | n.n.n.n\" }, \"TrafficConfig\": { \"TrafficQuotaInMB\": 10, \"BandWidthLimitInKbps\": 128, \"EmailNotifyEnabled\": true, \"SlackNotifyEnabled\": true, \"SlackNotifyWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"AutoTrafficShaping\": true }, \"NoWait\": false, \"BootAfterCreate\": true }","title":"Parameter Examples"},{"location":"references/mobile-gateway/#read","text":"","title":"read"},{"location":"references/mobile-gateway/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#update","text":"","title":"update"},{"location":"references/mobile-gateway/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Mobile-Gateway-specific options === --dns1 string --dns2 string --inter-device-communication-enabled --internet-connection-enabled --sim-routes string --sims string --static-routes string --traffic-config-auto-traffic-shaping --traffic-config-band-width-limit-in-kbps int --traffic-config-email-notify-enabled --traffic-config-slack-notify-enabled --traffic-config-slack-notify-webhooks-url string --traffic-config-traffic-quota-in-mb int === Network options === --private-interface-ip-address string --private-interface-network-mask-len int --private-interface-switch-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PrivateInterface\": { \"SwitchID\": 123456789012, \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24 }, \"InternetConnectionEnabled\": true, \"InterDeviceCommunicationEnabled\": true, \"SIMs\": [ { \"SIMID\": 123456789012, \"IPAddress\": \"192.0.2.11\" } ], \"SIMRoutes\": [ { \"SIMID\": 123456789012, \"Prefix\": \"192.0.2.0/24\" } ], \"StaticRoutes\": [ { \"Prefix\": \"192.0.2.0/24\", \"NextHop\": \"192.0.2.2\" } ], \"DNS\": { \"DNS1\": \"133.242.0.3 | 210.188.224.10 | n.n.n.n\", \"DNS2\": \"133.242.0.4 | 210.188.224.11 | n.n.n.n\" }, \"TrafficConfig\": { \"TrafficQuotaInMB\": 10, \"BandWidthLimitInKbps\": 128, \"EmailNotifyEnabled\": true, \"SlackNotifyEnabled\": true, \"SlackNotifyWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"AutoTrafficShaping\": true }, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/mobile-gateway/#delete","text":"","title":"delete"},{"location":"references/mobile-gateway/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#boot","text":"","title":"boot"},{"location":"references/mobile-gateway/#usage_5","text":"Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#shutdown","text":"","title":"shutdown"},{"location":"references/mobile-gateway/#usage_6","text":"Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Mobile-Gateway-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#reset","text":"","title":"reset"},{"location":"references/mobile-gateway/#usage_7","text":"Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#monitor-interface","text":"","title":"monitor-interface"},{"location":"references/mobile-gateway/#usage_8","text":"Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#logs","text":"","title":"logs"},{"location":"references/mobile-gateway/#usage_9","text":"Usage: logs { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/mobile-gateway/#usage_10","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/mobile-gateway/#wait-until-shutdown","text":"","title":"wait-until-shutdown"},{"location":"references/mobile-gateway/#usage_11","text":"Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / nfs \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface monitor-free-disk-size Other Commands wait-until-ready wait-until-shutdown list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --plan string (*required) options: [ssd/hdd] (default \"ssd\") --size int (*required) === Network options === --switch-id int (*required) --ip-address strings (*required) (aliases: --ipaddress) --netmask int (*required) (aliases: --network-mask-len) --gateway string (aliases: --default-route) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"ssd | hdd\", \"Size\": 20, \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"NoWait\": false } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format boot Usage Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format shutdown Usage Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Nfs-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format reset Usage Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-interface Usage Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format monitor-free-disk-size Usage Usage: monitor-free-disk-size { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format wait-until-shutdown Usage Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"nfs"},{"location":"references/nfs/#nfs","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / nfs"},{"location":"references/nfs/#_1","text":"Basic Commands list create read update delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface monitor-free-disk-size Other Commands wait-until-ready wait-until-shutdown","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/nfs/#list","text":"","title":"list"},{"location":"references/nfs/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#create","text":"","title":"create"},{"location":"references/nfs/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --plan string (*required) options: [ssd/hdd] (default \"ssd\") --size int (*required) === Network options === --switch-id int (*required) --ip-address strings (*required) (aliases: --ipaddress) --netmask int (*required) (aliases: --network-mask-len) --gateway string (aliases: --default-route) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"ssd | hdd\", \"Size\": 20, \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/nfs/#read","text":"","title":"read"},{"location":"references/nfs/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#update","text":"","title":"update"},{"location":"references/nfs/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/nfs/#delete","text":"","title":"delete"},{"location":"references/nfs/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#boot","text":"","title":"boot"},{"location":"references/nfs/#usage_5","text":"Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#shutdown","text":"","title":"shutdown"},{"location":"references/nfs/#usage_6","text":"Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Nfs-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#reset","text":"","title":"reset"},{"location":"references/nfs/#usage_7","text":"Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#monitor-interface","text":"","title":"monitor-interface"},{"location":"references/nfs/#usage_8","text":"Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#monitor-free-disk-size","text":"","title":"monitor-free-disk-size"},{"location":"references/nfs/#usage_9","text":"Usage: monitor-free-disk-size { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/nfs/#usage_10","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/nfs/#wait-until-shutdown","text":"","title":"wait-until-shutdown"},{"location":"references/nfs/#usage_11","text":"Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/note/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / note \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings --scope string options: [user/shared] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --tags strings --icon-id int === Note-specific options === --class string (*required) options: [shell/yaml_cloud_config] (default \"shell\") --content string (*required) (aliases: --contents, --script, --scripts) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Class\": \"shell | yaml_cloud_config\", \"Content\": \"#!/bin/bash\\n\\n...\" } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --tags strings --icon-id int === Note-specific options === --content string (aliases: --contents) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Content\": \"#!/bin/bash\\n\\n...\" } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"note"},{"location":"references/note/#note","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / note"},{"location":"references/note/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/note/#list","text":"","title":"list"},{"location":"references/note/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings --scope string options: [user/shared] === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/note/#create","text":"","title":"create"},{"location":"references/note/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --tags strings --icon-id int === Note-specific options === --class string (*required) options: [shell/yaml_cloud_config] (default \"shell\") --content string (*required) (aliases: --contents, --script, --scripts) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/note/#parameter-examples","text":"{ \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Class\": \"shell | yaml_cloud_config\", \"Content\": \"#!/bin/bash\\n\\n...\" }","title":"Parameter Examples"},{"location":"references/note/#read","text":"","title":"read"},{"location":"references/note/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/note/#update","text":"","title":"update"},{"location":"references/note/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --tags strings --icon-id int === Note-specific options === --content string (aliases: --contents) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/note/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Content\": \"#!/bin/bash\\n\\n...\" }","title":"Parameter Examples"},{"location":"references/note/#delete","text":"","title":"delete"},{"location":"references/note/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/packet-filter/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / packet-filter \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string === Packet-Filter-specific options === --expressions string (aliases: --rules) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Expressions\": [ { \"Protocol\": \"http | https | tcp | udp | icmp | fragment | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Description\": \"description\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"22\", \"Action\": \"allow\", \"Description\": \"allow ssh\" }, { \"Protocol\": \"icmp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"udp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"fragment\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"ip\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"deny\", \"Description\": \"\" } ] } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string === Packet-Filter-specific options === --expressions string (aliases: --rules) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Expressions\": [ { \"Protocol\": \"http | https | tcp | udp | icmp | fragment | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Description\": \"description\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"22\", \"Action\": \"allow\", \"Description\": \"allow ssh\" }, { \"Protocol\": \"icmp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"udp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"fragment\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"ip\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"deny\", \"Description\": \"\" } ] } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"packet-filter"},{"location":"references/packet-filter/#packet-filter","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / packet-filter"},{"location":"references/packet-filter/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/packet-filter/#list","text":"","title":"list"},{"location":"references/packet-filter/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/packet-filter/#create","text":"","title":"create"},{"location":"references/packet-filter/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string === Packet-Filter-specific options === --expressions string (aliases: --rules) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/packet-filter/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Expressions\": [ { \"Protocol\": \"http | https | tcp | udp | icmp | fragment | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Description\": \"description\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"22\", \"Action\": \"allow\", \"Description\": \"allow ssh\" }, { \"Protocol\": \"icmp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"udp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"fragment\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"ip\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"deny\", \"Description\": \"\" } ] }","title":"Parameter Examples"},{"location":"references/packet-filter/#read","text":"","title":"read"},{"location":"references/packet-filter/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/packet-filter/#update","text":"","title":"update"},{"location":"references/packet-filter/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string === Packet-Filter-specific options === --expressions string (aliases: --rules) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/packet-filter/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Expressions\": [ { \"Protocol\": \"http | https | tcp | udp | icmp | fragment | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Description\": \"description\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"22\", \"Action\": \"allow\", \"Description\": \"allow ssh\" }, { \"Protocol\": \"icmp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"tcp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"udp\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"32768-61000\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"fragment\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"allow\", \"Description\": \"\" }, { \"Protocol\": \"ip\", \"SourceNetwork\": \"\", \"SourcePort\": \"\", \"DestinationPort\": \"\", \"Action\": \"deny\", \"Description\": \"\" } ] }","title":"Parameter Examples"},{"location":"references/packet-filter/#delete","text":"","title":"delete"},{"location":"references/packet-filter/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/private-host-plan/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / private-host-plan \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"private-host-plan"},{"location":"references/private-host-plan/#private-host-plan","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / private-host-plan"},{"location":"references/private-host-plan/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/private-host-plan/#list","text":"","title":"list"},{"location":"references/private-host-plan/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/private-host-plan/#read","text":"","title":"read"},{"location":"references/private-host-plan/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/private-host/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / private-host \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Private-Host-specific options === --class string (*required: --class or --plan-id) options: [dynamic/ms_windows] --plan-id int (*required: --class or --plan-id) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Class\": \"dynamic | ms_windows\" } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"private-host"},{"location":"references/private-host/#private-host","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / private-host"},{"location":"references/private-host/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/private-host/#list","text":"","title":"list"},{"location":"references/private-host/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/private-host/#create","text":"","title":"create"},{"location":"references/private-host/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Private-Host-specific options === --class string (*required: --class or --plan-id) options: [dynamic/ms_windows] --plan-id int (*required: --class or --plan-id) === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/private-host/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Class\": \"dynamic | ms_windows\" }","title":"Parameter Examples"},{"location":"references/private-host/#read","text":"","title":"read"},{"location":"references/private-host/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/private-host/#update","text":"","title":"update"},{"location":"references/private-host/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/private-host/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/private-host/#delete","text":"","title":"delete"},{"location":"references/private-host/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/profile/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb Usacloud\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6a5f\u80fd\u306fAPI\u30ad\u30fc\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58/\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002 Info \u4e00\u90e8\u306e\u9805\u76ee\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u8a2d\u5b9a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210 usacloud config \u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u65b0\u898f\u4f5c\u6210\u304c\u53ef\u80fd\u3067\u3059\u3002 # \u73fe\u5728\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6(\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fdefault\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210) $ usacloud config # \u307e\u305f\u306f\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210(example\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210) $ usacloud config create example \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306b\u6307\u5b9a\u53ef\u80fd\u306a\u5024 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306fJSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u8a2d\u5b9a\u53ef\u80fd\u306a\u9805\u76ee\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002 API\u30ad\u30fc\u95a2\u9023 AccessToken (string): \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3 AccessTokenSecret (string): \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8 Zones ([]string): \u5229\u7528\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u3001\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u308b libsacloud: types.ZoneNames Usacloud\u30b3\u30de\u30f3\u30c9\u52d5\u4f5c\u95a2\u9023 ArgumentMatchMode (string): \u64cd\u4f5c\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3067\u306e\u30ea\u30bd\u30fc\u30b9\u540d\u3068\u5f15\u6570\u306e\u6bd4\u8f03\u65b9\u6cd5(\u6709\u52b9\u306a\u5024: partial (\u90e8\u5206\u4e00\u81f4)/ exact (\u5b8c\u5168\u4e00\u81f4)) DefaultOutputType (string): \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30bf\u30a4\u30d7(\u6709\u52b9\u306a\u5024: table / json / yaml ) DefaultQueryDriver (string): \u5404\u30b3\u30de\u30f3\u30c9\u306e --query \u3092\u51e6\u7406\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c9\u30e9\u30a4\u30d0(\u6709\u52b9\u306a\u5024: jmespath / jq ) NoColor (bool): ANSI\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u3088\u308b\u8272\u3064\u3051\u3092\u7121\u52b9\u5316 ProcessTimeoutSec (int): \u30b3\u30de\u30f3\u30c9\u5168\u4f53\u306e\u5b9f\u884c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u307e\u3067\u306e\u79d2\u6570 API\u52d5\u4f5c\u95a2\u9023 AcceptLanguage (string): \u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306eAccept-Language\u30d8\u30c3\u30c0 RetryMax (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u56de\u6570 RetryWaitMin (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u9593\u9694(\u6700\u5c0f) (\u5358\u4f4d:\u79d2) RetryWaitMax (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u9593\u9694(\u6700\u5927) (\u5358\u4f4d:\u79d2) StatePollingTimeout (int): \u8d77\u52d5\u5f85\u3061\u306a\u3069\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8 (\u5358\u4f4d:\u79d2) StatePollingInterval (int): \u8d77\u52d5\u5f85\u3061\u306a\u3069\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694 (\u5358\u4f4d:\u79d2) HTTPRequestTimeout (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306eHTTP\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8 (\u5358\u4f4d:\u79d2) HTTPRequestRateLimit (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306e1\u79d2\u3042\u305f\u308a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u4e0a\u9650\u6570 APIRootURL (string): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u306e\u30eb\u30fc\u30c8URL DefaultZone (string): \u30b0\u30ed\u30fc\u30d0\u30eb\u30ea\u30bd\u30fc\u30b9API\u3092\u547c\u3076\u969b\u306b\u6307\u5b9a\u3059\u308b\u30be\u30fc\u30f3 \u30c7\u30d0\u30c3\u30b0\u95a2\u9023 TraceMode (string): \u7a7a\u3067\u306a\u3044\u5834\u5408\u306f\u6a19\u6e96\u30a8\u30e9\u30fc\u306bHTTP\u30c8\u30ec\u30fc\u30b9\u30ed\u30b0\u3092\u51fa\u529b FakeMode (bool): \u30d5\u30a7\u30a4\u30af\u30e2\u30fc\u30c9\u306e\u6709\u52b9\u5316 FakeStorePath (string): \u30d5\u30a7\u30a4\u30af\u30e2\u30fc\u30c9\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u30b9\u30c8\u30a2\u30d1\u30b9 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\u4f8b { \"APIRootURL\" : \"https://secure.sakura.ad.jp/cloud/zone\" , \"AcceptLanguage\" : \"en-US,en;q=0.9\" , \"AccessToken\" : \"<your-access-token>\" , \"AccessTokenSecret\" : \"<your-access-secret>\" , \"ArgumentMatchMode\" : \"exact\" , \"DefaultOutputType\" : \"table\" , \"DefaultQueryDriver\" : \"jq\" , \"DefaultZone\" : \"is1a\" , \"FakeMode\" : false , \"FakeStorePath\" : \"~/.usacloud/fake_store.json\" , \"HTTPRequestRateLimit\" : 5 , \"HTTPRequestTimeout\" : 300 , \"NoColor\" : false , \"ProcessTimeoutSec\" : 7200 , \"RetryMax\" : 0 , \"RetryWaitMax\" : 64 , \"RetryWaitMin\" : 1 , \"StatePollingInterval\" : 0 , \"StatePollingTimeout\" : 0 , \"TraceMode\" : \"HTTP\" , \"Zone\" : \"is1a\" , \"Zones\" : [ \"is1a\" , \"is1b\" , \"tk1a\" , \"tk1b\" , \"tk1v\" ] }","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb"},{"location":"references/profile/#_1","text":"Usacloud\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6a5f\u80fd\u306fAPI\u30ad\u30fc\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58/\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002 Info \u4e00\u90e8\u306e\u9805\u76ee\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u8a2d\u5b9a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb"},{"location":"references/profile/#_2","text":"usacloud config \u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u65b0\u898f\u4f5c\u6210\u304c\u53ef\u80fd\u3067\u3059\u3002 # \u73fe\u5728\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6(\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fdefault\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210) $ usacloud config # \u307e\u305f\u306f\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210(example\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210) $ usacloud config create example","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210"},{"location":"references/profile/#_3","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306fJSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u8a2d\u5b9a\u53ef\u80fd\u306a\u9805\u76ee\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306b\u6307\u5b9a\u53ef\u80fd\u306a\u5024"},{"location":"references/profile/#api","text":"AccessToken (string): \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3 AccessTokenSecret (string): \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8 Zones ([]string): \u5229\u7528\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u3001\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u308b libsacloud: types.ZoneNames","title":"API\u30ad\u30fc\u95a2\u9023"},{"location":"references/profile/#usacloud","text":"ArgumentMatchMode (string): \u64cd\u4f5c\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3067\u306e\u30ea\u30bd\u30fc\u30b9\u540d\u3068\u5f15\u6570\u306e\u6bd4\u8f03\u65b9\u6cd5(\u6709\u52b9\u306a\u5024: partial (\u90e8\u5206\u4e00\u81f4)/ exact (\u5b8c\u5168\u4e00\u81f4)) DefaultOutputType (string): \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30bf\u30a4\u30d7(\u6709\u52b9\u306a\u5024: table / json / yaml ) DefaultQueryDriver (string): \u5404\u30b3\u30de\u30f3\u30c9\u306e --query \u3092\u51e6\u7406\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c9\u30e9\u30a4\u30d0(\u6709\u52b9\u306a\u5024: jmespath / jq ) NoColor (bool): ANSI\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u3088\u308b\u8272\u3064\u3051\u3092\u7121\u52b9\u5316 ProcessTimeoutSec (int): \u30b3\u30de\u30f3\u30c9\u5168\u4f53\u306e\u5b9f\u884c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u307e\u3067\u306e\u79d2\u6570","title":"Usacloud\u30b3\u30de\u30f3\u30c9\u52d5\u4f5c\u95a2\u9023"},{"location":"references/profile/#api_1","text":"AcceptLanguage (string): \u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306eAccept-Language\u30d8\u30c3\u30c0 RetryMax (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u56de\u6570 RetryWaitMin (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u9593\u9694(\u6700\u5c0f) (\u5358\u4f4d:\u79d2) RetryWaitMax (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u9593\u9694(\u6700\u5927) (\u5358\u4f4d:\u79d2) StatePollingTimeout (int): \u8d77\u52d5\u5f85\u3061\u306a\u3069\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8 (\u5358\u4f4d:\u79d2) StatePollingInterval (int): \u8d77\u52d5\u5f85\u3061\u306a\u3069\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694 (\u5358\u4f4d:\u79d2) HTTPRequestTimeout (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306eHTTP\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8 (\u5358\u4f4d:\u79d2) HTTPRequestRateLimit (int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306e1\u79d2\u3042\u305f\u308a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u4e0a\u9650\u6570 APIRootURL (string): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u306e\u30eb\u30fc\u30c8URL DefaultZone (string): \u30b0\u30ed\u30fc\u30d0\u30eb\u30ea\u30bd\u30fc\u30b9API\u3092\u547c\u3076\u969b\u306b\u6307\u5b9a\u3059\u308b\u30be\u30fc\u30f3","title":"API\u52d5\u4f5c\u95a2\u9023"},{"location":"references/profile/#_4","text":"TraceMode (string): \u7a7a\u3067\u306a\u3044\u5834\u5408\u306f\u6a19\u6e96\u30a8\u30e9\u30fc\u306bHTTP\u30c8\u30ec\u30fc\u30b9\u30ed\u30b0\u3092\u51fa\u529b FakeMode (bool): \u30d5\u30a7\u30a4\u30af\u30e2\u30fc\u30c9\u306e\u6709\u52b9\u5316 FakeStorePath (string): \u30d5\u30a7\u30a4\u30af\u30e2\u30fc\u30c9\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u30b9\u30c8\u30a2\u30d1\u30b9","title":"\u30c7\u30d0\u30c3\u30b0\u95a2\u9023"},{"location":"references/profile/#_5","text":"{ \"APIRootURL\" : \"https://secure.sakura.ad.jp/cloud/zone\" , \"AcceptLanguage\" : \"en-US,en;q=0.9\" , \"AccessToken\" : \"<your-access-token>\" , \"AccessTokenSecret\" : \"<your-access-secret>\" , \"ArgumentMatchMode\" : \"exact\" , \"DefaultOutputType\" : \"table\" , \"DefaultQueryDriver\" : \"jq\" , \"DefaultZone\" : \"is1a\" , \"FakeMode\" : false , \"FakeStorePath\" : \"~/.usacloud/fake_store.json\" , \"HTTPRequestRateLimit\" : 5 , \"HTTPRequestTimeout\" : 300 , \"NoColor\" : false , \"ProcessTimeoutSec\" : 7200 , \"RetryMax\" : 0 , \"RetryWaitMax\" : 64 , \"RetryWaitMin\" : 1 , \"StatePollingInterval\" : 0 , \"StatePollingTimeout\" : 0 , \"TraceMode\" : \"HTTP\" , \"Zone\" : \"is1a\" , \"Zones\" : [ \"is1a\" , \"is1b\" , \"tk1a\" , \"tk1b\" , \"tk1v\" ] }","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\u4f8b"},{"location":"references/proxy-lb/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / proxy-lb \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Operation Commands health-status renew-lets-encrypt-cert Monitoring Commands monitor-connection list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Proxy-Lb-specific options === --bind-ports string --health-check-delay-loop int (*required) (default 10) --health-check-host string --health-check-path string (default \"/\") --health-check-protocol string (*required) (default \"http\") --inactive-sec int (default 10) --lets-encrypt-accept-tos The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/) --lets-encrypt-common-name string --lets-encrypt-enabled --plan string (*required) options: [100/500/1000/5000/10000/50000/100000] (default \"100\") --region string (*required) options: [tk1/is1/anycast] (default \"is1\") --rules string --servers string --sorry-server-ip-address string (aliases: --ipaddress) --sorry-server-port int --sticky-session-enabled --sticky-session-method string --vip-fail-over === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"100 | 500 | 1000 | 5000 | 10000 | 50000 | 100000\", \"HealthCheck\": { \"Protocol\": \"http | tcp\", \"Path\": \"/healthz\", \"Host\": \"www.example.com\", \"DelayLoop\": 10 }, \"SorryServer\": { \"IPAddress\": \"192.0.2.11\", \"Port\": 80 }, \"LetsEncrypt\": { \"CommonName\": \"www.example.com\", \"Enabled\": true, \"AcceptTOS\": false }, \"StickySession\": { \"Method\": \"cookie\", \"Enabled\": true }, \"Timeout\": { \"InactiveSec\": 10 }, \"UseVIPFailover\": true, \"Region\": \"tk1 | is1 | anycast\", \"BindPorts\": [ { \"ProxyMode\": \"http | https | tcp\", \"Port\": 80, \"RedirectToHTTPS\": true, \"SupportHTTP2\": true, \"AddResponseHeader\": [ { \"Header\": \"Cache-Control\", \"Value\": \"public, max-age=900\" } ] } ], \"Servers\": [ { \"IPAddress\": \"192.0.2.11\", \"Port\": 80, \"ServerGroup\": \"group1\", \"Enabled\": true } ], \"Rules\": [ { \"Host\": \"www2.example.com\", \"Path\": \"/foo\", \"ServerGroup\": \"group1\" } ] } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Proxy-Lb-specific options === --bind-ports string --health-check-delay-loop int --health-check-host string --health-check-path string --health-check-protocol string --inactive-sec int --lets-encrypt-accept-tos The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/) --lets-encrypt-common-name string --lets-encrypt-enabled --plan string options: [100/500/1000/5000/10000/50000/100000] --rules string --servers string --sorry-server-ip-address string (aliases: --ipaddress) --sorry-server-port int --sticky-session-enabled --sticky-session-method string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"100 | 500 | 1000 | 5000 | 10000 | 50000 | 100000\", \"HealthCheck\": { \"Protocol\": \"http | tcp\", \"Path\": \"/healthz\", \"Host\": \"www.example.com\", \"DelayLoop\": 10 }, \"SorryServer\": { \"IPAddress\": \"192.0.2.11\", \"Port\": 80 }, \"LetsEncrypt\": { \"CommonName\": \"www.example.com\", \"Enabled\": true, \"AcceptTOS\": false }, \"StickySession\": { \"Method\": \"cookie\", \"Enabled\": true }, \"Timeout\": { \"InactiveSec\": 10 }, \"BindPortsData\": null, \"BindPorts\": [ { \"ProxyMode\": \"http | https | tcp\", \"Port\": 80, \"RedirectToHTTPS\": true, \"SupportHTTP2\": true, \"AddResponseHeader\": [ { \"Header\": \"Cache-Control\", \"Value\": \"public, max-age=900\" } ] } ], \"ServersData\": null, \"Servers\": [ { \"IPAddress\": \"192.0.2.11\", \"Port\": 80, \"ServerGroup\": \"group1\", \"Enabled\": true } ], \"RulesData\": null, \"Rules\": [ { \"Host\": \"www2.example.com\", \"Path\": \"/foo\", \"ServerGroup\": \"group1\" } ] } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format health-status Usage Usage: health-status { ID | NAME | TAG }... [flags] Aliases: health-status, health Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format renew-lets-encrypt-cert Usage Usage: renew-lets-encrypt-cert { ID | NAME | TAG }... [flags] Flags: === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-connection Usage Usage: monitor-connection { ID | NAME | TAG }... [flags] Aliases: monitor-connection, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"proxy-lb"},{"location":"references/proxy-lb/#proxy-lb","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / proxy-lb"},{"location":"references/proxy-lb/#_1","text":"Basic Commands list create read update delete Operation Commands health-status renew-lets-encrypt-cert Monitoring Commands monitor-connection","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/proxy-lb/#list","text":"","title":"list"},{"location":"references/proxy-lb/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/proxy-lb/#create","text":"","title":"create"},{"location":"references/proxy-lb/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Proxy-Lb-specific options === --bind-ports string --health-check-delay-loop int (*required) (default 10) --health-check-host string --health-check-path string (default \"/\") --health-check-protocol string (*required) (default \"http\") --inactive-sec int (default 10) --lets-encrypt-accept-tos The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/) --lets-encrypt-common-name string --lets-encrypt-enabled --plan string (*required) options: [100/500/1000/5000/10000/50000/100000] (default \"100\") --region string (*required) options: [tk1/is1/anycast] (default \"is1\") --rules string --servers string --sorry-server-ip-address string (aliases: --ipaddress) --sorry-server-port int --sticky-session-enabled --sticky-session-method string --vip-fail-over === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/proxy-lb/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"100 | 500 | 1000 | 5000 | 10000 | 50000 | 100000\", \"HealthCheck\": { \"Protocol\": \"http | tcp\", \"Path\": \"/healthz\", \"Host\": \"www.example.com\", \"DelayLoop\": 10 }, \"SorryServer\": { \"IPAddress\": \"192.0.2.11\", \"Port\": 80 }, \"LetsEncrypt\": { \"CommonName\": \"www.example.com\", \"Enabled\": true, \"AcceptTOS\": false }, \"StickySession\": { \"Method\": \"cookie\", \"Enabled\": true }, \"Timeout\": { \"InactiveSec\": 10 }, \"UseVIPFailover\": true, \"Region\": \"tk1 | is1 | anycast\", \"BindPorts\": [ { \"ProxyMode\": \"http | https | tcp\", \"Port\": 80, \"RedirectToHTTPS\": true, \"SupportHTTP2\": true, \"AddResponseHeader\": [ { \"Header\": \"Cache-Control\", \"Value\": \"public, max-age=900\" } ] } ], \"Servers\": [ { \"IPAddress\": \"192.0.2.11\", \"Port\": 80, \"ServerGroup\": \"group1\", \"Enabled\": true } ], \"Rules\": [ { \"Host\": \"www2.example.com\", \"Path\": \"/foo\", \"ServerGroup\": \"group1\" } ] }","title":"Parameter Examples"},{"location":"references/proxy-lb/#read","text":"","title":"read"},{"location":"references/proxy-lb/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/proxy-lb/#update","text":"","title":"update"},{"location":"references/proxy-lb/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Proxy-Lb-specific options === --bind-ports string --health-check-delay-loop int --health-check-host string --health-check-path string --health-check-protocol string --inactive-sec int --lets-encrypt-accept-tos The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/) --lets-encrypt-common-name string --lets-encrypt-enabled --plan string options: [100/500/1000/5000/10000/50000/100000] --rules string --servers string --sorry-server-ip-address string (aliases: --ipaddress) --sorry-server-port int --sticky-session-enabled --sticky-session-method string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/proxy-lb/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"100 | 500 | 1000 | 5000 | 10000 | 50000 | 100000\", \"HealthCheck\": { \"Protocol\": \"http | tcp\", \"Path\": \"/healthz\", \"Host\": \"www.example.com\", \"DelayLoop\": 10 }, \"SorryServer\": { \"IPAddress\": \"192.0.2.11\", \"Port\": 80 }, \"LetsEncrypt\": { \"CommonName\": \"www.example.com\", \"Enabled\": true, \"AcceptTOS\": false }, \"StickySession\": { \"Method\": \"cookie\", \"Enabled\": true }, \"Timeout\": { \"InactiveSec\": 10 }, \"BindPortsData\": null, \"BindPorts\": [ { \"ProxyMode\": \"http | https | tcp\", \"Port\": 80, \"RedirectToHTTPS\": true, \"SupportHTTP2\": true, \"AddResponseHeader\": [ { \"Header\": \"Cache-Control\", \"Value\": \"public, max-age=900\" } ] } ], \"ServersData\": null, \"Servers\": [ { \"IPAddress\": \"192.0.2.11\", \"Port\": 80, \"ServerGroup\": \"group1\", \"Enabled\": true } ], \"RulesData\": null, \"Rules\": [ { \"Host\": \"www2.example.com\", \"Path\": \"/foo\", \"ServerGroup\": \"group1\" } ] }","title":"Parameter Examples"},{"location":"references/proxy-lb/#delete","text":"","title":"delete"},{"location":"references/proxy-lb/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/proxy-lb/#health-status","text":"","title":"health-status"},{"location":"references/proxy-lb/#usage_5","text":"Usage: health-status { ID | NAME | TAG }... [flags] Aliases: health-status, health Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/proxy-lb/#renew-lets-encrypt-cert","text":"","title":"renew-lets-encrypt-cert"},{"location":"references/proxy-lb/#usage_6","text":"Usage: renew-lets-encrypt-cert { ID | NAME | TAG }... [flags] Flags: === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/proxy-lb/#monitor-connection","text":"","title":"monitor-connection"},{"location":"references/proxy-lb/#usage_7","text":"Usage: monitor-connection { ID | NAME | TAG }... [flags] Aliases: monitor-connection, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/region/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / region \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"region"},{"location":"references/region/#region","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / region"},{"location":"references/region/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/region/#list","text":"","title":"list"},{"location":"references/region/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/region/#read","text":"","title":"read"},{"location":"references/region/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/rest/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / rest \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands request request Usage Usage: request [flags] Flags: === Rest-specific options === -d, --data string -X, --method string (*required) options: [get/post/put/delete/GET/POST/PUT/DELETE] (default \"get\") --zone string === Output options === --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq]","title":"rest"},{"location":"references/rest/#rest","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / rest"},{"location":"references/rest/#_1","text":"Basic Commands request","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/rest/#request","text":"","title":"request"},{"location":"references/rest/#usage","text":"Usage: request [flags] Flags: === Rest-specific options === -d, --data string -X, --method string (*required) options: [get/post/put/delete/GET/POST/PUT/DELETE] (default \"get\") --zone string === Output options === --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq]","title":"Usage"},{"location":"references/self/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / self \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands id id Usage Usage: id [flags] Flags: === Self-specific options === -n, --no-new-line","title":"self"},{"location":"references/self/#self","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / self"},{"location":"references/self/#_1","text":"Basic Commands id","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/self/#id","text":"","title":"id"},{"location":"references/self/#usage","text":"Usage: id [flags] Flags: === Self-specific options === -n, --no-new-line","title":"Usage"},{"location":"references/server-plan/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / server-plan \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"server-plan"},{"location":"references/server-plan/#server-plan","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / server-plan"},{"location":"references/server-plan/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/server-plan/#list","text":"","title":"list"},{"location":"references/server-plan/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server-plan/#read","text":"","title":"read"},{"location":"references/server-plan/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / server \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Connect Commands ssh vnc rdp Power Management Commands boot shutdown reset Monitoring Commands monitor-cpu Other Commands wait-until-ready wait-until-shutdown list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Aliases: create, build Flags: === Common options === --disk-name string --name string (*required) --description string --disk-description string --disk-tags strings --tags strings --disk-icon-id int --icon-id int === Plan options === --cpu int (*required) (aliases: --core) (default 1) --memory int (*required) (default 1) --commitment string (*required) options: [standard/dedicatedcpu] (default \"standard\") --generation string (*required) options: [default/g100/g200] (default \"default\") === Server-specific options === --boot-after-create --cdrom-id int (aliases: --iso-image-id) --interface-driver string (*required) options: [virtio/e1000] (default \"virtio\") --private-host-id int === Disk options === --disk-connection string options: [virtio/ide] --disk-disk-plan string options: [ssd/hdd] --disk-distant-from int --disk-id int --disk-no-wait --disk-os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] --disk-size int (aliases: --size-gb) --disk-source-archive-id int --disk-source-disk-id int --disk-ids int --disks string === Edit disk options === --disk-edit-host-name string --disk-edit-password string --disk-edit-ip-address string --disk-edit-netmask int (aliases: --network-mask-len) --disk-edit-gateway string (aliases: --default-route) --disk-edit-disable-pw-auth --disk-edit-enable-dhcp --disk-edit-change-partition-uuid --disk-edit-ssh-keys strings --disk-edit-ssh-key-ids int --disk-edit-make-ssh-keys-ephemeral --disk-edit-note-ids int --disk-edit-notes string --disk-edit-make-notes-ephemeral === Network options === --network-interface-packet-filter-id int --network-interface-upstream string options: [shared/disconnected/(switch-id)] --network-interface-user-ip-address string --network-interfaces string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"CPU\": 1, \"Memory\": 2, \"Commitment\": \"standard | dedicatedcpu\", \"Generation\": \"default | g100 | g200\", \"InterfaceDriver\": \"virtio | e1000\", \"BootAfterCreate\": true, \"CDROMID\": 123456789012, \"PrivateHostID\": 123456789012, \"NetworkInterfaces\": [ { \"Upstream\": \"shared | disconnected | (switch-id)\", \"PacketFilterID\": 123456789012, \"UserIPAddress\": \"192.0.2.11\" } ], \"Disks\": [ { \"Description\": \"\u65b0\u898f\u30c7\u30a3\u30b9\u30af\u3092\u4f5c\u6210\u3059\u308b\u4f8b\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskPlan\": \"ssd | hdd\", \"Connection\": \"virtio | ide\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"SizeGB\": 20, \"DistantFrom\": [ 123456789012 ], \"OSType\": \"centos | centos8stream | centos8 | centos7 | ubuntu | ubuntu2004 | ubuntu1804 | ubuntu1604 | debian | debian10 | debian9 | coreos | rancheros | k3os | kusanagi | freebsd | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\", \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": true }, { \"ID\": 123456789012, \"Description\": \"\u65e2\u5b58\u306e\u30c7\u30a3\u30b9\u30af\u3092\u63a5\u7d9a\u3059\u308b\u4f8b\", \"EditDisk\": {}, \"NoWait\": false } ], \"NoWait\": false } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Plan options === --cpu int (aliases: --core) --memory int --commitment string options: [standard/dedicatedcpu] --generation string options: [default/g100/g200] === Server-specific options === --cdrom-id int (aliases: --iso-image-id) --disks string --force-shutdown --interface-driver string options: [interface_dirver] --network-interfaces string --private-host-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"CPU\": 1, \"Memory\": 2, \"Commitment\": \"standard | dedicatedcpu\", \"Generation\": \"default | g100 | g200\", \"InterfaceDriver\": \"virtio | e1000\", \"CDROMID\": 123456789012, \"PrivateHostID\": 123456789012, \"NetworkInterfaces\": [ { \"Upstream\": \"shared | disconnected | (switch-id)\", \"PacketFilterID\": 123456789012, \"UserIPAddress\": \"192.0.2.11\" } ], \"Disks\": [ { \"Description\": \"\u65b0\u898f\u30c7\u30a3\u30b9\u30af\u3092\u4f5c\u6210\u3059\u308b\u4f8b\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskPlan\": \"ssd | hdd\", \"Connection\": \"virtio | ide\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"SizeGB\": 20, \"DistantFrom\": [ 123456789012 ], \"OSType\": \"centos | centos8stream | centos8 | centos7 | ubuntu | ubuntu2004 | ubuntu1804 | ubuntu1604 | debian | debian10 | debian9 | coreos | rancheros | k3os | kusanagi | freebsd | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\", \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": true }, { \"ID\": 123456789012, \"Description\": \"\u65e2\u5b58\u306e\u30c7\u30a3\u30b9\u30af\u3092\u63a5\u7d9a\u3059\u308b\u4f8b\", \"EditDisk\": {}, \"NoWait\": false } ], \"NoWait\": false, \"ForceShutdown\": false } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force --with-disks === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format ssh Usage Usage: ssh { ID | NAME | TAG } [flags] Flags: === Server-specific options === -i, --key string --password string (aliases: --pass-phrase) -p, --port int (*required) (default 22) -l, --user string --wait-until-ready (aliases: --wait) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format vnc Usage Usage: vnc { ID | NAME | TAG } [flags] Flags: === Server-specific options === --wait-until-ready (aliases: --wait) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format rdp Usage Usage: rdp { ID | NAME | TAG } [flags] Aliases: rdp, remote-desktop Flags: === Server-specific options === --port int (default 3389) --user string (default \"Administrator\") --wait-until-ready (aliases: --wait) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format boot Usage Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format shutdown Usage Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Server-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format reset Usage Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-cpu Usage Usage: monitor-cpu { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format wait-until-shutdown Usage Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"server"},{"location":"references/server/#server","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / server"},{"location":"references/server/#_1","text":"Basic Commands list create read update delete Connect Commands ssh vnc rdp Power Management Commands boot shutdown reset Monitoring Commands monitor-cpu Other Commands wait-until-ready wait-until-shutdown","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/server/#list","text":"","title":"list"},{"location":"references/server/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#create","text":"","title":"create"},{"location":"references/server/#usage_1","text":"Usage: create [flags] Aliases: create, build Flags: === Common options === --disk-name string --name string (*required) --description string --disk-description string --disk-tags strings --tags strings --disk-icon-id int --icon-id int === Plan options === --cpu int (*required) (aliases: --core) (default 1) --memory int (*required) (default 1) --commitment string (*required) options: [standard/dedicatedcpu] (default \"standard\") --generation string (*required) options: [default/g100/g200] (default \"default\") === Server-specific options === --boot-after-create --cdrom-id int (aliases: --iso-image-id) --interface-driver string (*required) options: [virtio/e1000] (default \"virtio\") --private-host-id int === Disk options === --disk-connection string options: [virtio/ide] --disk-disk-plan string options: [ssd/hdd] --disk-distant-from int --disk-id int --disk-no-wait --disk-os-type string options: [centos/centos8stream/centos8/ubuntu/ubuntu2004/debian/debian10/coreos/rancheros/k3os/freebsd/...] --disk-size int (aliases: --size-gb) --disk-source-archive-id int --disk-source-disk-id int --disk-ids int --disks string === Edit disk options === --disk-edit-host-name string --disk-edit-password string --disk-edit-ip-address string --disk-edit-netmask int (aliases: --network-mask-len) --disk-edit-gateway string (aliases: --default-route) --disk-edit-disable-pw-auth --disk-edit-enable-dhcp --disk-edit-change-partition-uuid --disk-edit-ssh-keys strings --disk-edit-ssh-key-ids int --disk-edit-make-ssh-keys-ephemeral --disk-edit-note-ids int --disk-edit-notes string --disk-edit-make-notes-ephemeral === Network options === --network-interface-packet-filter-id int --network-interface-upstream string options: [shared/disconnected/(switch-id)] --network-interface-user-ip-address string --network-interfaces string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"CPU\": 1, \"Memory\": 2, \"Commitment\": \"standard | dedicatedcpu\", \"Generation\": \"default | g100 | g200\", \"InterfaceDriver\": \"virtio | e1000\", \"BootAfterCreate\": true, \"CDROMID\": 123456789012, \"PrivateHostID\": 123456789012, \"NetworkInterfaces\": [ { \"Upstream\": \"shared | disconnected | (switch-id)\", \"PacketFilterID\": 123456789012, \"UserIPAddress\": \"192.0.2.11\" } ], \"Disks\": [ { \"Description\": \"\u65b0\u898f\u30c7\u30a3\u30b9\u30af\u3092\u4f5c\u6210\u3059\u308b\u4f8b\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskPlan\": \"ssd | hdd\", \"Connection\": \"virtio | ide\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"SizeGB\": 20, \"DistantFrom\": [ 123456789012 ], \"OSType\": \"centos | centos8stream | centos8 | centos7 | ubuntu | ubuntu2004 | ubuntu1804 | ubuntu1604 | debian | debian10 | debian9 | coreos | rancheros | k3os | kusanagi | freebsd | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\", \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": true }, { \"ID\": 123456789012, \"Description\": \"\u65e2\u5b58\u306e\u30c7\u30a3\u30b9\u30af\u3092\u63a5\u7d9a\u3059\u308b\u4f8b\", \"EditDisk\": {}, \"NoWait\": false } ], \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/server/#read","text":"","title":"read"},{"location":"references/server/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#update","text":"","title":"update"},{"location":"references/server/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Plan options === --cpu int (aliases: --core) --memory int --commitment string options: [standard/dedicatedcpu] --generation string options: [default/g100/g200] === Server-specific options === --cdrom-id int (aliases: --iso-image-id) --disks string --force-shutdown --interface-driver string options: [interface_dirver] --network-interfaces string --private-host-id int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"CPU\": 1, \"Memory\": 2, \"Commitment\": \"standard | dedicatedcpu\", \"Generation\": \"default | g100 | g200\", \"InterfaceDriver\": \"virtio | e1000\", \"CDROMID\": 123456789012, \"PrivateHostID\": 123456789012, \"NetworkInterfaces\": [ { \"Upstream\": \"shared | disconnected | (switch-id)\", \"PacketFilterID\": 123456789012, \"UserIPAddress\": \"192.0.2.11\" } ], \"Disks\": [ { \"Description\": \"\u65b0\u898f\u30c7\u30a3\u30b9\u30af\u3092\u4f5c\u6210\u3059\u308b\u4f8b\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DiskPlan\": \"ssd | hdd\", \"Connection\": \"virtio | ide\", \"SourceDiskID\": 123456789012, \"SourceArchiveID\": 123456789012, \"SizeGB\": 20, \"DistantFrom\": [ 123456789012 ], \"OSType\": \"centos | centos8stream | centos8 | centos7 | ubuntu | ubuntu2004 | ubuntu1804 | ubuntu1604 | debian | debian10 | debian9 | coreos | rancheros | k3os | kusanagi | freebsd | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\", \"EditDisk\": { \"HostName\": \"hostname\", \"Password\": \"password\", \"IPAddress\": \"192.0.2.11\", \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\", \"DisablePWAuth\": true, \"EnableDHCP\": true, \"ChangePartitionUUID\": true, \"SSHKeys\": [ \"/path/to/your/public/key\", \"ssh-rsa ...\" ], \"SSHKeyIDs\": [ 123456789012 ], \"IsSSHKeysEphemeral\": true, \"NoteIDs\": [ 123456789012 ], \"IsNotesEphemeral\": true, \"Notes\": [ { \"ID\": 123456789012, \"Variables\": { \"variable1\": \"foo\", \"variable2\": \"bar\" } } ] }, \"NoWait\": true }, { \"ID\": 123456789012, \"Description\": \"\u65e2\u5b58\u306e\u30c7\u30a3\u30b9\u30af\u3092\u63a5\u7d9a\u3059\u308b\u4f8b\", \"EditDisk\": {}, \"NoWait\": false } ], \"NoWait\": false, \"ForceShutdown\": false }","title":"Parameter Examples"},{"location":"references/server/#delete","text":"","title":"delete"},{"location":"references/server/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force --with-disks === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#ssh","text":"","title":"ssh"},{"location":"references/server/#usage_5","text":"Usage: ssh { ID | NAME | TAG } [flags] Flags: === Server-specific options === -i, --key string --password string (aliases: --pass-phrase) -p, --port int (*required) (default 22) -l, --user string --wait-until-ready (aliases: --wait) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#vnc","text":"","title":"vnc"},{"location":"references/server/#usage_6","text":"Usage: vnc { ID | NAME | TAG } [flags] Flags: === Server-specific options === --wait-until-ready (aliases: --wait) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#rdp","text":"","title":"rdp"},{"location":"references/server/#usage_7","text":"Usage: rdp { ID | NAME | TAG } [flags] Aliases: rdp, remote-desktop Flags: === Server-specific options === --port int (default 3389) --user string (default \"Administrator\") --wait-until-ready (aliases: --wait) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#boot","text":"","title":"boot"},{"location":"references/server/#usage_8","text":"Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#shutdown","text":"","title":"shutdown"},{"location":"references/server/#usage_9","text":"Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Server-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#reset","text":"","title":"reset"},{"location":"references/server/#usage_10","text":"Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#monitor-cpu","text":"","title":"monitor-cpu"},{"location":"references/server/#usage_11","text":"Usage: monitor-cpu { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/server/#usage_12","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/server/#wait-until-shutdown","text":"","title":"wait-until-shutdown"},{"location":"references/server/#usage_13","text":"Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/service-class/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / service-class \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"service-class"},{"location":"references/service-class/#service-class","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / service-class"},{"location":"references/service-class/#_1","text":"Basic Commands list","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/service-class/#list","text":"","title":"list"},{"location":"references/service-class/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / sim \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Operation Commands activate deactivate Monitoring Commands monitor-sim logs list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Sim-specific options === --iccid string (*required) --passcode string (*required) (aliases: --pass-code) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"ICCID\": \"your-iccid\", \"PassCode\": \"your-passcode\" } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format activate Usage Usage: activate { ID | NAME | TAG }... [flags] Flags: === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format deactivate Usage Usage: deactivate { ID | NAME | TAG }... [flags] Flags: === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-sim Usage Usage: monitor-sim { ID | NAME | TAG }... [flags] Aliases: monitor-sim, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format logs Usage Usage: logs { ID | NAME | TAG }... [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"sim"},{"location":"references/sim/#sim","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / sim"},{"location":"references/sim/#_1","text":"Basic Commands list create read update delete Operation Commands activate deactivate Monitoring Commands monitor-sim logs","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/sim/#list","text":"","title":"list"},{"location":"references/sim/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#create","text":"","title":"create"},{"location":"references/sim/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Sim-specific options === --iccid string (*required) --passcode string (*required) (aliases: --pass-code) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"ICCID\": \"your-iccid\", \"PassCode\": \"your-passcode\" }","title":"Parameter Examples"},{"location":"references/sim/#read","text":"","title":"read"},{"location":"references/sim/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#update","text":"","title":"update"},{"location":"references/sim/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/sim/#delete","text":"","title":"delete"},{"location":"references/sim/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#activate","text":"","title":"activate"},{"location":"references/sim/#usage_5","text":"Usage: activate { ID | NAME | TAG }... [flags] Flags: === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#deactivate","text":"","title":"deactivate"},{"location":"references/sim/#usage_6","text":"Usage: deactivate { ID | NAME | TAG }... [flags] Flags: === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#monitor-sim","text":"","title":"monitor-sim"},{"location":"references/sim/#usage_7","text":"Usage: monitor-sim { ID | NAME | TAG }... [flags] Aliases: monitor-sim, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/sim/#logs","text":"","title":"logs"},{"location":"references/sim/#usage_8","text":"Usage: logs { ID | NAME | TAG }... [flags] Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/simple-monitor/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / simple-monitor \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete Monitoring Commands health monitor-response-time list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --description string --tags strings --icon-id int === Simple-Monitor-specific options === --delay-loop int (default 60) --enabled (default true) --health-check-basic-auth-password string --health-check-basic-auth-username string --health-check-community string --health-check-expected-data string --health-check-host string --health-check-oid string --health-check-path string --health-check-port int --health-check-protocol string (*required) options: [http/https/ping/tcp/dns/ssh/smtp/pop3/snmp/sslcertificate] --health-check-q-name string --health-check-remaining-days int --health-check-sni --health-check-snmp-version string --health-check-status int --notify-email-enabled --notify-email-html --notify-interval int (default 7200) --notify-slack-enabled --slack-webhooks-url string --target string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Target\": \"www.example.com\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DelayLoop\": 60, \"Enabled\": true, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp | dns | ssh | smtp | pop3 | snmp | sslcertificate\", \"Port\": 80, \"Path\": \"/healthz\", \"Status\": 200, \"SNI\": true, \"Host\": \"www2.example.com\", \"BasicAuthUsername\": \"username\", \"BasicAuthPassword\": \"password\" }, \"NotifyEmailEnabled\": true, \"NotifyEmailHTML\": true, \"NotifySlackEnabled\": true, \"SlackWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"NotifyInterval\": 7200 } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --description string --tags strings --icon-id int === Simple-Monitor-specific options === --delay-loop int --enabled --health-check-basic-auth-password string --health-check-basic-auth-username string --health-check-community string --health-check-expected-data string --health-check-host string --health-check-oid string --health-check-path string --health-check-port int --health-check-protocol string options: [http/https/ping/tcp/dns/ssh/smtp/pop3/snmp/sslcertificate] --health-check-q-name string --health-check-remaining-days int --health-check-sni --health-check-snmp-version string --health-check-status int --notify-email-enabled --notify-email-html --notify-interval int --notify-slack-enabled --slack-webhooks-url string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DelayLoop\": 60, \"Enabled\": true, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp | dns | ssh | smtp | pop3 | snmp | sslcertificate\", \"Port\": 80, \"Path\": \"/healthz\", \"Status\": 200, \"SNI\": true, \"Host\": \"www2.example.com\", \"BasicAuthUsername\": \"username\", \"BasicAuthPassword\": \"password\" }, \"NotifyEmailEnabled\": true, \"NotifyEmailHTML\": true, \"NotifySlackEnabled\": true, \"SlackWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"NotifyInterval\": 7200 } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format health Usage Usage: health { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format monitor-response-time Usage Usage: monitor-response-time { ID | NAME | TAG }... [flags] Aliases: monitor-response-time, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"simple-monitor"},{"location":"references/simple-monitor/#simple-monitor","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / simple-monitor"},{"location":"references/simple-monitor/#_1","text":"Basic Commands list create read update delete Monitoring Commands health monitor-response-time","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/simple-monitor/#list","text":"","title":"list"},{"location":"references/simple-monitor/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/simple-monitor/#create","text":"","title":"create"},{"location":"references/simple-monitor/#usage_1","text":"Usage: create [flags] Flags: === Common options === --description string --tags strings --icon-id int === Simple-Monitor-specific options === --delay-loop int (default 60) --enabled (default true) --health-check-basic-auth-password string --health-check-basic-auth-username string --health-check-community string --health-check-expected-data string --health-check-host string --health-check-oid string --health-check-path string --health-check-port int --health-check-protocol string (*required) options: [http/https/ping/tcp/dns/ssh/smtp/pop3/snmp/sslcertificate] --health-check-q-name string --health-check-remaining-days int --health-check-sni --health-check-snmp-version string --health-check-status int --notify-email-enabled --notify-email-html --notify-interval int (default 7200) --notify-slack-enabled --slack-webhooks-url string --target string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/simple-monitor/#parameter-examples","text":"{ \"Target\": \"www.example.com\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DelayLoop\": 60, \"Enabled\": true, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp | dns | ssh | smtp | pop3 | snmp | sslcertificate\", \"Port\": 80, \"Path\": \"/healthz\", \"Status\": 200, \"SNI\": true, \"Host\": \"www2.example.com\", \"BasicAuthUsername\": \"username\", \"BasicAuthPassword\": \"password\" }, \"NotifyEmailEnabled\": true, \"NotifyEmailHTML\": true, \"NotifySlackEnabled\": true, \"SlackWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"NotifyInterval\": 7200 }","title":"Parameter Examples"},{"location":"references/simple-monitor/#read","text":"","title":"read"},{"location":"references/simple-monitor/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/simple-monitor/#update","text":"","title":"update"},{"location":"references/simple-monitor/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --description string --tags strings --icon-id int === Simple-Monitor-specific options === --delay-loop int --enabled --health-check-basic-auth-password string --health-check-basic-auth-username string --health-check-community string --health-check-expected-data string --health-check-host string --health-check-oid string --health-check-path string --health-check-port int --health-check-protocol string options: [http/https/ping/tcp/dns/ssh/smtp/pop3/snmp/sslcertificate] --health-check-q-name string --health-check-remaining-days int --health-check-sni --health-check-snmp-version string --health-check-status int --notify-email-enabled --notify-email-html --notify-interval int --notify-slack-enabled --slack-webhooks-url string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/simple-monitor/#parameter-examples_1","text":"{ \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"DelayLoop\": 60, \"Enabled\": true, \"HealthCheck\": { \"Protocol\": \"http | https | ping | tcp | dns | ssh | smtp | pop3 | snmp | sslcertificate\", \"Port\": 80, \"Path\": \"/healthz\", \"Status\": 200, \"SNI\": true, \"Host\": \"www2.example.com\", \"BasicAuthUsername\": \"username\", \"BasicAuthPassword\": \"password\" }, \"NotifyEmailEnabled\": true, \"NotifyEmailHTML\": true, \"NotifySlackEnabled\": true, \"SlackWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\", \"NotifyInterval\": 7200 }","title":"Parameter Examples"},{"location":"references/simple-monitor/#delete","text":"","title":"delete"},{"location":"references/simple-monitor/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/simple-monitor/#health","text":"","title":"health"},{"location":"references/simple-monitor/#usage_5","text":"Usage: health { ID | NAME | TAG }... [flags] Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/simple-monitor/#monitor-response-time","text":"","title":"monitor-response-time"},{"location":"references/simple-monitor/#usage_6","text":"Usage: monitor-response-time { ID | NAME | TAG }... [flags] Aliases: monitor-response-time, monitor Flags: === Monitor options === --end string --start string === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ssh-key/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ssh-key \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create generate read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string === Ssh-Key-specific options === --public-key string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\", \"PublicKey\": \"/path/to/your/public/key | ssh-rsa ...\" } generate Usage Usage: generate [flags] Flags: === Common options === --name string (*required) --description string === Ssh-Key-specific options === --pass-phrase string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Name\": \"example\", \"Description\": \"example\" } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"ssh-key"},{"location":"references/ssh-key/#ssh-key","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ssh-key"},{"location":"references/ssh-key/#_1","text":"Basic Commands list create generate read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/ssh-key/#list","text":"","title":"list"},{"location":"references/ssh-key/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ssh-key/#create","text":"","title":"create"},{"location":"references/ssh-key/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string === Ssh-Key-specific options === --public-key string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ssh-key/#parameter-examples","text":"{ \"Name\": \"example\", \"Description\": \"example\", \"PublicKey\": \"/path/to/your/public/key | ssh-rsa ...\" }","title":"Parameter Examples"},{"location":"references/ssh-key/#generate","text":"","title":"generate"},{"location":"references/ssh-key/#usage_2","text":"Usage: generate [flags] Flags: === Common options === --name string (*required) --description string === Ssh-Key-specific options === --pass-phrase string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ssh-key/#read","text":"","title":"read"},{"location":"references/ssh-key/#usage_3","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ssh-key/#update","text":"","title":"update"},{"location":"references/ssh-key/#usage_4","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/ssh-key/#parameter-examples_1","text":"{ \"Name\": \"example\", \"Description\": \"example\" }","title":"Parameter Examples"},{"location":"references/ssh-key/#delete","text":"","title":"delete"},{"location":"references/ssh-key/#usage_5","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/subnet/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / subnet \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"subnet"},{"location":"references/subnet/#subnet","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / subnet"},{"location":"references/subnet/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/subnet/#list","text":"","title":"list"},{"location":"references/subnet/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/subnet/#read","text":"","title":"read"},{"location":"references/subnet/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/switch/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / switch \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create read update delete list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Switch-specific options === --display-gateway string (aliases: --display-default-route) --display-network-mask-len int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\" } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"switch"},{"location":"references/switch/#switch","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / switch"},{"location":"references/switch/#_1","text":"Basic Commands list create read update delete","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/switch/#list","text":"","title":"list"},{"location":"references/switch/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/switch/#create","text":"","title":"create"},{"location":"references/switch/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/switch/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012 }","title":"Parameter Examples"},{"location":"references/switch/#read","text":"","title":"read"},{"location":"references/switch/#usage_2","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/switch/#update","text":"","title":"update"},{"location":"references/switch/#usage_3","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Switch-specific options === --display-gateway string (aliases: --display-default-route) --display-network-mask-len int === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/switch/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"NetworkMaskLen\": 24, \"DefaultRoute\": \"192.0.2.1\" }","title":"Parameter Examples"},{"location":"references/switch/#delete","text":"","title":"delete"},{"location":"references/switch/#usage_4","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Wait options === --wait-for-release --wait-for-release-timeout int --wait-for-release-tick int === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/update-self/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / update-self GitHub API\u3067\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3001\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u305f\u3089Usacloud\u81ea\u8eab\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002 Update Usacloud to latest-stable version Usage: usacloud update-self Flags: -h, --help help for update-self Info update-self \u30b3\u30de\u30f3\u30c9\u304cGitHub API\u3092\u547c\u3076\u969b\u3001\u74b0\u5883\u5909\u6570 GITHUB_TOKEN \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3001\u307e\u305f\u306f gitconfig \u306e github.token \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3089\u3092\u5229\u7528\u3057\u307e\u3059\u3002","title":"update-self"},{"location":"references/update-self/#update-self","text":"GitHub API\u3067\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3001\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u305f\u3089Usacloud\u81ea\u8eab\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002 Update Usacloud to latest-stable version Usage: usacloud update-self Flags: -h, --help help for update-self Info update-self \u30b3\u30de\u30f3\u30c9\u304cGitHub API\u3092\u547c\u3076\u969b\u3001\u74b0\u5883\u5909\u6570 GITHUB_TOKEN \u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3001\u307e\u305f\u306f gitconfig \u306e github.token \u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3089\u3092\u5229\u7528\u3057\u307e\u3059\u3002","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / update-self"},{"location":"references/vpc-router/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / vpc-router \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list create create-standard read update update-standard delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface Other Commands wait-until-ready wait-until-shutdown list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create Usage Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --plan string (*required) options: [premium/highspec/highspec4000] (default \"premium\") === Vpc-Router-specific options === --boot-after-create --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string --version int (*required) (default 2) --vrid int === Network options === --public-network-interface-ip-addresses strings --public-network-interface-ip-aliases strings --public-network-interface-switch-id int --public-network-interface-virtual-ip-address string --private-network-interfaces string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"premium | highspec | highspec4000\", \"Version\": 2, \"PublicNetworkInterface\": { \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"VirtualIPAddress\": \"192.0.2.101\", \"IPAliases\": [ \"192.0.2.102\" ] }, \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.168.0.11\", \"192.168.0.12\" ], \"VirtualIPAddress\": \"192.168.0.1\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"VRID\": 1, \"InternetConnectionEnabled\": true, \"StaticNAT\": [ { \"GlobalAddress\": \"192.0.2.101\", \"PrivateAddress\": \"192.168.0.1\", \"Description\": \"example\" } ], \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"BootAfterCreate\": true, \"NoWait\": false } create-standard Usage Usage: create-standard [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Vpc-Router-specific options === --boot-after-create --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --private-network-interfaces string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string --version int (*required) (default 2) --vrid int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Version\": 2, \"PrivateNetworkInterfacesData\": \"\", \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddress\": \"192.168.0.11\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"InternetConnectionEnabled\": true, \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"BootAfterCreate\": true, \"NoWait\": false } read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format update Usage Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Vpc-Router-specific options === --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string === Network options === --public-network-interface-ip-addresses strings --public-network-interface-ip-aliases strings --public-network-interface-virtual-ip-address string --private-network-interfaces string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PublicNetworkInterface\": { \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"VirtualIPAddress\": \"192.0.2.101\", \"IPAliases\": [ \"192.0.2.102\" ] }, \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.168.0.11\", \"192.168.0.12\" ], \"VirtualIPAddress\": \"192.168.0.1\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"InternetConnectionEnabled\": true, \"StaticNATData\": \"\", \"StaticNAT\": [ { \"GlobalAddress\": \"192.0.2.101\", \"PrivateAddress\": \"192.168.0.1\", \"Description\": \"example\" } ], \"PortForwardingData\": \"\", \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"FirewallData\": \"\", \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServerData\": \"\", \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMappingData\": \"\", \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsersData\": \"\", \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPNData\": \"\", \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRouteData\": \"\", \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"NoWait\": false } update-standard Usage Usage: update-standard { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Vpc-Router-specific options === --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --private-network-interfaces string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddress\": \"192.168.0.11\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"InternetConnectionEnabled\": true, \"StaticNATData\": \"\", \"StaticNAT\": null, \"PortForwardingData\": \"\", \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"FirewallData\": \"\", \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServerData\": \"\", \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMappingData\": \"\", \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsersData\": \"\", \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPNData\": \"\", \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRouteData\": \"\", \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"NoWait\": false } delete Usage Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format boot Usage Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format shutdown Usage Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Vpc-Router-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format reset Usage Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format monitor-interface Usage Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Vpc-Router-specific options === --index int === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format wait-until-ready Usage Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format wait-until-shutdown Usage Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"vpc-router"},{"location":"references/vpc-router/#vpc-router","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / vpc-router"},{"location":"references/vpc-router/#_1","text":"Basic Commands list create create-standard read update update-standard delete Power Management Commands boot shutdown reset Monitoring Commands monitor-interface Other Commands wait-until-ready wait-until-shutdown","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/vpc-router/#list","text":"","title":"list"},{"location":"references/vpc-router/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings --tags strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#create","text":"","title":"create"},{"location":"references/vpc-router/#usage_1","text":"Usage: create [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Plan options === --plan string (*required) options: [premium/highspec/highspec4000] (default \"premium\") === Vpc-Router-specific options === --boot-after-create --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string --version int (*required) (default 2) --vrid int === Network options === --public-network-interface-ip-addresses strings --public-network-interface-ip-aliases strings --public-network-interface-switch-id int --public-network-interface-virtual-ip-address string --private-network-interfaces string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#parameter-examples","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Plan\": \"premium | highspec | highspec4000\", \"Version\": 2, \"PublicNetworkInterface\": { \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"VirtualIPAddress\": \"192.0.2.101\", \"IPAliases\": [ \"192.0.2.102\" ] }, \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.168.0.11\", \"192.168.0.12\" ], \"VirtualIPAddress\": \"192.168.0.1\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"VRID\": 1, \"InternetConnectionEnabled\": true, \"StaticNAT\": [ { \"GlobalAddress\": \"192.0.2.101\", \"PrivateAddress\": \"192.168.0.1\", \"Description\": \"example\" } ], \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"BootAfterCreate\": true, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/vpc-router/#create-standard","text":"","title":"create-standard"},{"location":"references/vpc-router/#usage_2","text":"Usage: create-standard [flags] Flags: === Common options === --name string (*required) --description string --tags strings --icon-id int === Vpc-Router-specific options === --boot-after-create --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --private-network-interfaces string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string --version int (*required) (default 2) --vrid int === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#parameter-examples_1","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"Version\": 2, \"PrivateNetworkInterfacesData\": \"\", \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddress\": \"192.168.0.11\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"InternetConnectionEnabled\": true, \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"BootAfterCreate\": true, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/vpc-router/#read","text":"","title":"read"},{"location":"references/vpc-router/#usage_3","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#update","text":"","title":"update"},{"location":"references/vpc-router/#usage_4","text":"Usage: update { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Vpc-Router-specific options === --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string === Network options === --public-network-interface-ip-addresses strings --public-network-interface-ip-aliases strings --public-network-interface-virtual-ip-address string --private-network-interfaces string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#parameter-examples_2","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PublicNetworkInterface\": { \"IPAddresses\": [ \"192.0.2.21\", \"192.0.2.22\" ], \"VirtualIPAddress\": \"192.0.2.101\", \"IPAliases\": [ \"192.0.2.102\" ] }, \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddresses\": [ \"192.168.0.11\", \"192.168.0.12\" ], \"VirtualIPAddress\": \"192.168.0.1\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"InternetConnectionEnabled\": true, \"StaticNATData\": \"\", \"StaticNAT\": [ { \"GlobalAddress\": \"192.0.2.101\", \"PrivateAddress\": \"192.168.0.1\", \"Description\": \"example\" } ], \"PortForwardingData\": \"\", \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"FirewallData\": \"\", \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServerData\": \"\", \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMappingData\": \"\", \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsersData\": \"\", \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPNData\": \"\", \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRouteData\": \"\", \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/vpc-router/#update-standard","text":"","title":"update-standard"},{"location":"references/vpc-router/#usage_5","text":"Usage: update-standard { ID | NAME | TAG }... [flags] Flags: === Common options === --name string --description string --tags strings --icon-id int === Vpc-Router-specific options === --dhcp-server string --dhcp-static-mapping string --firewall string --internet-connection-enabled --l2tp-pre-shared-secret string --l2tp-range-start string --l2tp-range-stop string --port-forwarding string --pptp-range-start string --pptp-range-stop string --private-network-interfaces string --site-to-site-vpn string --static-nat string --static-route string --syslog-host string --users string === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#parameter-examples_3","text":"{ \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\", \"Name\": \"example\", \"Description\": \"example\", \"Tags\": [ \"tag1=example1\", \"tag2=example2\" ], \"IconID\": 123456789012, \"PrivateNetworkInterfaces\": [ { \"SwitchID\": 123456789012, \"IPAddress\": \"192.168.0.11\", \"NetworkMaskLen\": 24, \"Index\": 1 } ], \"RouterSetting\": { \"InternetConnectionEnabled\": true, \"StaticNATData\": \"\", \"StaticNAT\": null, \"PortForwardingData\": \"\", \"PortForwarding\": [ { \"Protocol\": \"tcp | udp\", \"GlobalPort\": \"22\", \"PrivateAddress\": \"192.168.0.11\", \"PrivatePort\": \"22\", \"Description\": \"example\" } ], \"FirewallData\": \"\", \"Firewall\": [ { \"Send\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Receive\": [ { \"Protocol\": \"tcp | udp | icmp | ip\", \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"SourcePort\": \"1024 | 1024-2048\", \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\", \"DestinationPort\": \"1024 | 1024-2048\", \"Action\": \"allow | deny\", \"Logging\": \"True\", \"Description\": \"example\" } ], \"Index\": 0 } ], \"DHCPServerData\": \"\", \"DHCPServer\": [ { \"Interface\": \"eth1\", \"RangeStart\": \"192.168.0.240\", \"RangeStop\": \"192.168.0.244\", \"DNSServers\": [ \"133.242.0.3\", \"133.242.0.4\" ] } ], \"DHCPStaticMappingData\": \"\", \"DHCPStaticMapping\": [ { \"MACAddress\": \"9C:A3:BA:xx:xx:xx\", \"IPAddress\": \"192.168.0.245\" } ], \"PPTPServer\": { \"RangeStart\": \"192.168.0.246\", \"RangeStop\": \"192.168.0.249\" }, \"L2TPIPsecServer\": { \"RangeStart\": \"192.168.0.250\", \"RangeStop\": \"192.168.0.254\", \"PreSharedSecret\": \"presharedsecret\" }, \"RemoteAccessUsersData\": \"\", \"RemoteAccessUsers\": [ { \"UserName\": \"username\", \"Password\": \"password\" } ], \"SiteToSiteIPsecVPNData\": \"\", \"SiteToSiteIPsecVPN\": [ { \"Peer\": \"192.0.2.1\", \"PreSharedSecret\": \"presharedsecret\", \"RemoteID\": \"192.0.2.1\", \"Routes\": [ \"10.0.0.0/8\" ], \"LocalPrefix\": [ \"192.168.0.0/24\" ] } ], \"StaticRouteData\": \"\", \"StaticRoute\": [ { \"Prefix\": \"172.16.0.0/16\", \"NextHop\": \"192.168.0.21\" } ], \"SyslogHost\": \"192.168.0.1\" }, \"NoWait\": false }","title":"Parameter Examples"},{"location":"references/vpc-router/#delete","text":"","title":"delete"},{"location":"references/vpc-router/#usage_6","text":"Usage: delete { ID | NAME | TAG }... [flags] Aliases: delete, rm Flags: === Delete options === -f, --force === Zone options === --zone string (*required) === Error handling options === --fail-if-not-found === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#boot","text":"","title":"boot"},{"location":"references/vpc-router/#usage_7","text":"Usage: boot { ID | NAME | TAG }... [flags] Aliases: boot, power-on Flags: === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#shutdown","text":"","title":"shutdown"},{"location":"references/vpc-router/#usage_8","text":"Usage: shutdown { ID | NAME | TAG }... [flags] Aliases: shutdown, power-off Flags: === Vpc-Router-specific options === -f, --force-shutdown (aliases: --force) === Zone options === --zone string (*required) === Wait options === --no-wait === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#reset","text":"","title":"reset"},{"location":"references/vpc-router/#usage_9","text":"Usage: reset { ID | NAME | TAG }... [flags] Flags: === Zone options === --zone string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#monitor-interface","text":"","title":"monitor-interface"},{"location":"references/vpc-router/#usage_10","text":"Usage: monitor-interface { ID | NAME | TAG }... [flags] Aliases: monitor-interface, monitor-nic Flags: === Vpc-Router-specific options === --index int === Monitor options === --end string --start string === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#wait-until-ready","text":"","title":"wait-until-ready"},{"location":"references/vpc-router/#usage_11","text":"Usage: wait-until-ready { ID | NAME | TAG }... [flags] Aliases: wait-until-ready, wait-for-boot Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/vpc-router/#wait-until-shutdown","text":"","title":"wait-until-shutdown"},{"location":"references/vpc-router/#usage_12","text":"Usage: wait-until-shutdown { ID | NAME | TAG }... [flags] Aliases: wait-until-shutdown, wait-for-down Flags: === Zone options === --zone string (*required) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/web-accelerator/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / web-accelerator \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read Certificate Management Commands read-certificate create-certificate update-certificate Cache Management Commands delete-cache delete-cache-all list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read-certificate Usage Usage: read-certificate { ID | NAME | TAG } [flags] Aliases: read-certificate, certificate-read, cert-read Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format create-certificate Usage Usage: create-certificate { ID | NAME | TAG } [flags] Aliases: create-certificate, certificate-create, cert-create Flags: === Web-Accelerator-specific options === --certificate-chain string (*required) --key string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"CertificateChain\": \"/path/to/your/certificate/chain | -----BEGIN CERTIFICATE-----\\n...\", \"Key\": \"/path/to/your/private-key | -----BEGIN RSA PRIVATE KEY-----\\n...\" } update-certificate Usage Usage: update-certificate { ID | NAME | TAG } [flags] Aliases: update-certificate, certificate-update, cert-update Flags: === Web-Accelerator-specific options === --certificate-chain string (*required) --key string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format Parameter Examples { \"CertificateChain\": \"/path/to/your/certificate/chain | -----BEGIN CERTIFICATE-----\\n...\", \"Key\": \"/path/to/your/private-key | -----BEGIN RSA PRIVATE KEY-----\\n...\" } delete-cache Usage Usage: delete-cache [flags] Aliases: delete-cache, cache-delete Flags: === Web-Accelerator-specific options === --url strings (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format delete-cache-all Usage Usage: delete-cache-all [flags] Aliases: delete-cache-all, cache-delete-all Flags: === Web-Accelerator-specific options === --domain string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"web-accelerator"},{"location":"references/web-accelerator/#web-accelerator","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / web-accelerator"},{"location":"references/web-accelerator/#_1","text":"Basic Commands list read Certificate Management Commands read-certificate create-certificate update-certificate Cache Management Commands delete-cache delete-cache-all","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/web-accelerator/#list","text":"","title":"list"},{"location":"references/web-accelerator/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/web-accelerator/#read","text":"","title":"read"},{"location":"references/web-accelerator/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/web-accelerator/#read-certificate","text":"","title":"read-certificate"},{"location":"references/web-accelerator/#usage_2","text":"Usage: read-certificate { ID | NAME | TAG } [flags] Aliases: read-certificate, certificate-read, cert-read Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/web-accelerator/#create-certificate","text":"","title":"create-certificate"},{"location":"references/web-accelerator/#usage_3","text":"Usage: create-certificate { ID | NAME | TAG } [flags] Aliases: create-certificate, certificate-create, cert-create Flags: === Web-Accelerator-specific options === --certificate-chain string (*required) --key string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/web-accelerator/#parameter-examples","text":"{ \"CertificateChain\": \"/path/to/your/certificate/chain | -----BEGIN CERTIFICATE-----\\n...\", \"Key\": \"/path/to/your/private-key | -----BEGIN RSA PRIVATE KEY-----\\n...\" }","title":"Parameter Examples"},{"location":"references/web-accelerator/#update-certificate","text":"","title":"update-certificate"},{"location":"references/web-accelerator/#usage_4","text":"Usage: update-certificate { ID | NAME | TAG } [flags] Aliases: update-certificate, certificate-update, cert-update Flags: === Web-Accelerator-specific options === --certificate-chain string (*required) --key string === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/web-accelerator/#parameter-examples_1","text":"{ \"CertificateChain\": \"/path/to/your/certificate/chain | -----BEGIN CERTIFICATE-----\\n...\", \"Key\": \"/path/to/your/private-key | -----BEGIN RSA PRIVATE KEY-----\\n...\" }","title":"Parameter Examples"},{"location":"references/web-accelerator/#delete-cache","text":"","title":"delete-cache"},{"location":"references/web-accelerator/#usage_5","text":"Usage: delete-cache [flags] Aliases: delete-cache, cache-delete Flags: === Web-Accelerator-specific options === --url strings (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/web-accelerator/#delete-cache-all","text":"","title":"delete-cache-all"},{"location":"references/web-accelerator/#usage_6","text":"Usage: delete-cache-all [flags] Aliases: delete-cache-all, cache-delete-all Flags: === Web-Accelerator-specific options === --domain string (*required) === Input options === -y, --assumeyes Assume that the answer to any question which would be asked is yes --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/zone/","text":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / zone \u30b3\u30de\u30f3\u30c9\u4e00\u89a7 Basic Commands list read list Usage Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format read Usage Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"zone"},{"location":"references/zone/#zone","text":"","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / zone"},{"location":"references/zone/#_1","text":"Basic Commands list read","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7"},{"location":"references/zone/#list","text":"","title":"list"},{"location":"references/zone/#usage","text":"Usage: list [flags] Aliases: list, ls, find, select Flags: === Filter options === --names strings === Limit/Offset options === --count int (aliases: --max, --limit) --from int (aliases: --offset) === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"references/zone/#read","text":"","title":"read"},{"location":"references/zone/#usage_1","text":"Usage: read { ID | NAME | TAG } [flags] Aliases: read, show Flags: === Input options === --generate-skeleton Output skeleton of parameters with JSON format (aliases: --skeleton) --parameters string Input parameters in JSON format === Output options === --format string Output format in Go templates (aliases: --fmt) -o, --output-type string Output format options: [table/json/yaml] (aliases: --out) --query string Query for JSON output --query-driver string Name of the driver that handles queries to JSON output options: [jmespath/jq] -q, --quiet Output IDs only === Parameter example === --example Output example parameters with JSON format","title":"Usage"},{"location":"upgrade/v1_0_0/","text":"v1.0.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9 \u3053\u306e\u30ac\u30a4\u30c9\u306fUsacloud v0\u7cfb\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u304cv1\u3078\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u969b\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002 \u4e3b\u306a\u5909\u66f4\u70b9 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5 \u914d\u5e03\u30b5\u30a4\u30c8 https://releases.usacloud.jp/usacloud \u306e\u5ec3\u6b62 yum/dnf/apt\u30b3\u30de\u30f3\u30c9\u3067\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u4f7f\u7528\u3057\u3066\u3044\u305f\u30ea\u30dd\u30b8\u30c8\u30ea https://releases.usacloud.jp/usacloud \u304c\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002 \u4ee3\u308f\u308a\u306bGitHub Releases\u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://github.com/sacloud/usacloud/releases/latest/ MacOS/Linux\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 $ curl -fsSL https://github.com/sacloud/usacloud/releases/latest/download/install.sh | bash \u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u306e\u6709\u52b9\u5316 \u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u3092\u6709\u52b9\u306b\u3059\u308b\u65b9\u6cd5\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f\u3002 bash_completion \u306a\u3069\u306e\u30b7\u30a7\u30eb\u88dc\u5b8c\u304c\u5229\u7528\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u306b\u51fa\u6765\u307e\u3059\u3002 Bash #Linux\u306e\u5834\u5408 $ usacloud completion bash > /etc/bash_completion.d/usacloud #MacOS\u306e\u5834\u5408 $ usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud Zsh $ usacloud completion zsh > \"${fpath[1]}/_usacloud\" Fish: $ usacloud completion fish > ~/.config/fish/completions/usacloud.fish \u5168\u30be\u30fc\u30f3\u5bfe\u8c61\u306e\u64cd\u4f5c --zone \u306b all \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u4e00\u89a7 $ usacloud server list --zone = all rest\u30b3\u30de\u30f3\u30c9\u306e\u8ffd\u52a0 usacloud rest \u3067\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u3092\u76f4\u63a5\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f rest\u30b3\u30de\u30f3\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30bf\u30a4\u30d7 CSV/TSV\u51fa\u529b\u306e\u5ec3\u6b62 --output-type \u3078\u306e csv / tsv \u304c\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002\u4ee3\u308f\u308a\u306b --foramt \u30aa\u30d7\u30b7\u30e7\u30f3\u3084JSON\u51fa\u529b+jq\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002 --selector \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5ec3\u6b62 --selector \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u64cd\u4f5c\u5bfe\u8c61\u3092\u30bf\u30b0\u3067\u6307\u5b9a\u53ef\u80fd\u3067\u3057\u305f\u304c\u3001v1\u3067\u306f\u5f15\u6570\u306bID/\u540d\u79f0/\u30bf\u30b0\u3092\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 no results \u51fa\u529b\u306e\u5ec3\u6b62 v0\u3067\u306f\u64cd\u4f5c\u5bfe\u8c61\u304c\u306a\u3044\u5834\u5408\u306b no results \u3068\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u304c\u3001v1\u3067\u306f\u4f55\u3082\u51fa\u529b\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002 \u5ec3\u6b62\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9 summary\u30b3\u30de\u30f3\u30c9\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002","title":"v1.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9"},{"location":"upgrade/v1_0_0/#v100","text":"\u3053\u306e\u30ac\u30a4\u30c9\u306fUsacloud v0\u7cfb\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u304cv1\u3078\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u969b\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002","title":"v1.0.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9"},{"location":"upgrade/v1_0_0/#_1","text":"","title":"\u4e3b\u306a\u5909\u66f4\u70b9"},{"location":"upgrade/v1_0_0/#_2","text":"","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5"},{"location":"upgrade/v1_0_0/#httpsreleasesusacloudjpusacloud","text":"yum/dnf/apt\u30b3\u30de\u30f3\u30c9\u3067\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u4f7f\u7528\u3057\u3066\u3044\u305f\u30ea\u30dd\u30b8\u30c8\u30ea https://releases.usacloud.jp/usacloud \u304c\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002 \u4ee3\u308f\u308a\u306bGitHub Releases\u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://github.com/sacloud/usacloud/releases/latest/ MacOS/Linux\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 $ curl -fsSL https://github.com/sacloud/usacloud/releases/latest/download/install.sh | bash","title":"\u914d\u5e03\u30b5\u30a4\u30c8 https://releases.usacloud.jp/usacloud \u306e\u5ec3\u6b62"},{"location":"upgrade/v1_0_0/#shell-completion","text":"\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u3092\u6709\u52b9\u306b\u3059\u308b\u65b9\u6cd5\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f\u3002 bash_completion \u306a\u3069\u306e\u30b7\u30a7\u30eb\u88dc\u5b8c\u304c\u5229\u7528\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u306b\u51fa\u6765\u307e\u3059\u3002","title":"\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u306e\u6709\u52b9\u5316"},{"location":"upgrade/v1_0_0/#bash","text":"#Linux\u306e\u5834\u5408 $ usacloud completion bash > /etc/bash_completion.d/usacloud #MacOS\u306e\u5834\u5408 $ usacloud completion bash > /usr/local/etc/bash_completion.d/usacloud","title":"Bash"},{"location":"upgrade/v1_0_0/#zsh","text":"$ usacloud completion zsh > \"${fpath[1]}/_usacloud\"","title":"Zsh"},{"location":"upgrade/v1_0_0/#fish","text":"$ usacloud completion fish > ~/.config/fish/completions/usacloud.fish","title":"Fish:"},{"location":"upgrade/v1_0_0/#_3","text":"--zone \u306b all \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 # \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u4e00\u89a7 $ usacloud server list --zone = all","title":"\u5168\u30be\u30fc\u30f3\u5bfe\u8c61\u306e\u64cd\u4f5c"},{"location":"upgrade/v1_0_0/#rest","text":"usacloud rest \u3067\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u3092\u76f4\u63a5\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f rest\u30b3\u30de\u30f3\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"rest\u30b3\u30de\u30f3\u30c9\u306e\u8ffd\u52a0"},{"location":"upgrade/v1_0_0/#_4","text":"","title":"\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30bf\u30a4\u30d7"},{"location":"upgrade/v1_0_0/#csvtsv","text":"--output-type \u3078\u306e csv / tsv \u304c\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002\u4ee3\u308f\u308a\u306b --foramt \u30aa\u30d7\u30b7\u30e7\u30f3\u3084JSON\u51fa\u529b+jq\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002","title":"CSV/TSV\u51fa\u529b\u306e\u5ec3\u6b62"},{"location":"upgrade/v1_0_0/#-selector","text":"--selector \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u64cd\u4f5c\u5bfe\u8c61\u3092\u30bf\u30b0\u3067\u6307\u5b9a\u53ef\u80fd\u3067\u3057\u305f\u304c\u3001v1\u3067\u306f\u5f15\u6570\u306bID/\u540d\u79f0/\u30bf\u30b0\u3092\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"--selector\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5ec3\u6b62"},{"location":"upgrade/v1_0_0/#no-results","text":"v0\u3067\u306f\u64cd\u4f5c\u5bfe\u8c61\u304c\u306a\u3044\u5834\u5408\u306b no results \u3068\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u304c\u3001v1\u3067\u306f\u4f55\u3082\u51fa\u529b\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002","title":"no results\u51fa\u529b\u306e\u5ec3\u6b62"},{"location":"upgrade/v1_0_0/#_5","text":"summary\u30b3\u30de\u30f3\u30c9\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u5ec3\u6b62\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9"},{"location":"upgrade/v1_1_0/","text":"v1.1.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9 \u3053\u306e\u30ac\u30a4\u30c9\u306fUsacloud v1.0\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u304cv1.1\u3078\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u969b\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002 v0\u7cfb\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u306f v1.0.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9 \u304b\u3089\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4e3b\u306a\u5909\u66f4\u70b9 \u30b3\u30de\u30f3\u30c9\u6319\u52d5\u306e\u5909\u66f4 VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\u5bfe\u5fdc \u6a5f\u80fd\u8ffd\u52a0 JSON\u51fa\u529b\u6642\u306eANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e DefaultOutputType \u3068 DefaultQueryDriver \u3092\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b --query \u3067jq\u4e92\u63db\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0 \u30bb\u30eb\u30d5\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6a5f\u80fd\u306e\u8ffd\u52a0 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u6a5f\u80fd rest \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306e --query \u306e\u30b5\u30dd\u30fc\u30c8 VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\u5bfe\u5fdc VPC\u30eb\u30fc\u30bf\u4f5c\u6210\u6642\u306b --version \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f 1 \u3068 2 \u3067\u3001\u7701\u7565\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 2 \u306b\u306a\u308a\u307e\u3059\u3002 VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8/VPC\u30eb\u30fc\u30bf JSON\u51fa\u529b\u6642\u306eANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc --output-type=json \u3084 --query \u6307\u5b9a\u6642\u306e\u51fa\u529b\u304cANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002 --no-color \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30ab\u30e9\u30fc\u51fa\u529b\u3092\u7121\u52b9\u5316\u3067\u304d\u307e\u3059\u3002 \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e DefaultOutputType \u3068 DefaultQueryDriver \u3092\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b \u5f93\u6765\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 --query \u3067jq\u4e92\u63db\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b \u5f93\u6765\u306f --query \u3067JMESPath\u3092\u5229\u7528\u53ef\u80fd\u3067\u3057\u305f\u304c\u3001jq\u4e92\u63db\u6a5f\u80fd\u3082\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ac\u30a4\u30c9/\u30af\u30a8\u30ea \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0 \u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3 --argument-match-mode \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bb\u30eb\u30d5\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6a5f\u80fd\u306e\u8ffd\u52a0 Usacloud\u306e\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u305f\u3089\u81ea\u8eab\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9 update-self \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/update-self \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u6a5f\u80fd \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067 max_connections \u306a\u3069\u306eRDBMS\u56fa\u6709\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u6a5f\u80fd\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/database \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 rest \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306e --query \u306e\u30b5\u30dd\u30fc\u30c8 rest \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067 --query \u306b\u3088\u308b\u51fa\u529b\u306e\u52a0\u5de5\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ac\u30a4\u30c9/rest\u30b3\u30de\u30f3\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"v1.1\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9"},{"location":"upgrade/v1_1_0/#v110","text":"\u3053\u306e\u30ac\u30a4\u30c9\u306fUsacloud v1.0\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u304cv1.1\u3078\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u969b\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002 v0\u7cfb\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u306f v1.0.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9 \u304b\u3089\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"v1.1.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9"},{"location":"upgrade/v1_1_0/#_1","text":"","title":"\u4e3b\u306a\u5909\u66f4\u70b9"},{"location":"upgrade/v1_1_0/#_2","text":"VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\u5bfe\u5fdc","title":"\u30b3\u30de\u30f3\u30c9\u6319\u52d5\u306e\u5909\u66f4"},{"location":"upgrade/v1_1_0/#_3","text":"JSON\u51fa\u529b\u6642\u306eANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e DefaultOutputType \u3068 DefaultQueryDriver \u3092\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b --query \u3067jq\u4e92\u63db\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b \u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0 \u30bb\u30eb\u30d5\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6a5f\u80fd\u306e\u8ffd\u52a0 \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u6a5f\u80fd rest \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306e --query \u306e\u30b5\u30dd\u30fc\u30c8","title":"\u6a5f\u80fd\u8ffd\u52a0"},{"location":"upgrade/v1_1_0/#vpc","text":"VPC\u30eb\u30fc\u30bf\u4f5c\u6210\u6642\u306b --version \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f 1 \u3068 2 \u3067\u3001\u7701\u7565\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f 2 \u306b\u306a\u308a\u307e\u3059\u3002 VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8/VPC\u30eb\u30fc\u30bf","title":"VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\u5bfe\u5fdc"},{"location":"upgrade/v1_1_0/#jsonansi","text":"--output-type=json \u3084 --query \u6307\u5b9a\u6642\u306e\u51fa\u529b\u304cANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002 --no-color \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30ab\u30e9\u30fc\u51fa\u529b\u3092\u7121\u52b9\u5316\u3067\u304d\u307e\u3059\u3002","title":"JSON\u51fa\u529b\u6642\u306eANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc"},{"location":"upgrade/v1_1_0/#defaultoutputtypedefaultquerydriver","text":"\u5f93\u6765\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306eDefaultOutputType\u3068DefaultQueryDriver\u3092\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b"},{"location":"upgrade/v1_1_0/#-queryjq","text":"\u5f93\u6765\u306f --query \u3067JMESPath\u3092\u5229\u7528\u53ef\u80fd\u3067\u3057\u305f\u304c\u3001jq\u4e92\u63db\u6a5f\u80fd\u3082\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ac\u30a4\u30c9/\u30af\u30a8\u30ea \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"--query\u3067jq\u4e92\u63db\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b"},{"location":"upgrade/v1_1_0/#_4","text":"\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3 --argument-match-mode \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0"},{"location":"upgrade/v1_1_0/#_5","text":"Usacloud\u306e\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u305f\u3089\u81ea\u8eab\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9 update-self \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/update-self \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30bb\u30eb\u30d5\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6a5f\u80fd\u306e\u8ffd\u52a0"},{"location":"upgrade/v1_1_0/#_6","text":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067 max_connections \u306a\u3069\u306eRDBMS\u56fa\u6709\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u6a5f\u80fd\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/database \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u6a5f\u80fd"},{"location":"upgrade/v1_1_0/#rest-query","text":"rest \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067 --query \u306b\u3088\u308b\u51fa\u529b\u306e\u52a0\u5de5\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f \u30ac\u30a4\u30c9/rest\u30b3\u30de\u30f3\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"rest\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306e--query\u306e\u30b5\u30dd\u30fc\u30c8"}]}