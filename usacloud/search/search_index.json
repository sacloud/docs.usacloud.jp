{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u30db\u30fc\u30e0","text":""},{"location":"#usacloud","title":"usacloud\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<p><code>usacloud</code>\u306f\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u7528\u306e\u516c\u5f0fCLI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u3059\u3002</p> <p>Note</p> <p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306fUsacloud v1\u7cfb\u5411\u3051\u3067\u3059\u3002 v0\u7cfb\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>https://github.com/sacloud/usacloud/tree/v0/build_docs/docs</p> <p>\u3053\u308c\u304b\u3089Usacloud\u3092\u5229\u7528\u958b\u59cb\u3059\u308b\u65b9\u306fUsacloud\u5c0e\u5165\u30ac\u30a4\u30c9\u304b\u3089\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002  </p>"},{"location":"guides/basic_usage/","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":""},{"location":"guides/basic_usage/#_2","title":"\u30b3\u30de\u30f3\u30c9\u57fa\u672c\u69cb\u6587","text":"<p><code>usacloud</code>\u30b3\u30de\u30f3\u30c9\u306e\u57fa\u672c\u69cb\u6587\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <pre><code>$ usacloud &lt;\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9&gt; &lt;\u30b3\u30de\u30f3\u30c9&gt; [\u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3] [\u5f15\u6570]\n</code></pre>"},{"location":"guides/basic_usage/#_3","title":"\u6307\u5b9a\u3067\u304d\u308b\u5024","text":"<p>\u30ea\u30bd\u30fc\u30b9\u3084\u30b3\u30de\u30f3\u30c9\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3067\u304d\u308b\u5024\u306fhelp\u8868\u793a\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"guides/basic_usage/#_4","title":"\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u4f8b","text":"<pre><code>#------------------------------------------------------------------------------\n# \u30b5\u30fc\u30d0\u30fc(server)\u306b\u5bfe\u3059\u308b\u4e00\u89a7\u8868\u793a\u30b3\u30de\u30f3\u30c9(ls)\u306e\u5834\u5408\u306e\u4f8b\n#------------------------------------------------------------------------------\n\n# \u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9(\u30aa\u30d7\u30b7\u30e7\u30f3/\u5f15\u6570\u306a\u3057)\n$ usacloud server ls\n\n# \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3042\u308a\n$ usacloud --zone tk1a server ls\n\n# \u30aa\u30d7\u30b7\u30e7\u30f3(\u77ed\u3044\u5f62\u5f0f)\n$ usacloud server ls -q\n\n# \u30aa\u30d7\u30b7\u30e7\u30f3(\u9577\u3044\u5f62\u5f0f)\n$ usacloud server ls --quiet\n\n# \u30aa\u30d7\u30b7\u30e7\u30f3\u306f=\u3092\u660e\u793a\u3057\u3066\u3082OK\n$ usacloud server ls --name=foovar\n</code></pre>"},{"location":"guides/basic_usage/#help","title":"help\u8868\u793a","text":"<p><code>-h</code>\u307e\u305f\u306f<code>--help</code>\u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3068\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u307e\u3059\u3002  \u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u4f4d\u7f6e\u3067\u8868\u793a\u3067\u304d\u308b\u5185\u5bb9\u304c\u5909\u5316\u3057\u307e\u3059\u3002</p>"},{"location":"guides/basic_usage/#_5","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3/\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u30d8\u30eb\u30d7\u8868\u793a","text":"<pre><code>usacloud -h\n</code></pre>"},{"location":"guides/basic_usage/#_6","title":"\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u8868\u793a","text":"<pre><code>#\n# \u66f8\u5f0f: usacloud &lt;\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9&gt; -h\n#\n\n# \u30b5\u30fc\u30d0\u30fc(server)\u306e\u30d8\u30eb\u30d7\u8868\u793a\u306e\u4f8b\nusacloud server -h\n</code></pre>"},{"location":"guides/basic_usage/#_7","title":"\u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3/\u5f15\u6570\u306e\u30d8\u30eb\u30d7\u8868\u793a","text":"<pre><code>#\n# \u66f8\u5f0f: usacloud &lt;\u64cd\u4f5c\u5bfe\u8c61\u306e\u30ea\u30bd\u30fc\u30b9&gt; &lt;\u30b3\u30de\u30f3\u30c9&gt; -h\n#\n\n# \u30b5\u30fc\u30d0\u30fc(server1)\u306e\u4e00\u89a7\u8868\u793a\u30b3\u30de\u30f3\u30c9(ls)\u306e\u30d8\u30eb\u30d7\u8868\u793a\u306e\u4f8b\nusacloud server ls -h\n</code></pre>"},{"location":"guides/basic_usage/#_8","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3","text":"<p>\u4e3b\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ee5\u4e0b\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\u5168\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"guides/basic_usage/#-config","title":"\u30b3\u30f3\u30d5\u30a3\u30b0(<code>--config</code>)","text":"<p>\u5229\u7528\u3059\u308b\u30b3\u30f3\u30d5\u30a3\u30b0(\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30a8\u30a4\u30ea\u30a2\u30b9:<code>--profile</code>) \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f<code>usacloud config list</code>\u30b3\u30de\u30f3\u30c9\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u307b\u304b\u3001<code>usacloud config create</code>\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u65b0\u898f\u4f5c\u6210\u3082\u53ef\u80fd\u3067\u3059\u3002</p> <p>\u901a\u5e38\u3053\u306e\u5024\u306f<code>~/.usacloud/current</code>\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570<code>SAKURACLOUD_PROFILE</code>/<code>USACLOUD_PROFILE</code>\u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e<code>--profile</code>\u306e\u6307\u5b9a\u3067\u3053\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002</p> <p>Warning</p> <p>Usacloud v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081v1\u3067\u3082\u74b0\u5883\u5909\u6570<code>USACLOUD_PROFILE</code>\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5ec3\u6b62\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002</p>"},{"location":"guides/basic_usage/#api-token","title":"API\u30c8\u30fc\u30af\u30f3(<code>--token</code>)","text":"<p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002  </p> <p>\u901a\u5e38\u3053\u306e\u5024\u306f<code>~/.usacloud/[current-profile-nane]/config.json</code>\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570<code>SAKURACLOUD_ACCESS_TOKEN</code>\u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e<code>--token</code>\u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002  </p>"},{"location":"guides/basic_usage/#api-secret","title":"API\u30b7\u30fc\u30af\u30ec\u30c3\u30c8(<code>--secret</code>)","text":"<p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002  </p> <p>\u901a\u5e38\u3053\u306e\u5024\u306f<code>~/.usacloud/[current-profile-nane]/config.json</code>\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570<code>SAKURACLOUD_ACCESS_TOKEN_SECRET</code>\u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e<code>--secret</code>\u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002  </p>"},{"location":"guides/basic_usage/#_9","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u51fa\u529b\u306e\u8a2d\u5b9a","text":"<p>\u51fa\u529b\u306e\u884c\u308f\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u306f\u4ee5\u4e0b\u306e\u51fa\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 (<code>bill csv</code>\u306a\u3069\u306e\u4e00\u90e8\u30b3\u30de\u30f3\u30c9\u3067\u306f\u51fa\u529b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059)  </p>"},{"location":"guides/basic_usage/#-output-type-or-out","title":"\u51fa\u529b\u30bf\u30a4\u30d7(<code>--output-type</code> or <code>--out</code>)","text":"<p>\u51fa\u529b\u5f62\u5f0f\u3092\u9078\u629e\u3057\u307e\u3059\u3002\u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002  </p> <ul> <li><code>table</code> : \u30c6\u30fc\u30d6\u30eb\u5f62\u5f0f</li> <li><code>json</code>  : JSON\u5f62\u5f0f</li> <li><code>yaml</code>  : YAML\u5f62\u5f0f</li> </ul> <p>\u672a\u6307\u5b9a\u306e\u5834\u5408\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3<code>--default-output-type</code>\u306e\u8a2d\u5b9a\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"guides/basic_usage/#quiet-quiet-or-q","title":"quiet\u30e2\u30fc\u30c9(<code>--quiet</code> or <code>-q</code>)","text":"<p>ID\u306e\u307f\u51fa\u529b\u3057\u307e\u3059\u3002</p> <p>**\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f<code>--output-type</code>\u3068\u4e00\u7dd2\u306b\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002 **</p>"},{"location":"guides/basic_usage/#-format-or-fmt","title":"\u30d5\u30a9\u30fc\u30de\u30c3\u30c8(<code>--format</code> or <code>--fmt</code>)","text":"<p>\u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092go\u8a00\u8a9e\u306etext/template\u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code>usacloud server ls --format \"ID is {{.ID}}, Name is {{.Name}}\"\n</code></pre>"},{"location":"guides/basic_usage/#-query-query-driver","title":"\u30af\u30a8\u30ea(<code>--query</code> | <code>--query-driver</code>)","text":"<p>JMESPath\u307e\u305f\u306fjq\u3067\u51fa\u529b\u306e\u52a0\u5de5\u304c\u884c\u3048\u307e\u3059\u3002  </p>"},{"location":"guides/basic_usage/#jmespath","title":"\u5229\u7528\u4f8b(JMESPath):","text":"<pre><code>$ usacloud server list --query \"[].Name\"\n[\n    \"server1\",\n    \"server2\",\n    \"server3\"\n]\n</code></pre>"},{"location":"guides/basic_usage/#jq","title":"\u5229\u7528\u4f8b(jq):","text":"<pre><code>$ usacloud server list --query-driver jq --query \".[].Name\"\n\"server1\"\n\"server2\"\n\"server3\"\n</code></pre> <p><code>--query</code>\u3068<code>--query-driver</code>\u306e\u8a73\u7d30\u306f\u30af\u30a8\u30ea\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"guides/basic_usage/#_10","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30be\u30fc\u30f3\u6307\u5b9a","text":"<p>\u30be\u30fc\u30f3\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30ea\u30bd\u30fc\u30b9\u306e\u5834\u5408<code>--zone</code>\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code>$ usacloud server list --zone is1a\n</code></pre> <p>\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067\u30be\u30fc\u30f3\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"guides/basic_usage/#_11","title":"\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c","text":"<p><code>--zone</code>\u306b<code>all</code>\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\u3059\u3002</p> <pre><code># \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u3092\u4e00\u89a7\u8868\u793a\n$ usacloud server list --zone=all\n\n# \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u306e\u3046\u3061\u3001\u540d\u79f0\u306bexample\u3092\u542b\u3080\u30b5\u30fc\u30d0\u3092\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\n$ usacloud server shutdown --zone=all example\n\n# \u5168\u30be\u30fc\u30f3\u306b\u30b5\u30fc\u30d0\u4f5c\u6210\n$ usacloud server create --name example ... --zone=all\n</code></pre>"},{"location":"guides/basic_usage/#or-json-parameters","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30d5\u30a1\u30a4\u30eb or JSON\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a(<code>--parameters</code>)","text":"<p>\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u30d1\u30e9\u30e1\u30fc\u30bf\u3092JSON\u307e\u305f\u306fJSON\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code># \u6587\u5b57\u5217\u3067\u6307\u5b9a\u3059\u308b\u4f8b\n$ usacloud server list --parameters '{\"Names\": [\"example\"]}'\n\n# \u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3067\u6307\u5b9a\u3059\u308b\u4f8b\n$ cat example.json\n{\n  \"Names\": [\"example\"]\n}\n$ usacloud server list --parameters example.json\n</code></pre> <p>JSON\u30d5\u30a1\u30a4\u30eb\u306f<code>--example</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u8a18\u8ff0\u4f8b\u3092\u78ba\u8a8d\u51fa\u6765\u307e\u3059\u3002</p> <p>Tip</p> <p><code>--parameters</code>\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306e\u4f75\u7528/\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306e\u4e0a\u66f8\u304d\u304c\u53ef\u80fd\u3067\u3059\u3002 \u5171\u901a\u7684\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u500b\u5225\u306e\u5024\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3001\u3068\u3044\u3046\u4f7f\u3044\u65b9\u304c\u51fa\u6765\u307e\u3059\u3002</p>"},{"location":"guides/basic_usage/#-example","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: \u30d1\u30e9\u30e1\u30fc\u30bf\u4f8b\u306e\u51fa\u529b(<code>--example</code>)","text":"<p><code>--parameters</code>\u3067\u6307\u5b9a\u3059\u308bJSON\u30d5\u30a1\u30a4\u30eb\u306e\u4f8b\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</p> <pre><code>$ usacloud switch create --example\n{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre> <p>\u901a\u5e38\u306f\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u306b\u4fdd\u5b58\u3057\u305f\u4e0a\u3067\u7de8\u96c6\u3057\u3066\u5229\u7528\u3057\u307e\u3059\u3002</p> <pre><code># \u30d1\u30e9\u30e1\u30fc\u30bf\u4f8b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\n$ usacloud switch create --example &gt; parameters.json\n# \u7de8\u96c6\n$ vi parameters.json\n# \u5229\u7528\n$ usacloud switch create --parameters parameters.json\n</code></pre>"},{"location":"guides/basic_usage/#yes-y-or-assumeyes","title":"\u5171\u901a\u30aa\u30d7\u30b7\u30e7\u30f3: yes\u30aa\u30d7\u30b7\u30e7\u30f3(<code>-y</code> or <code>--assumeyes</code>)","text":"<p>\u5b9f\u884c\u6642\u306b\u78ba\u8a8d\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002 \u78ba\u8a8d\u30c0\u30a4\u30a2\u30ed\u30b0\u5168\u3066\u306b<code>y</code> \u307e\u305f\u306f <code>yes</code>\u3092\u5165\u529b\u3057\u307e\u3059\u3002  </p>"},{"location":"guides/basic_usage/#id-or-or","title":"\u5f15\u6570: ID or \u540d\u79f0 or \u30bf\u30b0\u3067\u306e\u6307\u5b9a","text":"<p>\u7279\u5b9a\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u5bfe\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306e\u5834\u5408\u3001ID\u3001\u540d\u79f0\u3001\u307e\u305f\u306f\u30bf\u30b0\u3092\u5f15\u6570\u306b\u3068\u308a\u307e\u3059\u3002 ID\u3068\u30bf\u30b0\u306e\u5834\u5408\u306f\u5b8c\u5168\u4e00\u81f4\u3001\u540d\u79f0\u306e\u5834\u5408\u306f(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f)\u90e8\u5206\u4e00\u81f4\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u304c\u64cd\u4f5c\u5bfe\u8c61\u3068\u306a\u308a\u307e\u3059\u3002</p> <p>Info</p> <p>\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3<code>--argument-match-mode</code>\u307e\u305f\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb<code>ArgumentMatchMode</code>\u306b<code>exact</code>\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5f15\u6570\u3068\u540d\u79f0\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002  </p> <p>Warning</p> <p>\u8907\u6570\u30ea\u30bd\u30fc\u30b9\u306e\u4e00\u62ec\u64cd\u4f5c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u30b3\u30de\u30f3\u30c9\u306e\u5834\u5408\u3001\u5bfe\u8c61\u304c\u8907\u6570\u3068\u306a\u308b\u6307\u5b9a\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002</p> <p>\u4f8b:</p> <pre><code>#------------------------------------------------------------------------------\n# \u4ee5\u4e0b\u306e\u30ea\u30bd\u30fc\u30b9\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306e\u4f8b\n#------------------------------------------------------------------------------\n$ usacloud server ls\n+--------------+---------+-----+--------+---------------+--------+\n|      ID      |  NAME   | CPU | MEMORY |   IPADDRESS   | STATUS |\n+--------------+---------+-----+--------+---------------+--------+\n| 000000000011 | Test1-1 | 1   | 1024MB | 192.0.2.11/24 | up     |\n| 000000000021 | Test2-1 | 1   | 1024MB | 192.0.2.21/24 | up     |\n| 000000000031 | Test3-1 | 1   | 1024MB | 192.0.2.31/24 | up     |\n| 000000000032 | Test3-2 | 1   | 1024MB | 192.0.2.32/24 | up     |\n+--------------+---------+-----+--------+---------------+--------+\n\n#------------------------------------------------------------------------------\n# \u90e8\u5206\u4e00\u81f4(\u4f8b1)\n#------------------------------------------------------------------------------\n$ usacloud server boot Test # \u540d\u79f0\u306bTest\u3092\u542b\u3080\u3082\u306e\n\nTarget resource IDs =&gt; [\n    000000000011,\n    000000000021,\n    000000000031,\n    000000000032\n]\nAre you sure you want to boot?(y/n) [n]:\n\n#------------------------------------------------------------------------------\n# \u90e8\u5206\u4e00\u81f4(\u4f8b2)\n#------------------------------------------------------------------------------\n$ usacloud server boot Test3 # \u540d\u79f0\u306bTest3\u3092\u542b\u3080\u3082\u306e\n\nTarget resource IDs =&gt; [\n    000000000031,\n    000000000032\n]\nAre you sure you want to boot?(y/n) [n]:\n</code></pre>"},{"location":"guides/basic_usage/#readlist","title":"<code>read</code>/<code>list</code>\u30b3\u30de\u30f3\u30c9\u306e\u4f7f\u3044\u5206\u3051","text":"<p>Usacloud\u3067\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3057\u3066<code>list</code>\u3068<code>read</code>\u3092\u591a\u304f\u306e\u30ea\u30bd\u30fc\u30b9\u3067\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002</p> <ul> <li>\u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3092\u8a31\u5bb9\u3059\u308b\u304b</li> <li>\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u65b9\u6cd5</li> </ul>"},{"location":"guides/basic_usage/#read","title":"<code>read</code>\u306e\u7279\u5fb4","text":"<ul> <li>\u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3057\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308b</li> <li>\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u306f\u5f15\u6570\u3067\u884c\u3046</li> </ul>"},{"location":"guides/basic_usage/#list","title":"<code>list</code>\u306e\u7279\u5fb4","text":"<ul> <li>\u8907\u6570\u4ef6\u30d2\u30c3\u30c8\u3057\u3066\u3082\u30a8\u30e9\u30fc\u3068\u306a\u3089\u306a\u3044</li> <li>\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\u306f\u30d5\u30e9\u30b0(\u30aa\u30d7\u30b7\u30e7\u30f3)\u3067\u884c\u3046</li> </ul> <p>Tips</p> <p><code>read</code>\u306f\u4ed6\u306e\u30b3\u30de\u30f3\u30c9\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u3066\u5229\u7528\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u4f8b: \u30a2\u30a4\u30b3\u30f3\u3092\u540d\u524d\u3067\u691c\u7d22\u3057\u3001ID\u3092\u30b9\u30a4\u30c3\u30c1\u4f5c\u6210\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u6e21\u3059(\u30a2\u30a4\u30b3\u30f3\u304c\u8907\u6570\u30d2\u30c3\u30c8\u3057\u305f\u3089\u30a8\u30e9\u30fc\u3068\u306a\u308b) <code>usacloud switch create --icon-id=$(usacloud icon read -q example)</code></p>"},{"location":"guides/completion/","title":"completion\u30b3\u30de\u30f3\u30c9","text":"<p>Usacloud\u3067\u306f\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u306e\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u51fa\u529b\u3059\u308b<code>usacloud completion</code>\u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>$ usacloud completion -h\n\nUsage:\n  usacloud completion [bash|zsh|fish|powershell]\n\nFlags:\n  -h, --help   help for completion\n</code></pre>"},{"location":"guides/completion/#completion_1","title":"completion\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f","text":"<p>\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>$ usacloud completion &lt;bash | zsh | fish | powershell&gt;\n</code></pre>"},{"location":"guides/completion/#bash","title":"bash","text":"<p>\u3042\u3089\u304b\u3058\u3081bash-completion\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u306a\u3069\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u5316\u3057\u307e\u3059\u3002</p> <pre><code>source &lt;(usacloud completion bash)\n</code></pre> <p>\u5404\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u30b7\u30a7\u30eb\u88dc\u5b8c\u3092\u81ea\u52d5\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>#Linux\u306e\u5834\u5408\nusacloud completion bash &gt; /etc/bash_completion.d/usacloud\n\n#MacOS\u306e\u5834\u5408\nusacloud completion bash &gt; /usr/local/etc/bash_completion.d/usacloud\n</code></pre>"},{"location":"guides/completion/#zsh","title":"zsh","text":"<p>If shell completion is not already enabled in your environment you will need  to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions for each session, execute once:</p> <pre><code>usacloud completion zsh &gt; \"${fpath[1]}/_usacloud\"\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p>"},{"location":"guides/completion/#fish","title":"fish","text":"<pre><code>usacloud completion fish | source\n</code></pre> <p>To load completions for each session, execute once:</p> <pre><code>usacloud completion fish &gt; ~/.config/fish/completions/usacloud.fish\n</code></pre>"},{"location":"guides/query/","title":"\u30af\u30a8\u30ea / \u51fa\u529b\u306e\u52a0\u5de5","text":"<p>JMESPath\u307e\u305f\u306fjq\u3067\u51fa\u529b\u306e\u52a0\u5de5\u304c\u884c\u3048\u307e\u3059\u3002 </p>"},{"location":"guides/query/#_2","title":"\u30af\u30a8\u30ea\u306e\u4f7f\u3044\u65b9","text":"<p>\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>$ usacloud &lt;\u30ea\u30bd\u30fc\u30b9\u540d&gt; &lt;\u30b3\u30de\u30f3\u30c9&gt; --query=\"&lt;query&gt;\" [--query-driver=&lt;\"jmespath\"|\"jq\"&gt;] [ID or Name or Tags]\n</code></pre> <ul> <li><code>--query</code>: JMESPath\u307e\u305f\u306fjq\u306b\u6e21\u3059\u30af\u30a8\u30ea(expression)</li> <li><code>--query-driver</code>: <code>--query</code>\u3092\u51e6\u7406\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u6307\u5b9a\u3001<code>jmespath</code>(\u30c7\u30d5\u30a9\u30eb\u30c8)\u307e\u305f\u306f<code>jq</code>\u304c\u6307\u5b9a\u53ef\u80fd</li> </ul>"},{"location":"guides/query/#_3","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u306e\u5207\u308a\u66ff\u3048","text":"<p>\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e<code>DefaultQueryDriver</code>\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067<code>--query-driver</code>\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u306b\u5229\u7528\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002  </p>"},{"location":"guides/query/#_4","title":"\u5229\u7528\u4f8b","text":"<pre><code># \u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u5207\u308a\u66ff\u3048\n$ export SAKURACLOUD_DEFAULT_QUERY_DRIVER=jq\n\n$ usacloud server list --query \".[].Name\"\n\"server1\"\n\"server2\"\n\"server3\"\n</code></pre>"},{"location":"guides/query/#-query","title":"<code>--query</code>\u4ee5\u5916\u306e\u51fa\u529b\u95a2\u9023\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306e\u4f75\u7528","text":"<ul> <li><code>--quiet</code>/<code>-q</code>\u307e\u305f\u306f<code>--format</code>\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001<code>--query</code>\u306e\u6307\u5b9a\u306f\u7121\u8996\u3055\u308c\u307e\u3059</li> <li><code>--query</code>\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001<code>--output-type</code>\u306e\u6307\u5b9a\u306f\u7121\u8996\u3055\u308c\u307e\u3059</li> </ul>"},{"location":"guides/rest/","title":"rest\u30b3\u30de\u30f3\u30c9(\u4e0a\u7d1a\u8005\u5411\u3051)","text":"<p>Usacloud\u3067\u306f\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u305f\u3081\u306e<code>usacloud rest</code>\u30b3\u30de\u30f3\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>$ usacloud rest -h\nUsage:\n  usacloud rest [flags]\n  usacloud rest [command]\n\nAvailable Commands:\n === Basic Commands ===\n    request     \n\nFlags:\n  -d, --data string           \n  -h, --help                  help for rest\n  -X, --method string         (*required) options: [get/post/put/delete/GET/POST/PUT/DELETE] (default \"get\")\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n      --zone string\n</code></pre>"},{"location":"guides/rest/#rest_1","title":"rest\u30b3\u30de\u30f3\u30c9\u306e\u6319\u52d5","text":"<p><code>usacloud rest</code>\u30b3\u30de\u30f3\u30c9\u306fUsacloud\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3084\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u3069\u304b\u3089API\u30ad\u30fc\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u53c2\u7167\u3057\u3066API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u305f\u3081\u306e\u30b3\u30de\u30f3\u30c9\u3067\u3059\u3002 Usacloud\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308b\u62bd\u8c61\u5316\u3092\u631f\u307e\u305a\u306b\u76f4\u63a5API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3044\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3057\u307e\u3059\u3002</p> <p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 API\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u306a\u304c\u3089API\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3046\u3088\u3046\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002  </p>"},{"location":"guides/rest/#rest_2","title":"rest\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f","text":"<p>\u4ee5\u4e0b\u306e\u66f8\u5f0f\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <pre><code>$ usacloud rest [\u30aa\u30d7\u30b7\u30e7\u30f3] &lt;URL&gt;\n</code></pre> <p>\u5229\u7528\u3067\u304d\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002</p> <ul> <li><code>-d</code>/<code>--data</code>: \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3002JSON\u6587\u5b57\u5217\u307e\u305f\u306fJSON\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u6307\u5b9a (<code>curl</code>\u30b3\u30de\u30f3\u30c9\u306e<code>-d</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306a<code>@\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9</code>\u5f62\u5f0f\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093)</li> <li><code>-X</code>/<code>--method</code>: \u30ea\u30af\u30a8\u30b9\u30c8\u306eHTTP\u30e1\u30bd\u30c3\u30c9\u3002<code>GET</code>/<code>POST</code>/<code>PUT</code>/<code>DELETE</code>\u304c\u6307\u5b9a\u53ef\u80fd(\u5c0f\u6587\u5b57\u3067\u3082OK)  </li> <li><code>--zone</code>: \u30ea\u30af\u30a8\u30b9\u30c8\u5148\u30be\u30fc\u30f3\u3001\u5f15\u6570\u306b<code>https://</code>\u3067\u59cb\u307e\u308bURL\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u7121\u52b9</li> <li><code>--query</code>: \u51fa\u529b\u306b\u5bfe\u3057JMESPath or jq\u3067\u52a0\u5de5\u3059\u308b\u969b\u306e\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3002\u6587\u5b57\u5217\u307e\u305f\u306f\u30af\u30a8\u30ea\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u30d1\u30b9\u3092\u6307\u5b9a</li> <li><code>--query-driver</code>: <code>--query</code>\u306e\u51e6\u7406\u306b\u4f7f\u7528\u3059\u308b\u30c9\u30e9\u30a4\u30d0\u30fc\u3002<code>jmespath</code>/<code>jq</code>\u304c\u6307\u5b9a\u53ef\u80fd</li> </ul> <p>Note</p> <p><code>--query-driver</code>\u672a\u6307\u5b9a\u6642\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e<code>DefaultQueryDriver</code>\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 (<code>DefaultQueryDriver</code>\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024:<code>jmespath</code>)</p> <p>\u5f15\u6570\u306b\u306f\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u3067URL\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <ul> <li>\u30d1\u30bf\u30fc\u30f31: URL\u5168\u4f53\u3092\u6307\u5b9a - <code>https://secure.sakura.ad.jp/cloud/zone/is1a/api/cloud/1.1/server</code></li> <li>\u30d1\u30bf\u30fc\u30f32: \u90e8\u5206\u7684\u306b\u6307\u5b9a - <code>/server</code></li> </ul> <p>\u30d1\u30bf\u30fc\u30f32\u306e\u5834\u5408\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304b\u3089API\u30eb\u30fc\u30c8URL(\u30c7\u30d5\u30a9\u30eb\u30c8\u306f<code>https://secure.sakura.ad.jp/cloud/zone</code>)\u3084\u30be\u30fc\u30f3\u306a\u3069\u3092\u8aad\u307f\u51fa\u3057\u3066URL\u3092\u88dc\u5b8c\u3057\u307e\u3059\u3002  </p>"},{"location":"guides/rest/#_1","title":"\u5229\u7528\u4f8b","text":"<pre><code># \u7279\u5b9a\u30b5\u30fc\u30d0\u306e\u96fb\u6e90\u3092OFF\u306b\u3059\u308b\n$ export SERVER_ID=123456789012\n$ usacloud rest -X DELETE /server/$SERVER_ID/power \n</code></pre>"},{"location":"installation/start_guide/","title":"Usacloud\u5c0e\u5165\u30ac\u30a4\u30c9","text":""},{"location":"installation/start_guide/#install","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":""},{"location":"installation/start_guide/#macoslinux","title":"macOS/Linux","text":"<pre><code>curl -fsSL https://github.com/sacloud/usacloud/releases/latest/download/install.sh | bash\n</code></pre>"},{"location":"installation/start_guide/#windowschocolatey","title":"Windows(<code>chocolatey</code>)","text":"<pre><code>choco install usacloud\n</code></pre> <p>chocolatey\u306eusacloud\u30d1\u30c3\u30b1\u30fc\u30b8\u306f @223n \u3055\u3093\u306b\u3088\u3063\u3066\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"installation/start_guide/#_1","title":"\u305d\u306e\u4ed6\u306e\u5834\u5408","text":"<p>GitHub Releases\u30da\u30fc\u30b8\u304b\u3089\u4efb\u610f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5411\u3051\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\u3057\u3001\u4efb\u610f\u306e\u30d5\u30a9\u30eb\u30c0\u30fc\u5185\u306b\u914d\u7f6e\u3057\u3066\u304f\u3060\u3055\u3044\u3002 (PATH\u3092\u901a\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059)</p> <p>https://github.com/sacloud/usacloud/releases/latest/</p>"},{"location":"installation/start_guide/#docker","title":"Docker\u3092\u5229\u7528\u3059\u308b\u5834\u5408","text":"<p><code>usacloud</code>\u5b9f\u884c\u7528\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066<code>ghcr.io/sacloud/usacloud</code>\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code># Docker\u3067\u306eusacloud\u5b9f\u884c\u4f8b\ndocker run -it --rm \\\n    -e SAKURACLOUD_ACCESS_TOKEN \\\n    -e SAKURACLOUD_ACCESS_TOKEN_SECRET \\\n    -e SAKURACLOUD_ZONE \\\n    ghcr.io/sacloud/usacloud server ls\n</code></pre> <p>Warning</p> <p>v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081\u306bDockerHub\u3067<code>sacloud/usacloud</code>\u30a4\u30e1\u30fc\u30b8\u3092\u914d\u5e03\u3057\u3066\u3044\u307e\u3059\u304c\u5c06\u6765\u7684\u306b\u5ec3\u6b62\u4e88\u5b9a\u3067\u3059\u3002 <code>ghcr.io/sacloud/usacloud</code>\u306e\u5229\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p>"},{"location":"installation/start_guide/#shell_completion","title":"\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)","text":"<p><code>bash_completion</code>\u306a\u3069\u306e\u30b7\u30a7\u30eb\u88dc\u5b8c\u304c\u5229\u7528\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u306b\u51fa\u6765\u307e\u3059\u3002</p>"},{"location":"installation/start_guide/#bash","title":"Bash","text":"<pre><code># Linux\u306e\u5834\u5408\n$ usacloud completion bash &gt; /etc/bash_completion.d/usacloud\n\n# MacOS\u306e\u5834\u5408\n$ usacloud completion bash &gt; /usr/local/etc/bash_completion.d/usacloud\n</code></pre>"},{"location":"installation/start_guide/#zsh","title":"Zsh","text":"<pre><code>$ usacloud completion zsh &gt; \"${fpath[1]}/_usacloud\"\n</code></pre>"},{"location":"installation/start_guide/#fish","title":"Fish","text":"<pre><code>$ usacloud completion fish &gt; ~/.config/fish/completions/usacloud.fish\n</code></pre> <p>\u8a73\u7d30\u306fcompletion\u30b3\u30de\u30f3\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"installation/start_guide/#configuration","title":"\u8a2d\u5b9a","text":"<p><code>usacloud</code>\u306e\u5b9f\u884c\u306b\u306f\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30ad\u30fc\u306e\u53d6\u5f97/\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3044API\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: API\u30ad\u30fc\u306e\u65b0\u898f\u4f5c\u6210\u30fb\u7de8\u96c6</p>"},{"location":"installation/start_guide/#api","title":"API\u30ad\u30fc\u306e\u8a2d\u5b9a","text":"<p>API\u30ad\u30fc\u3092\u53d6\u5f97\u3057\u305f\u3089\u3001<code>usacloud config</code>\u3092\u5b9f\u884c\u3057API\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u753b\u9762\u306e\u6307\u793a\u306b\u5f93\u3044\u3001\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3(token)\u3068\u30b7\u30fc\u30af\u30ec\u30c3\u30c8(secret)\u3001\u64cd\u4f5c\u5bfe\u8c61\u306e\u30be\u30fc\u30f3\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u51fa\u529b\u5f62\u5f0f\u3092\u5165\u529b\u3057\u307e\u3059\u3002</p> <pre><code>$ usacloud config\n\n  Setting SakuraCloud API Token =&gt; \n    Enter token: [\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u5165\u529b]\n\n  Setting SakuraCloud API Secret =&gt; \n    Enter secret: [\u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u5165\u529b]\n\n  Setting SakuraCloud Zone =&gt; \n    Enter zone[is1a/is1b/tk1a/tk1b/tk1v]: [\u30be\u30fc\u30f3\u3092\u5165\u529b]\n\n  Setting Default Output Type =&gt; \n    Enter default-output-type[table/json/yaml]: [\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u51fa\u529b\u5f62\u5f0f\u3092\u5165\u529b]\n\n  Written your settings to ~/.usacloud/default/config.json\n</code></pre> <p>\u64cd\u4f5c\u5bfe\u8c61\u306e\u30be\u30fc\u30f3\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <ul> <li><code>is1a</code> : \u77f3\u72e9\u7b2c1\u30be\u30fc\u30f3</li> <li><code>is1b</code> : \u77f3\u72e9\u7b2c2\u30be\u30fc\u30f3</li> <li><code>tk1a</code> : \u6771\u4eac\u7b2c1\u30be\u30fc\u30f3</li> <li><code>tk1b</code> : \u6771\u4eac\u7b2c2\u30be\u30fc\u30f3</li> <li><code>tk1v</code> : \u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9</li> </ul> <p>Note</p> <p>\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3<code>--zones</code>\u3084\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3067<code>Zones</code>\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u8a2d\u5b9a\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u304c\u4e0a\u8a18\u3068\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Warning</p> <p><code>usacloud config</code>\u30b3\u30de\u30f3\u30c9\u3067\u5165\u529b\u3057\u305f\u5185\u5bb9\u306f\u5e73\u6587\u3067JSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f<code>~/.usacloud/&lt;\u30d5\u30a1\u30a4\u30eb\u540d&gt;/config.json</code>\u306b\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3<code>0700</code>\u3067\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002 \u53d6\u308a\u6271\u3044\u306f\u5341\u5206\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Tip</p> <p><code>usacloud config</code>\u3067\u306f\u57fa\u672c\u7684\u306a\u9805\u76ee\u306e\u8a2d\u5b9a\u306e\u307f\u304c\u884c\u3048\u307e\u3059\u3002 \u3088\u308a\u8a73\u7d30\u306a\u8a2d\u5b9a\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u751f\u6210\u3055\u308c\u305fJSON\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 JSON\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8f09\u3067\u304d\u308b\u5185\u5bb9\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"installation/start_guide/#api_1","title":"\u305d\u306e\u4ed6\u306eAPI\u30ad\u30fc\u8a2d\u5b9a\u65b9\u6cd5","text":""},{"location":"installation/start_guide/#_2","title":"\u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a","text":"<p>API\u30ad\u30fc\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>$ export SAKURACLOUD_ACCESS_TOKEN=\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\n$ export SAKURACLOUD_ACCESS_TOKEN_SECRET=\u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\n$ export SAKURACLOUD_ZONE=\u30be\u30fc\u30f3\n</code></pre>"},{"location":"installation/start_guide/#_3","title":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306e\u6307\u5b9a","text":"<p>\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002</p> <pre><code>$ usacloud --token=\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3 --secret=\u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8 --zone=\u30be\u30fc\u30f3 server ls\n</code></pre> <p>Warning</p> <p>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3<code>--token</code>/<code>--secret</code>\u3092\u5229\u7528\u3057\u305f\u5834\u5408\u3001\u30d2\u30b9\u30c8\u30ea\u30fc\u306b\u5024\u304c\u6b8b\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 \u53d6\u308a\u6271\u3044\u306f\u5341\u5206\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"installation/start_guide/#_4","title":"\u8907\u6570\u7b87\u6240\u3067\u6307\u5b9a\u3057\u305f\u5834\u5408\u306e\u512a\u5148\u9806\u4f4d","text":"<p>\u8907\u6570\u306e\u7b87\u6240\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u9806\u3067\u8aad\u307f\u8fbc\u307f\u307e\u3059(\u5f8c\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u3082\u306e\u304c\u512a\u5148)\u3002</p> <ol> <li>\u74b0\u5883\u5909\u6570\u3067\u306e\u6307\u5b9a</li> <li>\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb(<code>usacloud config</code>\u3067\u4fdd\u5b58\u3055\u308c\u308b\u3082\u306e)\u3067\u306e\u6307\u5b9a</li> <li>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306e\u6307\u5b9a</li> </ol> <p>\u4ee5\u4e0a\u3067\u8a2d\u5b9a\u7d42\u4e86\u3067\u3059\u3002\u7d9a\u3044\u3066\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306b\u9032\u3093\u3067\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"references/archive/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / archive","text":""},{"location":"references/archive/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Operation Commands<ul> <li>upload</li> <li>download</li> <li>ftp-open</li> <li>ftp-close</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> </ul> </li> </ul>"},{"location":"references/archive/#list","title":"list","text":""},{"location":"references/archive/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings    \n      --tags strings     \n      --scope string     options: [user/shared]\n      --os-type string   options: [almalinux/rockylinux/miraclelinux/centos8stream/ubuntu/debian/rancheros/k3os/...]\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#create","title":"create","text":""},{"location":"references/archive/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Archive-specific options ===\n\n      --size int                (*required when --source-file is specified)\n      --source-archive-id int   \n      --source-disk-id int      \n      --source-file string      \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"SizeGB\": 20,\n    \"SourceFile\": \"/path/to/raw/file\",\n    \"SourceDiskID\": 123456789012,\n    \"SourceArchiveID\": 123456789012,\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/archive/#read","title":"read","text":""},{"location":"references/archive/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#update","title":"update","text":""},{"location":"references/archive/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/archive/#delete","title":"delete","text":""},{"location":"references/archive/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#upload","title":"upload","text":""},{"location":"references/archive/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  upload { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Upload options ===\n\n      --source-file string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#download","title":"download","text":""},{"location":"references/archive/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  download { ID | NAME | TAG } [flags]\n\nFlags:\n\n  === Download options ===\n\n      --destination string   (aliases: --dest)\n  -f, --force                overwrite file when --destination file is already exist\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#ftp-open","title":"ftp-open","text":""},{"location":"references/archive/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  ftp-open { ID | NAME | TAG }... [flags]\n\nAliases:\n  ftp-open, open-ftp\n\nFlags:\n\n  === FTP options ===\n\n      --change-password   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#ftp-close","title":"ftp-close","text":""},{"location":"references/archive/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  ftp-close { ID | NAME | TAG }... [flags]\n\nAliases:\n  ftp-close, close-ftp\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/archive/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/archive/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait, wait-for-copy\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/auth-status/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / auth-status","text":""},{"location":"references/auth-status/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>read</li> </ul> </li> </ul>"},{"location":"references/auth-status/#read","title":"read","text":""},{"location":"references/auth-status/#usage","title":"Usage","text":"<pre><code>Usage:\n  read [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/auto-backup/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / auto-backup","text":""},{"location":"references/auto-backup/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/auto-backup/#list","title":"list","text":""},{"location":"references/auto-backup/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/auto-backup/#create","title":"create","text":""},{"location":"references/auto-backup/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Auto-Backup-specific options ===\n\n      --disk-id int          (*required) \n      --max-backup-num int   (*required) \n      --weekdays strings     (*required) options: [all/sun/mon/tue/wed/thu/fri/sat]\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/auto-backup/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"DiskID\": 123456789012,\n    \"Weekdays\": [\n        \"all | sun | mon | tue | wed | thu | fri | sat\"\n    ],\n    \"MaxNumOfArchives\": 5\n}\n</code></pre>"},{"location":"references/auto-backup/#read","title":"read","text":""},{"location":"references/auto-backup/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/auto-backup/#update","title":"update","text":""},{"location":"references/auto-backup/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Auto-Backup-specific options ===\n\n      --max-backup-num int   \n      --weekdays strings     options: [all/sun/mon/tue/wed/thu/fri/sat]\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/auto-backup/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Weekdays\": [\n        \"all | sun | mon | tue | wed | thu | fri | sat\"\n    ],\n    \"MaxNumOfArchives\": 5\n}\n</code></pre>"},{"location":"references/auto-backup/#delete","title":"delete","text":""},{"location":"references/auto-backup/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bill/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / bill","text":""},{"location":"references/bill/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>csv</li> </ul> </li> </ul>"},{"location":"references/bill/#list","title":"list","text":""},{"location":"references/bill/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Bill-specific options ===\n\n      --month int   (*required when --year is specified)\n      --year int    (*required when --month is specified)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bill/#csv","title":"csv","text":""},{"location":"references/bill/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  csv BillID [flags]\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bridge/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / bridge","text":""},{"location":"references/bridge/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Operation Commands<ul> <li>connect-switch</li> <li>disconnect-switch</li> </ul> </li> </ul>"},{"location":"references/bridge/#list","title":"list","text":""},{"location":"references/bridge/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bridge/#create","title":"create","text":""},{"location":"references/bridge/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bridge/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\"\n}\n</code></pre>"},{"location":"references/bridge/#read","title":"read","text":""},{"location":"references/bridge/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bridge/#update","title":"update","text":""},{"location":"references/bridge/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bridge/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\"\n}\n</code></pre>"},{"location":"references/bridge/#delete","title":"delete","text":""},{"location":"references/bridge/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Wait options ===\n\n      --wait-for-release               \n      --wait-for-release-timeout int   \n      --wait-for-release-tick int      \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bridge/#connect-switch","title":"connect-switch","text":""},{"location":"references/bridge/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  connect-switch { ID | NAME | TAG } [flags]\n\nAliases:\n  connect-switch, switch-connect\n\nFlags:\n\n  === Bridge-specific options ===\n\n      --switch-id int   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/bridge/#disconnect-switch","title":"disconnect-switch","text":""},{"location":"references/bridge/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  disconnect-switch { ID | NAME | TAG } [flags]\n\nAliases:\n  disconnect-switch, switch-disconnect\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / cdrom","text":""},{"location":"references/cdrom/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Operation Commands<ul> <li>upload</li> <li>download</li> <li>ftp-open</li> <li>ftp-close</li> </ul> </li> </ul>"},{"location":"references/cdrom/#list","title":"list","text":""},{"location":"references/cdrom/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --os-type string   options: [almalinux/rockylinux/miraclelinux/centos8stream/ubuntu/debian/rancheros/k3os/...]\n      --names strings    \n      --tags strings     \n      --scope string     options: [user/shared]\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#create","title":"create","text":""},{"location":"references/cdrom/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Cdrom-specific options ===\n\n      --size int             (*required when --source-file is specified) (default 5)\n      --source-file string   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"SizeGB\": 5,\n    \"SourceFile\": \"/path/to/iso/file\"\n}\n</code></pre>"},{"location":"references/cdrom/#read","title":"read","text":""},{"location":"references/cdrom/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#update","title":"update","text":""},{"location":"references/cdrom/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/cdrom/#delete","title":"delete","text":""},{"location":"references/cdrom/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Wait options ===\n\n      --wait-for-release               \n      --wait-for-release-timeout int   \n      --wait-for-release-tick int      \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#upload","title":"upload","text":""},{"location":"references/cdrom/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  upload { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Cdrom-specific options ===\n\n      --source-file string   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#download","title":"download","text":""},{"location":"references/cdrom/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  download { ID | NAME | TAG } [flags]\n\nFlags:\n\n  === Cdrom-specific options ===\n\n      --change-password      \n      --destination string   (aliases: --dest)\n  -f, --force                overwrite file when --destination file is already exist\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#ftp-open","title":"ftp-open","text":""},{"location":"references/cdrom/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  ftp-open { ID | NAME | TAG }... [flags]\n\nAliases:\n  ftp-open, open-ftp\n\nFlags:\n\n  === Cdrom-specific options ===\n\n      --change-password   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/cdrom/#ftp-close","title":"ftp-close","text":""},{"location":"references/cdrom/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  ftp-close { ID | NAME | TAG }... [flags]\n\nAliases:\n  ftp-close, close-ftp\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/certificate-authority/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / certificate-authority","text":""},{"location":"references/certificate-authority/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/certificate-authority/#list","title":"list","text":""},{"location":"references/certificate-authority/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/certificate-authority/#create","title":"create","text":""},{"location":"references/certificate-authority/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Certificate-Authority-specific options ===\n\n      --clients string              \n      --common-name string          (*required) \n      --country string              (*required) \n      --organization string         (*required) \n      --organization-unit strings   \n      --servers string              \n      --validity-period-hours int   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/certificate-authority/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Country\": \"JP\",\n    \"Organization\": \"usacloud\",\n    \"OrganizationUnit\": [\n        \"ou1\",\n        \"ou2\"\n    ],\n    \"CommonName\": \"example.usacloud.jp\",\n    \"ValidityPeriodHours\": 8760,\n    \"Clients\": [\n        {\n            \"ID\": \"\",\n            \"Country\": \"JP\",\n            \"Organization\": \"usacloud\",\n            \"OrganizationUnit\": [\n                \"ou1\",\n                \"ou2\"\n            ],\n            \"CommonName\": \"client.usacloud.jp\",\n            \"NotAfter\": \"2023-01-27T08:48:51.39852+09:00\",\n            \"IssuanceMethod\": \"url | email | csr | public_key\",\n            \"EMail\": \"example@example.com\",\n            \"CertificateSigningRequest\": \"-----BEGIN CERTIFICATE REQUEST-----\\n...\",\n            \"PublicKey\": \"-----BEGIN PUBLIC KEY-----\\n...\",\n            \"Hold\": true\n        }\n    ],\n    \"Servers\": [\n        {\n            \"ID\": \"\",\n            \"Country\": \"JP\",\n            \"Organization\": \"usacloud\",\n            \"OrganizationUnit\": [\n                \"ou1\",\n                \"ou2\"\n            ],\n            \"CommonName\": \"client.usacloud.jp\",\n            \"NotAfter\": \"2023-01-27T08:48:51.398521+09:00\",\n            \"SANs\": [\n                \"www1.usacloud.jp\",\n                \"www2.usacloud.jp\"\n            ],\n            \"CertificateSigningRequest\": \"-----BEGIN CERTIFICATE REQUEST-----\\n...\",\n            \"PublicKey\": \"-----BEGIN PUBLIC KEY-----\\n...\",\n            \"Hold\": true\n        }\n    ]\n}\n</code></pre>"},{"location":"references/certificate-authority/#read","title":"read","text":""},{"location":"references/certificate-authority/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/certificate-authority/#update","title":"update","text":""},{"location":"references/certificate-authority/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Certificate-Authority-specific options ===\n\n      --clients string   \n      --servers string   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/certificate-authority/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Clients\": [\n        {\n            \"ID\": \"\",\n            \"Country\": \"JP\",\n            \"Organization\": \"usacloud\",\n            \"OrganizationUnit\": [\n                \"ou1\",\n                \"ou2\"\n            ],\n            \"CommonName\": \"client.usacloud.jp\",\n            \"NotAfter\": \"2023-01-27T08:48:51.399064+09:00\",\n            \"IssuanceMethod\": \"url | email | csr | public_key\",\n            \"EMail\": \"example@example.com\",\n            \"CertificateSigningRequest\": \"-----BEGIN CERTIFICATE REQUEST-----\\n...\",\n            \"PublicKey\": \"-----BEGIN PUBLIC KEY-----\\n...\",\n            \"Hold\": true\n        }\n    ],\n    \"Servers\": [\n        {\n            \"ID\": \"\",\n            \"Country\": \"JP\",\n            \"Organization\": \"usacloud\",\n            \"OrganizationUnit\": [\n                \"ou1\",\n                \"ou2\"\n            ],\n            \"CommonName\": \"client.usacloud.jp\",\n            \"NotAfter\": \"2023-01-27T08:48:51.399065+09:00\",\n            \"SANs\": [\n                \"www1.usacloud.jp\",\n                \"www2.usacloud.jp\"\n            ],\n            \"CertificateSigningRequest\": \"-----BEGIN CERTIFICATE REQUEST-----\\n...\",\n            \"PublicKey\": \"-----BEGIN PUBLIC KEY-----\\n...\",\n            \"Hold\": true\n        }\n    ]\n}\n</code></pre>"},{"location":"references/certificate-authority/#delete","title":"delete","text":""},{"location":"references/certificate-authority/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/completion/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / completion","text":"<pre><code>To load completions:\n\nBash:\n\n$ source &lt;(usacloud completion bash)\n\n# To load completions for each session, execute once:\nLinux:\n  $ usacloud completion bash &gt; /etc/bash_completion.d/usacloud\nMacOS:\n  $ usacloud completion bash &gt; /usr/local/etc/bash_completion.d/usacloud\n\nZsh:\n\n# If shell completion is not already enabled in your environment you will need\n# to enable it.  You can execute the following once:\n\n$ echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n\n# To load completions for each session, execute once:\n$ usacloud completion zsh &gt; \"${fpath[1]}/_usacloud\"\n\n# You will need to start a new shell for this setup to take effect.\n\nFish:\n\n$ usacloud completion fish | source\n\n# To load completions for each session, execute once:\n$ usacloud completion fish &gt; ~/.config/fish/completions/usacloud.fish\n\nUsage:\n  usacloud completion [bash|zsh|fish|powershell]\n\nFlags:\n  -h, --help   help for completion\n</code></pre>"},{"location":"references/config/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / config","text":""},{"location":"references/config/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>current</li> <li>show</li> <li>use</li> <li>path</li> <li>create</li> <li>edit</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/config/#list","title":"list","text":""},{"location":"references/config/#usage","title":"Usage","text":"<pre><code>Usage:\n  list\n\nAliases:\n  list, ls\n</code></pre>"},{"location":"references/config/#current","title":"current","text":""},{"location":"references/config/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  current\n</code></pre>"},{"location":"references/config/#show","title":"show","text":""},{"location":"references/config/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  show [flags]\n\nFlags:\n\n  === Config-specific options ===\n\n      --name string   \n</code></pre>"},{"location":"references/config/#use","title":"use","text":""},{"location":"references/config/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  use [flags]\n\nFlags:\n\n  === Config-specific options ===\n\n      --name string   \n</code></pre>"},{"location":"references/config/#path","title":"path","text":""},{"location":"references/config/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  path [flags]\n\nFlags:\n\n  === Config-specific options ===\n\n      --name string   \n</code></pre>"},{"location":"references/config/#create","title":"create","text":""},{"location":"references/config/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Config-specific options ===\n\n      --access-token string          (aliases: --token)\n      --access-token-secret string   (aliases: --secret)\n      --default-output-type string   \n      --name string                  \n      --no-color                     \n      --use                          \n      --zone string                  \n</code></pre>"},{"location":"references/config/#edit","title":"edit","text":""},{"location":"references/config/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  edit [flags]\n\nFlags:\n\n  === Config-specific options ===\n\n      --access-token string          (aliases: --token)\n      --access-token-secret string   (aliases: --secret)\n      --default-output-type string   \n      --name string                  \n      --no-color                     \n      --use                          \n      --zone string                  \n</code></pre>"},{"location":"references/config/#delete","title":"delete","text":""},{"location":"references/config/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  delete [flags]\n\nFlags:\n\n  === Config-specific options ===\n\n      --name string   \n\n  === Input options ===\n\n  -y, --assumeyes   Assume that the answer to any question which would be asked is yes\n</code></pre>"},{"location":"references/container-registry/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / container-registry","text":""},{"location":"references/container-registry/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/container-registry/#list","title":"list","text":""},{"location":"references/container-registry/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/container-registry/#create","title":"create","text":""},{"location":"references/container-registry/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Container-Registry-specific options ===\n\n      --access-level string      (*required) options: [readwrite/readonly/none]\n      --subdomain-label string   (*required) \n      --users string             \n      --virtual-domain string    \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/container-registry/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"AccessLevel\": \"readwrite | readonly | none\",\n    \"SubDomainLabel\": \"your-sub-domain\",\n    \"VirtualDomain\": \"your-domain.example.com\",\n    \"Users\": [\n        {\n            \"UserName\": \"example-user-name\",\n            \"Password\": \"example-password\",\n            \"Permission\": \"all | readwrite | readonly\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/container-registry/#read","title":"read","text":""},{"location":"references/container-registry/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/container-registry/#update","title":"update","text":""},{"location":"references/container-registry/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Container-Registry-specific options ===\n\n      --access-level string      options: [readwrite/readonly/none]\n      --subdomain-label string   \n      --users string             \n      --virtual-domain string    \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/container-registry/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"AccessLevel\": \"readwrite | readonly | none\",\n    \"SubDomainLabel\": \"your-sub-domain\",\n    \"VirtualDomain\": \"your-domain.example.com\",\n    \"Users\": [\n        {\n            \"UserName\": \"example-user-name\",\n            \"Password\": \"example-password\",\n            \"Permission\": \"all | readwrite | readonly\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/container-registry/#delete","title":"delete","text":""},{"location":"references/container-registry/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/coupon/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / coupon","text":""},{"location":"references/coupon/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> </ul> </li> </ul>"},{"location":"references/coupon/#list","title":"list","text":""},{"location":"references/coupon/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / database","text":""},{"location":"references/database/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> <li>list-parameters</li> </ul> </li> <li>Power Management Commands<ul> <li>boot</li> <li>shutdown</li> <li>reset</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-cpu</li> <li>monitor-database</li> <li>monitor-disk</li> <li>monitor-interface</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> <li>wait-until-shutdown</li> </ul> </li> </ul>"},{"location":"references/database/#list","title":"list","text":""},{"location":"references/database/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#create","title":"create","text":""},{"location":"references/database/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Plan options ===\n\n      --database-type string   (*required) options: [postgresql/postgres/mariadb]\n      --plan string            (*required) options: [10g/30g/90g/240g/500g/1t]\n\n  === Database-specific options ===\n\n      --database-parameters strings   \n\n  === WebUI options ===\n\n      --enable-web-ui   \n\n  === Backup options ===\n\n      --enable-backup                  \n      --backup-weekdays strings        (*required when --enable-backup is specified) options: [all/sun/mon/tue/wed/thu/fri/sat]\n      --backup-start-time-hour int     \n      --backup-start-time-minute int   options: [0/15/30/45]\n\n  === Network options ===\n\n      --switch-id int          (*required) \n      --ip-address strings     (*required) (aliases: --ipaddress)\n      --netmask int            (*required) (aliases: --network-mask-len)\n      --gateway string         (aliases: --default-route)\n      --port int               \n      --source-range strings   (aliases: --source-network)\n\n  === Replication options ===\n\n      --enable-replication             \n      --replica-user-password string   (*required when --enable-replication is specified)\n\n  === User options ===\n\n      --username string   (*required) \n      --password string   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"DatabaseType\": \"postgresql | postgres | mariadb\",\n    \"PlanID\": \"10g | 30g | 90g | 240g | 500g | 1t\",\n    \"SwitchID\": 123456789012,\n    \"IPAddresses\": [\n        \"192.0.2.11\"\n    ],\n    \"NetworkMaskLen\": 24,\n    \"DefaultRoute\": \"192.0.2.1\",\n    \"Port\": 5432,\n    \"SourceNetwork\": [\n        \"192.0.2.0/24\"\n    ],\n    \"Username\": \"username\",\n    \"Password\": \"password\",\n    \"EnableReplication\": true,\n    \"ReplicaUserPassword\": \"password\",\n    \"EnableWebUI\": true,\n    \"EnableBackup\": true,\n    \"BackupWeekdays\": [\n        \"all | sun | mon | tue | wed | thu | fri | sat\"\n    ],\n    \"BackupStartTimeHour\": 1,\n    \"BackupStartTimeMinute\": 30,\n    \"DatabaseParameters\": {\n        \"max_connections\": \"150\"\n    },\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/database/#read","title":"read","text":""},{"location":"references/database/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#update","title":"update","text":""},{"location":"references/database/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Database-specific options ===\n\n      --database-parameters strings   \n\n  === WebUI options ===\n\n      --enable-web-ui   \n\n  === Backup options ===\n\n      --enable-backup                  \n      --backup-weekdays strings        options: [all/sun/mon/tue/wed/thu/fri/sat]\n      --backup-start-time-hour int     \n      --backup-start-time-minute int   \n\n  === Network options ===\n\n      --source-range strings   (aliases: --source-network)\n\n  === Replication options ===\n\n      --enable-replication             \n      --replica-user-password string   (*required when --enable-replication is specified)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"SourceNetwork\": [\n        \"192.0.2.0/24\"\n    ],\n    \"EnableReplication\": true,\n    \"ReplicaUserPassword\": \"password\",\n    \"EnableWebUI\": true,\n    \"EnableBackup\": true,\n    \"BackupWeekdays\": [\n        \"all | sun | mon | tue | wed | thu | fri | sat\"\n    ],\n    \"BackupStartTimeHour\": 1,\n    \"BackupStartTimeMinute\": 30,\n    \"DatabaseParameters\": null,\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/database/#delete","title":"delete","text":""},{"location":"references/database/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Delete options ===\n\n  -f, --force   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#list-parameters","title":"list-parameters","text":""},{"location":"references/database/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  list-parameters { ID | NAME | TAG }... [flags]\n\nAliases:\n  list-parameters, list-parameter\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#boot","title":"boot","text":""},{"location":"references/database/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  boot { ID | NAME | TAG }... [flags]\n\nAliases:\n  boot, power-on\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#shutdown","title":"shutdown","text":""},{"location":"references/database/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  shutdown, power-off\n\nFlags:\n\n  === Database-specific options ===\n\n  -f, --force-shutdown   (aliases: --force)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#reset","title":"reset","text":""},{"location":"references/database/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  reset { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#monitor-cpu","title":"monitor-cpu","text":""},{"location":"references/database/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  monitor-cpu { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#monitor-database","title":"monitor-database","text":""},{"location":"references/database/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  monitor-database { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#monitor-disk","title":"monitor-disk","text":""},{"location":"references/database/#usage_11","title":"Usage","text":"<pre><code>Usage:\n  monitor-disk { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#monitor-interface","title":"monitor-interface","text":""},{"location":"references/database/#usage_12","title":"Usage","text":"<pre><code>Usage:\n  monitor-interface { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-interface, monitor-nic\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/database/#usage_13","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait-for-boot\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/database/#wait-until-shutdown","title":"wait-until-shutdown","text":""},{"location":"references/database/#usage_14","title":"Usage","text":"<pre><code>Usage:\n  wait-until-shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-shutdown, wait-for-down\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk-plan/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / disk-plan","text":""},{"location":"references/disk-plan/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/disk-plan/#list","title":"list","text":""},{"location":"references/disk-plan/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk-plan/#read","title":"read","text":""},{"location":"references/disk-plan/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / disk","text":""},{"location":"references/disk/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Operation Commands<ul> <li>connect-to-server</li> <li>edit</li> <li>disconnect-from-server</li> <li>resize-partition</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-disk</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> </ul> </li> </ul>"},{"location":"references/disk/#list","title":"list","text":""},{"location":"references/disk/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#create","title":"create","text":""},{"location":"references/disk/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Plan options ===\n\n      --disk-plan string   (*required) options: [ssd/hdd] (default \"ssd\")\n      --size int            (default 20)\n      --connector string   (*required) options: [virtio/ide] (aliases: --connection) (default \"virtio\")\n\n  === Disk-specific options ===\n\n      --distant-from int   \n      --server-id int      \n\n  === Edit disk options ===\n\n      --edit-disk-host-name string          \n      --edit-disk-password string           \n      --edit-disk-ip-address string         \n      --edit-disk-netmask int               (aliases: --network-mask-len)\n      --edit-disk-gateway string            (aliases: --default-route)\n      --edit-disk-disable-pw-auth           \n      --edit-disk-enable-dhcp               \n      --edit-disk-change-partition-uuid     \n      --edit-disk-ssh-keys strings          \n      --edit-disk-ssh-key-ids int           \n      --edit-disk-make-ssh-keys-ephemeral   \n      --edit-disk-note-ids int              \n      --edit-disk-notes string              \n      --edit-disk-make-notes-ephemeral      \n\n  === Source options ===\n\n      --os-type string          options: [almalinux/rockylinux/miraclelinux/centos8stream/ubuntu/debian/rancheros/k3os/...]\n      --source-disk-id int      \n      --source-archive-id int   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"DiskPlan\": \"ssd | hdd\",\n    \"SizeGB\": 20,\n    \"Connection\": \"virtio | ide\",\n    \"OSType\": \"centos | centos8stream | centos7 | almalinux | rockylinux | miracle | miraclelinux | ubuntu | ubuntu2004 | ubuntu1804 | debian | debian10 | debian11 | rancheros | k3os | kusanagi | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\",\n    \"SourceDiskID\": 123456789012,\n    \"SourceArchiveID\": 123456789012,\n    \"ServerID\": 123456789012,\n    \"DistantFrom\": [\n        123456789012\n    ],\n    \"EditDisk\": {\n        \"HostName\": \"hostname\",\n        \"Password\": \"password\",\n        \"IPAddress\": \"192.0.2.11\",\n        \"NetworkMaskLen\": 24,\n        \"DefaultRoute\": \"192.0.2.1\",\n        \"DisablePWAuth\": true,\n        \"EnableDHCP\": true,\n        \"ChangePartitionUUID\": true,\n        \"SSHKeys\": [\n            \"/path/to/your/public/key\",\n            \"ssh-rsa ...\"\n        ],\n        \"SSHKeyIDs\": [\n            123456789012\n        ],\n        \"IsSSHKeysEphemeral\": true,\n        \"NoteIDs\": [\n            123456789012\n        ],\n        \"IsNotesEphemeral\": true,\n        \"Notes\": [\n            {\n                \"ID\": 123456789012,\n                \"Variables\": {\n                    \"variable1\": \"foo\",\n                    \"variable2\": \"bar\"\n                }\n            }\n        ]\n    },\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/disk/#read","title":"read","text":""},{"location":"references/disk/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#update","title":"update","text":""},{"location":"references/disk/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Plan options ===\n\n      --connector string   options: [virtio/ide] (aliases: --connection)\n\n  === Edit disk options ===\n\n      --edit-disk-host-name string          \n      --edit-disk-password string           \n      --edit-disk-ip-address string         \n      --edit-disk-netmask int               (aliases: --network-mask-len)\n      --edit-disk-gateway string            (aliases: --default-route)\n      --edit-disk-disable-pw-auth           \n      --edit-disk-enable-dhcp               \n      --edit-disk-change-partition-uuid     \n      --edit-disk-ssh-keys strings          \n      --edit-disk-ssh-key-ids int           \n      --edit-disk-make-ssh-keys-ephemeral   \n      --edit-disk-note-ids int              \n      --edit-disk-notes string              \n      --edit-disk-make-notes-ephemeral      \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Connection\": \"virtio | ide\",\n    \"EditDisk\": {\n        \"HostName\": \"hostname\",\n        \"Password\": \"password\",\n        \"IPAddress\": \"192.0.2.11\",\n        \"NetworkMaskLen\": 24,\n        \"DefaultRoute\": \"192.0.2.1\",\n        \"DisablePWAuth\": true,\n        \"EnableDHCP\": true,\n        \"ChangePartitionUUID\": true,\n        \"SSHKeys\": [\n            \"/path/to/your/public/key\",\n            \"ssh-rsa ...\"\n        ],\n        \"SSHKeyIDs\": [\n            123456789012\n        ],\n        \"IsSSHKeysEphemeral\": true,\n        \"NoteIDs\": [\n            123456789012\n        ],\n        \"IsNotesEphemeral\": true,\n        \"Notes\": [\n            {\n                \"ID\": 123456789012,\n                \"Variables\": {\n                    \"variable1\": \"foo\",\n                    \"variable2\": \"bar\"\n                }\n            }\n        ]\n    },\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/disk/#delete","title":"delete","text":""},{"location":"references/disk/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Wait options ===\n\n      --wait-for-release               \n      --wait-for-release-timeout int   \n      --wait-for-release-tick int      \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#connect-to-server","title":"connect-to-server","text":""},{"location":"references/disk/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  connect-to-server { ID | NAME | TAG } [flags]\n\nAliases:\n  connect-to-server, server-connect\n\nFlags:\n\n  === Disk-specific options ===\n\n      --server-id int   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#edit","title":"edit","text":""},{"location":"references/disk/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  edit { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Edit disk options ===\n\n      --host-name string          \n      --password string           \n      --ip-address string         \n      --netmask int               (aliases: --network-mask-len)\n      --gateway string            (aliases: --default-route)\n      --disable-pw-auth           \n      --enable-dhcp               \n      --change-partition-uuid     \n      --ssh-keys strings          \n      --ssh-key-ids int           \n      --make-ssh-keys-ephemeral   \n      --note-ids int              \n      --notes string              \n      --make-notes-ephemeral      \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#disconnect-from-server","title":"disconnect-from-server","text":""},{"location":"references/disk/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  disconnect-from-server { ID | NAME | TAG } [flags]\n\nAliases:\n  disconnect-from-server, server-disconnect\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#resize-partition","title":"resize-partition","text":""},{"location":"references/disk/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  resize-partition { ID | NAME | TAG } [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#monitor-disk","title":"monitor-disk","text":""},{"location":"references/disk/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  monitor-disk { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-disk, monitor\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/disk/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/disk/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait, wait-for-copy\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/dns/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / dns","text":""},{"location":"references/dns/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/dns/#list","title":"list","text":""},{"location":"references/dns/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/dns/#create","title":"create","text":""},{"location":"references/dns/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Dns-specific options ===\n\n      --records string   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/dns/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Records\": [\n        {\n            \"Name\": \"www\",\n            \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\",\n            \"RData\": \"192.0.2.11\",\n            \"TTL\": 300\n        },\n        {\n            \"Name\": \"@\",\n            \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\",\n            \"RData\": \"192.0.2.11\",\n            \"TTL\": 300\n        }\n    ]\n}\n</code></pre>"},{"location":"references/dns/#read","title":"read","text":""},{"location":"references/dns/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/dns/#update","title":"update","text":""},{"location":"references/dns/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Dns-specific options ===\n\n      --records string   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/dns/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Records\": [\n        {\n            \"Name\": \"www\",\n            \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\",\n            \"RData\": \"192.0.2.11\",\n            \"TTL\": 300\n        },\n        {\n            \"Name\": \"@\",\n            \"Type\": \"A | AAAA | ALIAS | CNAME | NS | MX | TXT | SRV | CAA | PTR\",\n            \"RData\": \"192.0.2.11\",\n            \"TTL\": 300\n        }\n    ]\n}\n</code></pre>"},{"location":"references/dns/#delete","title":"delete","text":""},{"location":"references/dns/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/enhanced-db/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / enhanced-db","text":""},{"location":"references/enhanced-db/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/enhanced-db/#list","title":"list","text":""},{"location":"references/enhanced-db/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/enhanced-db/#create","title":"create","text":""},{"location":"references/enhanced-db/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Enhanced-Db-specific options ===\n\n      --database-name string   (*required) \n      --password string        (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/enhanced-db/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"DatabaseName\": \"example\",\n    \"Password\": \"your-password\"\n}\n</code></pre>"},{"location":"references/enhanced-db/#read","title":"read","text":""},{"location":"references/enhanced-db/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/enhanced-db/#update","title":"update","text":""},{"location":"references/enhanced-db/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Enhanced-Db-specific options ===\n\n      --password string   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/enhanced-db/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Password\": \"your-password\"\n}\n</code></pre>"},{"location":"references/enhanced-db/#delete","title":"delete","text":""},{"location":"references/enhanced-db/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/env/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u74b0\u5883\u5909\u6570","text":"<p>\u74b0\u5883\u5909\u6570\u3067\u6307\u5b9a\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u4e00\u89a7\u3002 \u5404\u9805\u76ee\u306e\u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002  </p>"},{"location":"references/env/#_2","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u95a2\u9023","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 \u8aac\u660e - <code>SAKURACLOUD_PROFILE</code> \u5229\u7528\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u79f0 - <code>SAKURACLOUD_PROFILE_DIR</code> \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u683c\u7d0d\u5148\u30c7\u30a3\u30ec\u30af\u30c8\u30ea"},{"location":"references/env/#api","title":"API\u30ad\u30fc\u95a2\u9023","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 <code>AccessToken</code> <code>SAKURACLOUD_ACCESS_TOKEN</code> <code>AccessTokenSecret</code> <code>SAKURACLOUD_ACCESS_TOKEN_SECRET</code> <code>Zone</code> <code>SAKURACLOUD_ZONE</code> <code>Zones</code> <code>SAKURACLOUD_ZONES</code>"},{"location":"references/env/#usacloud","title":"Usacloud\u30b3\u30de\u30f3\u30c9\u52d5\u4f5c\u95a2\u9023","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 <code>ArgumentMatchMode</code> <code>SAKURACLOUD_ARGUMENT_MATCH_MODE</code> <code>DefaultOutputType</code> <code>SAKURACLOUD_DEFAULT_OUTPUT_TYPE</code> <code>DefaultQueryDriver</code> <code>SAKURACLOUD_DEFAULT_QUERY_DRIVER</code> <code>ProcessTimeoutSec</code> <code>SAKURACLOUD_PROCESS_TIMEOUT_SEC</code>"},{"location":"references/env/#api_1","title":"API\u52d5\u4f5c\u95a2\u9023","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 <code>AcceptLanguage</code> <code>SAKURACLOUD_ACCEPT_LANGUAGE</code> <code>RetryMax</code> <code>SAKURACLOUD_RETRY_MAX</code> <code>RetryWaitMax</code> <code>SAKURACLOUD_RETRY_WAIT_MAX</code> <code>RetryWaitMin</code> <code>SAKURACLOUD_RETRY_WAIT_MIN</code> <code>HTTPRequestTimeout</code> <code>SAKURACLOUD_API_REQUEST_TIMEOUT</code> <code>HTTPRequestRateLimit</code> <code>SAKURACLOUD_API_REQUEST_RATE_LIMIT</code> <code>APIRootURL</code> <code>SAKURACLOUD_API_ROOT_URL</code> <code>DefaultZone</code> <code>SAKURACLOUD_DEFAULT_ZONE</code>"},{"location":"references/env/#_3","title":"\u30c7\u30d0\u30c3\u30b0\u95a2\u9023","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u9805\u76ee\u540d \u74b0\u5883\u5909\u6570 <code>TraceMode</code> <code>SAKURACLOUD_TRACE</code> <code>FakeMode</code> <code>SAKURACLOUD_FAKE_MODE</code> <code>FakeStorePath</code> <code>SAKURACLOUD_FAKE_STORE_PATH</code>"},{"location":"references/esme/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / esme","text":""},{"location":"references/esme/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Operation Commands<ul> <li>logs</li> <li>send-message</li> </ul> </li> </ul>"},{"location":"references/esme/#list","title":"list","text":""},{"location":"references/esme/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/esme/#create","title":"create","text":""},{"location":"references/esme/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/esme/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/esme/#read","title":"read","text":""},{"location":"references/esme/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/esme/#update","title":"update","text":""},{"location":"references/esme/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/esme/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/esme/#delete","title":"delete","text":""},{"location":"references/esme/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/esme/#logs","title":"logs","text":""},{"location":"references/esme/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  logs { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/esme/#send-message","title":"send-message","text":""},{"location":"references/esme/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  send-message { ID | NAME | TAG } [flags]\n\nAliases:\n  send-message, send\n\nFlags:\n\n  === Esme-specific options ===\n\n      --destination string   (*required) (aliases: --dest)\n      --domain-name string   \n      --otp string           \n      --sender string        (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/esme/#parameter-examples_2","title":"Parameter Examples","text":"<pre><code>{\n    \"Destination\": \"81zzzzzzzzzz\",\n    \"Sender\": \"example-sender\",\n    \"DomainName\": \"www.example.com\",\n    \"OTP\": \"your-otp\"\n}\n</code></pre>"},{"location":"references/global/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3","text":"<p><code>usacloud</code>\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6307\u5b9a\u53ef\u80fd\u306a\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3002  </p> <p>Info</p> <p>\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044\u9805\u76ee\u306e\u8a2d\u5b9a\u304c\u884c\u3048\u307e\u3059\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Info</p> <p>\u4e00\u90e8\u306e\u9805\u76ee\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u8a2d\u5b9a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002  </p>"},{"location":"references/global/#_2","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u4e00\u89a7","text":"<ul> <li><code>--profile</code></li> <li><code>--token</code></li> <li><code>--secret</code></li> <li><code>--zones</code></li> <li><code>--no-color</code></li> <li><code>--trace</code></li> <li><code>--fake</code></li> <li><code>--fake-store</code></li> <li><code>--process-timeout-sec</code></li> <li><code>--argument-match-mode</code></li> <li><code>--version</code>/<code>-v</code></li> <li><code>--help</code>/<code>-h</code></li> </ul>"},{"location":"references/global/#profile","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb(<code>--profile</code>)","text":"<p>\u5229\u7528\u3059\u308b\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb(\u30b3\u30f3\u30d5\u30a3\u30b0)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30a8\u30a4\u30ea\u30a2\u30b9:<code>--config</code>) \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f<code>usacloud profile list</code>\u30b3\u30de\u30f3\u30c9\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u307b\u304b\u3001<code>usacloud profile create</code>\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u65b0\u898f\u4f5c\u6210\u3082\u53ef\u80fd\u3067\u3059\u3002</p> <p>\u901a\u5e38\u3053\u306e\u5024\u306f<code>~/.usacloud/current</code>\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570<code>SAKURACLOUD_PROFILE</code>/<code>USACLOUD_PROFILE</code>\u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e<code>--profile</code>\u306e\u6307\u5b9a\u3067\u3053\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002</p> <p>Warning</p> <p>Usacloud v0\u3068\u306e\u4e92\u63db\u6027\u7dad\u6301\u306e\u305f\u3081v1\u3067\u3082\u74b0\u5883\u5909\u6570<code>USACLOUD_PROFILE</code>\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u5ec3\u6b62\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002</p>"},{"location":"references/global/#token","title":"API\u30c8\u30fc\u30af\u30f3(<code>--token</code>)","text":"<p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u901a\u5e38\u3053\u306e\u5024\u306f<code>~/.usacloud/[current-profile-nane]/config.json</code>\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570<code>SAKURACLOUD_ACCESS_TOKEN</code>\u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e<code>--token</code>\u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"references/global/#secret","title":"API\u30b7\u30fc\u30af\u30ec\u30c3\u30c8(<code>--secret</code>)","text":"<p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u306eAPI\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</p> <p>\u901a\u5e38\u3053\u306e\u5024\u306f<code>~/.usacloud/[current-profile-nane]/config.json</code>\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 \u74b0\u5883\u5909\u6570<code>SAKURACLOUD_ACCESS_TOKEN_SECRET</code>\u3067\u306e\u6307\u5b9a\u3001\u307e\u305f\u306f\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u6642\u306e<code>--secret</code>\u306e\u6307\u5b9a\u3067\u3053\u308c\u3089\u306e\u8a2d\u5b9a\u3092\u4e0a\u66f8\u304d\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"references/global/#zones","title":"\u64cd\u4f5c\u5bfe\u8c61\u30be\u30fc\u30f3(<code>--zones</code>)","text":"<p><code>usacloud</code>\u30b3\u30de\u30f3\u30c9\u3067\u64cd\u4f5c\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u306e\u4e00\u89a7\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u3053\u3053\u3067\u306e\u6307\u5b9a\u306f\u5404\u30b3\u30de\u30f3\u30c9\u3067\u306e<code>--zone</code>\u6307\u5b9a\u3084<code>--zone=all</code>\u3092\u6307\u5b9a\u3057\u305f\u969b\u306e\u6319\u52d5\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002</p> <p>\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002</p> <p>libsacloud: types.ZoneNames</p>"},{"location":"references/global/#no_color","title":"\u30ab\u30e9\u30fc\u51fa\u529b\u306e\u7121\u52b9\u5316(<code>--no-color</code>)","text":"<p>\u7aef\u672b\u3078\u306e\u51fa\u529b\u6642\u306bANSI\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u7528\u3044\u305f\u30ab\u30e9\u30fc\u51fa\u529b\u3092\u7121\u52b9\u306b\u3057\u307e\u3059\u3002</p>"},{"location":"references/global/#fake","title":"Fake\u30c9\u30e9\u30a4\u30d0\u306e\u6709\u52b9\u5316(<code>--fake</code>)","text":"<p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u547c\u3073\u51fa\u3057\u306bFake\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u5229\u7528\u3057\u307e\u3059\u3002 \u4e3b\u306b\u30b3\u30de\u30f3\u30c9\u306e\u66f8\u5f0f\u78ba\u8a8d\u306a\u3069\u306e\u30c6\u30b9\u30c8\u7528\u9014\u3067\u5229\u7528\u3057\u307e\u3059\u3002</p> <p><code>--fake-store</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u30c0\u30df\u30fcAPI\u306e\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306f\u30a4\u30f3\u30e1\u30e2\u30ea\u3068\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"references/global/#fake_store","title":"Fake\u30c9\u30e9\u30a4\u30d0\u3067\u306eJSON\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9(<code>--fake-store</code>)","text":"<p>Fake\u30c9\u30e9\u30a4\u30d0\u30fc\u304c\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u3053\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068Fake\u30c9\u30e9\u30a4\u30d0\u30fc\u304cJSON\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"references/global/#process_timeout_sec","title":"\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8(<code>--process-timeout-sec</code>)","text":"<p><code>usacloud</code>\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u5168\u4f53\u306b\u5bfe\u3059\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u79d2\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u672a\u6307\u5b9a\u306e\u5834\u5408\u306f<code>2\u6642\u9593(7200)</code>\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"references/global/#argument_match_mode","title":"\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u306e\u6bd4\u8f03\u65b9\u6cd5(<code>--argument-match-mode</code>)","text":"<p>\u64cd\u4f5c\u5bfe\u8c61\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u306b\u304a\u3044\u3066\u30ea\u30bd\u30fc\u30b9\u540d\u3068\u5f15\u6570\u3092\u6bd4\u8f03\u3059\u308b\u65b9\u6cd5\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002</p> <ul> <li><code>partial</code>(\u30c7\u30d5\u30a9\u30eb\u30c8): \u90e8\u5206\u4e00\u81f4</li> <li><code>exact</code>: \u5b8c\u5168\u4e00\u81f4</li> </ul>"},{"location":"references/global/#trace","title":"\u30c8\u30ec\u30fc\u30b9\u51fa\u529b(<code>--trace</code>)","text":"<p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u547c\u3073\u51fa\u3057\u306e\u30c8\u30ec\u30fc\u30b9\u30ed\u30b0\u3092\u6a19\u6e96\u30a8\u30e9\u30fc\u3078\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002</p>"},{"location":"references/global/#version","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u8868\u793a(<code>--version</code> / <code>-v</code>)","text":"<p>usacloud\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"references/global/#help","title":"\u30d8\u30eb\u30d7\u8868\u793a(<code>--help</code> / <code>-h</code>)","text":"<p>\u30d8\u30eb\u30d7\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"references/gslb/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / gslb","text":""},{"location":"references/gslb/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/gslb/#list","title":"list","text":""},{"location":"references/gslb/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/gslb/#create","title":"create","text":""},{"location":"references/gslb/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Gslb-specific options ===\n\n      --servers string        \n      --sorry-server string   \n\n  === Health check options ===\n\n      --health-check-host-header string   \n      --health-check-path string          \n      --health-check-port int             \n      --health-check-protocol string      (*required) \n      --health-check-status int           (aliases: --response-code)\n      --delay-loop int                    (*required)  (default 10)\n      --weighted                          \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/gslb/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"HealthCheck\": {\n        \"Protocol\": \"http | https | ping | tcp\",\n        \"HostHeader\": \"www.example.com\",\n        \"Path\": \"/\",\n        \"ResponseCode\": 200,\n        \"Port\": 80\n    },\n    \"DelayLoop\": 10,\n    \"Weighted\": true,\n    \"SorryServer\": \"192.0.2.1\",\n    \"DestinationServers\": [\n        {\n            \"IPAddress\": \"192.0.2.11\",\n            \"Enabled\": \"True\",\n            \"Weight\": \"1\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/gslb/#read","title":"read","text":""},{"location":"references/gslb/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/gslb/#update","title":"update","text":""},{"location":"references/gslb/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Gslb-specific options ===\n\n      --servers string        \n      --sorry-server string   \n\n  === Health check options ===\n\n      --health-check-host-header string   \n      --health-check-path string          \n      --health-check-port int             \n      --health-check-protocol string      \n      --health-check-status int           (aliases: --response-code)\n      --delay-loop int                    \n      --weighted                          \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/gslb/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"HealthCheck\": {\n        \"Protocol\": \"http | https | ping | tcp\",\n        \"HostHeader\": \"www.example.com\",\n        \"Path\": \"/\",\n        \"ResponseCode\": 200,\n        \"Port\": 80\n    },\n    \"DelayLoop\": 10,\n    \"Weighted\": true,\n    \"SorryServer\": \"192.0.2.1\",\n    \"DestinationServers\": [\n        {\n            \"IPAddress\": \"192.0.2.11\",\n            \"Enabled\": \"True\",\n            \"Weight\": \"1\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/gslb/#delete","title":"delete","text":""},{"location":"references/gslb/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/icon/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / icon","text":""},{"location":"references/icon/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/icon/#list","title":"list","text":""},{"location":"references/icon/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n      --scope string    options: [user/shared]\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/icon/#create","title":"create","text":""},{"location":"references/icon/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string    (*required) \n      --tags strings   \n\n  === Icon-specific options ===\n\n      --image string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/icon/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"Image\": \"/path/to/your/icon/image.png\"\n}\n</code></pre>"},{"location":"references/icon/#read","title":"read","text":""},{"location":"references/icon/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/icon/#update","title":"update","text":""},{"location":"references/icon/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string    \n      --tags strings   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/icon/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ]\n}\n</code></pre>"},{"location":"references/icon/#delete","title":"delete","text":""},{"location":"references/icon/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/interface/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / interface","text":""},{"location":"references/interface/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/interface/#list","title":"list","text":""},{"location":"references/interface/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --mac-addresses strings         \n      --packet-filer-ids strings      \n      --packet-filter-names strings   \n      --server-ids strings            \n      --server-names strings          \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/interface/#read","title":"read","text":""},{"location":"references/interface/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet-plan/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / internet-plan","text":""},{"location":"references/internet-plan/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/internet-plan/#list","title":"list","text":""},{"location":"references/internet-plan/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet-plan/#read","title":"read","text":""},{"location":"references/internet-plan/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / internet","text":""},{"location":"references/internet/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Subnet Operation Commands<ul> <li>list-subnet</li> <li>add-subnet</li> <li>delete-subnet</li> </ul> </li> <li>IPv6 Operation Commands<ul> <li>enable-ipv6</li> <li>disable-ipv6</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-router</li> </ul> </li> </ul>"},{"location":"references/internet/#list","title":"list","text":""},{"location":"references/internet/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --switch-ids strings     \n      --switch-names strings   \n      --names strings          \n      --tags strings           \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#create","title":"create","text":""},{"location":"references/internet/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Internet-specific options ===\n\n      --band-width int        (*required) options: [100/250/500/1000/1500/2000/2500/3000/3500/4000/4500/5000/5500/6000/6500/7000/7500/8000/8500/9000/9500/10000] (aliases: --band-width-mbps) (default 100)\n      --enable-ipv6           \n      --netmask int           (*required) options: [28/27/26] (aliases: --network-mask-len) (default 28)\n      --not-found-retry int    (default 10)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"NetworkMaskLen\": 28,\n    \"BandWidthMbps\": 100,\n    \"EnableIPv6\": true,\n    \"NoWait\": false,\n    \"NotFoundRetry\": 10\n}\n</code></pre>"},{"location":"references/internet/#read","title":"read","text":""},{"location":"references/internet/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#update","title":"update","text":""},{"location":"references/internet/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Internet-specific options ===\n\n      --band-width int   options: [100/250/500/1000/1500/2000/2500/3000/3500/4000/4500/5000/5500/6000/6500/7000/7500/8000/8500/9000/9500/10000] (aliases: --band-width-mbps)\n      --enable-ipv6      \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"BandWidthMbps\": 28,\n    \"EnableIPv6\": true\n}\n</code></pre>"},{"location":"references/internet/#delete","title":"delete","text":""},{"location":"references/internet/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Delete options ===\n\n  -f, --force   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#list-subnet","title":"list-subnet","text":""},{"location":"references/internet/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  list-subnet { ID | NAME | TAG }... [flags]\n\nAliases:\n  list-subnet, subnet-list\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#add-subnet","title":"add-subnet","text":""},{"location":"references/internet/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  add-subnet { ID | NAME | TAG }... [flags]\n\nAliases:\n  add-subnet, subnet-add\n\nFlags:\n\n  === Internet-specific options ===\n\n      --netmask int       (*required) options: [28/27/26] (aliases: --network-mask-len) (default 28)\n      --next-hop string   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#delete-subnet","title":"delete-subnet","text":""},{"location":"references/internet/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  delete-subnet { ID | NAME | TAG } [flags]\n\nAliases:\n  delete-subnet, subnet-delete\n\nFlags:\n\n  === Internet-specific options ===\n\n      --subnet-id int   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#enable-ipv6","title":"enable-ipv6","text":""},{"location":"references/internet/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  enable-ipv6 { ID | NAME | TAG }... [flags]\n\nAliases:\n  enable-ipv6, ipv6-enable\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#disable-ipv6","title":"disable-ipv6","text":""},{"location":"references/internet/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  disable-ipv6 { ID | NAME | TAG }... [flags]\n\nAliases:\n  disable-ipv6, ipv6-disable\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/internet/#monitor-router","title":"monitor-router","text":""},{"location":"references/internet/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  monitor-router { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-router, monitor\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipaddress/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipaddress","text":""},{"location":"references/ipaddress/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> <li>Other Commands<ul> <li>update-host-name</li> </ul> </li> </ul>"},{"location":"references/ipaddress/#list","title":"list","text":""},{"location":"references/ipaddress/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipaddress/#read","title":"read","text":""},{"location":"references/ipaddress/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read ipv4_address [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Ipaddress-specific options ===\n\n      --ipaddress string   (*required) (aliases: --ip-address)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipaddress/#update-host-name","title":"update-host-name","text":""},{"location":"references/ipaddress/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  update-host-name { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Ipaddress-specific options ===\n\n      --host-name string     (*required) \n      --ip-address string    (*required) \n      --retry-interval int    (default 10)\n      --retry-max int         (default 30)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipaddress/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"IPAddress\": \"192.0.2.11\",\n    \"HostName\": \"www.example.com\",\n    \"RetryMax\": 30,\n    \"RetryInterval\": 10\n}\n</code></pre>"},{"location":"references/ipv6addr/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipv6addr","text":""},{"location":"references/ipv6addr/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/ipv6addr/#list","title":"list","text":""},{"location":"references/ipv6addr/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Ipv6addr-specific options ===\n\n      --hostnames strings        (aliases: --host-names)\n      --ipv6-addresses strings   \n      --switch-ids strings       \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipv6addr/#create","title":"create","text":""},{"location":"references/ipv6addr/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Ipv6addr-specific options ===\n\n      --host-name string   (*required) \n      --ipv6addr string    (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipv6addr/#read","title":"read","text":""},{"location":"references/ipv6addr/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Ipv6addr-specific options ===\n\n      --ipv6addr string   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipv6addr/#update","title":"update","text":""},{"location":"references/ipv6addr/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update [flags]\n\nFlags:\n\n  === Ipv6addr-specific options ===\n\n      --host-name string   (*required) \n      --ipv6addr string    (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipv6addr/#delete","title":"delete","text":""},{"location":"references/ipv6addr/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Ipv6addr-specific options ===\n\n      --ipv6addr string   (*required) \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipv6net/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ipv6net","text":""},{"location":"references/ipv6net/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/ipv6net/#list","title":"list","text":""},{"location":"references/ipv6net/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Ipv6net-specific options ===\n\n      --internet-ids strings     \n      --internet-names strings   \n      --switch-ids strings       \n      --switch-names strings     \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ipv6net/#read","title":"read","text":""},{"location":"references/ipv6net/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/license-info/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / license-info","text":""},{"location":"references/license-info/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/license-info/#list","title":"list","text":""},{"location":"references/license-info/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/license-info/#read","title":"read","text":""},{"location":"references/license-info/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/license/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / license","text":""},{"location":"references/license/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/license/#list","title":"list","text":""},{"location":"references/license/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/license/#create","title":"create","text":""},{"location":"references/license/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string   (*required) \n\n  === License-specific options ===\n\n      --license-info-id int   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/license/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"LicenseInfoID\": 123456789012\n}\n</code></pre>"},{"location":"references/license/#read","title":"read","text":""},{"location":"references/license/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/license/#update","title":"update","text":""},{"location":"references/license/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/license/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\"\n}\n</code></pre>"},{"location":"references/license/#delete","title":"delete","text":""},{"location":"references/license/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / load-balancer","text":""},{"location":"references/load-balancer/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Power Management Commands<ul> <li>boot</li> <li>shutdown</li> <li>reset</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-interface</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> <li>wait-until-shutdown</li> </ul> </li> </ul>"},{"location":"references/load-balancer/#list","title":"list","text":""},{"location":"references/load-balancer/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#create","title":"create","text":""},{"location":"references/load-balancer/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Plan options ===\n\n      --plan string   (*required) options: [standard/highspec] (default \"standard\")\n\n  === Network options ===\n\n      --vrid int                      \n      --switch-id int                 (*required) \n      --ip-address strings            (*required) (aliases: --ipaddress)\n      --netmask int                   (*required) (aliases: --network-mask-len)\n      --gateway string                (aliases: --default-route)\n      --port int                      \n      --virtual-ip-addresses string   (aliases: --vips)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"PlanID\": \"standard | highspec\",\n    \"VRID\": 1,\n    \"SwitchID\": 123456789012,\n    \"IPAddresses\": [\n        \"192.0.2.21\",\n        \"192.0.2.22\"\n    ],\n    \"NetworkMaskLen\": 24,\n    \"DefaultRoute\": \"192.0.2.1\",\n    \"Port\": 80,\n    \"VirtualIPAddresses\": [\n        {\n            \"VirtualIPAddress\": \"192.0.2.101\",\n            \"Port\": \"80\",\n            \"DelayLoop\": \"10\",\n            \"SorryServer\": \"192.0.2.1\",\n            \"Description\": \"example\",\n            \"Servers\": [\n                {\n                    \"IPAddress\": \"192.0.2.101\",\n                    \"Port\": \"80\",\n                    \"Enabled\": \"True\",\n                    \"HealthCheck\": {\n                        \"Protocol\": \"http | https | tcp | ping\",\n                        \"Path\": \"/\",\n                        \"ResponseCode\": \"200\",\n                        \"Retry\": \"\",\n                        \"ConnectTimeout\": \"\"\n                    }\n                }\n            ]\n        }\n    ],\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/load-balancer/#read","title":"read","text":""},{"location":"references/load-balancer/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#update","title":"update","text":""},{"location":"references/load-balancer/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Network options ===\n\n      --virtual-ip-addresses string   (aliases: --vips)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"VirtualIPAddresses\": [\n        {\n            \"VirtualIPAddress\": \"192.0.2.101\",\n            \"Port\": \"80\",\n            \"DelayLoop\": \"10\",\n            \"SorryServer\": \"192.0.2.1\",\n            \"Description\": \"example\",\n            \"Servers\": [\n                {\n                    \"IPAddress\": \"192.0.2.101\",\n                    \"Port\": \"80\",\n                    \"Enabled\": \"True\",\n                    \"HealthCheck\": {\n                        \"Protocol\": \"http | https | tcp | ping\",\n                        \"Path\": \"/\",\n                        \"ResponseCode\": \"200\",\n                        \"Retry\": \"\",\n                        \"ConnectTimeout\": \"\"\n                    }\n                }\n            ]\n        }\n    ],\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/load-balancer/#delete","title":"delete","text":""},{"location":"references/load-balancer/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Delete options ===\n\n  -f, --force   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#boot","title":"boot","text":""},{"location":"references/load-balancer/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  boot { ID | NAME | TAG }... [flags]\n\nAliases:\n  boot, power-on\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#shutdown","title":"shutdown","text":""},{"location":"references/load-balancer/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  shutdown, power-off\n\nFlags:\n\n  === Load-Balancer-specific options ===\n\n  -f, --force-shutdown   (aliases: --force)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#reset","title":"reset","text":""},{"location":"references/load-balancer/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  reset { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#monitor-interface","title":"monitor-interface","text":""},{"location":"references/load-balancer/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  monitor-interface { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-interface, monitor-nic\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/load-balancer/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait-for-boot\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/load-balancer/#wait-until-shutdown","title":"wait-until-shutdown","text":""},{"location":"references/load-balancer/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  wait-until-shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-shutdown, wait-for-down\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/local-router/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / local-router","text":""},{"location":"references/local-router/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-local-router</li> </ul> </li> <li>Other Commands<ul> <li>health</li> </ul> </li> </ul>"},{"location":"references/local-router/#list","title":"list","text":""},{"location":"references/local-router/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/local-router/#create","title":"create","text":""},{"location":"references/local-router/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Local-Router-specific options ===\n\n      --ip-addresses strings        \n      --netmask int                 (aliases: --network-mask-len)\n      --peers string                \n      --static-routes string        \n      --switch-category string      \n      --switch-code string          \n      --switch-zone-id string       \n      --virtual-ip-address string   \n      --vrid int                    \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/local-router/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Switch\": {\n        \"Code\": \"123456789012\",\n        \"Category\": \"cloud\",\n        \"ZoneID\": \"tk1a | tk1b | is1a | is1b | tk1v\"\n    },\n    \"Interface\": {\n        \"VirtualIPAddress\": \"192.0.2.101\",\n        \"IPAddress\": [\n            \"192.0.2.21\",\n            \"192.0.2.22\"\n        ],\n        \"NetworkMaskLen\": 24,\n        \"VRID\": 1\n    },\n    \"Peers\": [\n        {\n            \"ID\": 123456789012,\n            \"SecretKey\": \"*****\",\n            \"Enabled\": true,\n            \"Description\": \"example-peer\"\n        }\n    ],\n    \"StaticRoutes\": [\n        {\n            \"Prefix\": \"192.0.2.0/24\",\n            \"NextHop\": \"192.0.2.1\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/local-router/#read","title":"read","text":""},{"location":"references/local-router/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/local-router/#update","title":"update","text":""},{"location":"references/local-router/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Local-Router-specific options ===\n\n      --ip-addresses strings        \n      --netmask int                 (aliases: --network-mask-len)\n      --peers string                \n      --static-routes string        \n      --switch-category string      \n      --switch-code string          \n      --switch-zone-id string       \n      --virtual-ip-address string   \n      --vrid int                    \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/local-router/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Switch\": {\n        \"Code\": \"123456789012\",\n        \"Category\": \"cloud\",\n        \"ZoneID\": \"tk1a | tk1b | is1a | is1b | tk1v\"\n    },\n    \"Interface\": {\n        \"VirtualIPAddress\": \"192.0.2.101\",\n        \"IPAddress\": [\n            \"192.0.2.21\",\n            \"192.0.2.22\"\n        ],\n        \"NetworkMaskLen\": 24,\n        \"VRID\": 1\n    },\n    \"Peers\": [\n        {\n            \"ID\": 123456789012,\n            \"SecretKey\": \"*****\",\n            \"Enabled\": true,\n            \"Description\": \"example-peer\"\n        }\n    ],\n    \"StaticRoutes\": [\n        {\n            \"Prefix\": \"192.0.2.0/24\",\n            \"NextHop\": \"192.0.2.1\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/local-router/#delete","title":"delete","text":""},{"location":"references/local-router/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/local-router/#monitor-local-router","title":"monitor-local-router","text":""},{"location":"references/local-router/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  monitor-local-router { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-local-router, monitor\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/local-router/#health","title":"health","text":""},{"location":"references/local-router/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  health { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / mobile-gateway","text":""},{"location":"references/mobile-gateway/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Power Management Commands<ul> <li>boot</li> <li>shutdown</li> <li>reset</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-interface</li> <li>logs</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> <li>wait-until-shutdown</li> </ul> </li> </ul>"},{"location":"references/mobile-gateway/#list","title":"list","text":""},{"location":"references/mobile-gateway/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#create","title":"create","text":""},{"location":"references/mobile-gateway/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Mobile-Gateway-specific options ===\n\n      --boot-after-create                                 \n      --dns1 string                                       \n      --dns2 string                                       \n      --inter-device-communication-enabled                \n      --internet-connection-enabled                       \n      --sim-routes string                                 \n      --sims string                                       \n      --static-routes string                              \n      --traffic-config-auto-traffic-shaping               \n      --traffic-config-band-width-limit-in-kbps int       \n      --traffic-config-email-notify-enabled               \n      --traffic-config-slack-notify-enabled               \n      --traffic-config-slack-notify-webhooks-url string   \n      --traffic-config-traffic-quota-in-mb int            \n\n  === Network options ===\n\n      --private-interface-ip-address string      (*required) \n      --private-interface-network-mask-len int   \n      --private-interface-switch-id int          \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"InternetConnectionEnabled\": true,\n    \"InterDeviceCommunicationEnabled\": true,\n    \"SIMs\": [\n        {\n            \"SIMID\": 123456789012,\n            \"IPAddress\": \"192.0.2.11\"\n        }\n    ],\n    \"SIMRoutes\": [\n        {\n            \"SIMID\": 123456789012,\n            \"Prefix\": \"192.0.2.0/24\"\n        }\n    ],\n    \"StaticRoutes\": [\n        {\n            \"Prefix\": \"192.0.2.0/24\",\n            \"NextHop\": \"192.0.2.2\"\n        }\n    ],\n    \"PrivateInterface\": {\n        \"SwitchID\": 123456789012,\n        \"IPAddress\": \"192.0.2.11\",\n        \"NetworkMaskLen\": 24\n    },\n    \"DNS\": {\n        \"DNS1\": \"133.242.0.3 | 210.188.224.10 | n.n.n.n\",\n        \"DNS2\": \"133.242.0.4 | 210.188.224.11 | n.n.n.n\"\n    },\n    \"TrafficConfig\": {\n        \"TrafficQuotaInMB\": 10,\n        \"BandWidthLimitInKbps\": 128,\n        \"EmailNotifyEnabled\": true,\n        \"SlackNotifyEnabled\": true,\n        \"SlackNotifyWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\",\n        \"AutoTrafficShaping\": true\n    },\n    \"NoWait\": false,\n    \"BootAfterCreate\": true\n}\n</code></pre>"},{"location":"references/mobile-gateway/#read","title":"read","text":""},{"location":"references/mobile-gateway/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#update","title":"update","text":""},{"location":"references/mobile-gateway/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Mobile-Gateway-specific options ===\n\n      --dns1 string                                       \n      --dns2 string                                       \n      --inter-device-communication-enabled                \n      --internet-connection-enabled                       \n      --sim-routes string                                 \n      --sims string                                       \n      --static-routes string                              \n      --traffic-config-auto-traffic-shaping               \n      --traffic-config-band-width-limit-in-kbps int       \n      --traffic-config-email-notify-enabled               \n      --traffic-config-slack-notify-enabled               \n      --traffic-config-slack-notify-webhooks-url string   \n      --traffic-config-traffic-quota-in-mb int            \n\n  === Network options ===\n\n      --private-interface-ip-address string      \n      --private-interface-network-mask-len int   \n      --private-interface-switch-id int          \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"PrivateInterface\": {\n        \"SwitchID\": 123456789012,\n        \"IPAddress\": \"192.0.2.11\",\n        \"NetworkMaskLen\": 24\n    },\n    \"InternetConnectionEnabled\": true,\n    \"InterDeviceCommunicationEnabled\": true,\n    \"SIMs\": [\n        {\n            \"SIMID\": 123456789012,\n            \"IPAddress\": \"192.0.2.11\"\n        }\n    ],\n    \"SIMRoutes\": [\n        {\n            \"SIMID\": 123456789012,\n            \"Prefix\": \"192.0.2.0/24\"\n        }\n    ],\n    \"StaticRoutes\": [\n        {\n            \"Prefix\": \"192.0.2.0/24\",\n            \"NextHop\": \"192.0.2.2\"\n        }\n    ],\n    \"DNS\": {\n        \"DNS1\": \"133.242.0.3 | 210.188.224.10 | n.n.n.n\",\n        \"DNS2\": \"133.242.0.4 | 210.188.224.11 | n.n.n.n\"\n    },\n    \"TrafficConfig\": {\n        \"TrafficQuotaInMB\": 10,\n        \"BandWidthLimitInKbps\": 128,\n        \"EmailNotifyEnabled\": true,\n        \"SlackNotifyEnabled\": true,\n        \"SlackNotifyWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\",\n        \"AutoTrafficShaping\": true\n    },\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/mobile-gateway/#delete","title":"delete","text":""},{"location":"references/mobile-gateway/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Delete options ===\n\n  -f, --force   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#boot","title":"boot","text":""},{"location":"references/mobile-gateway/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  boot { ID | NAME | TAG }... [flags]\n\nAliases:\n  boot, power-on\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#shutdown","title":"shutdown","text":""},{"location":"references/mobile-gateway/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  shutdown, power-off\n\nFlags:\n\n  === Mobile-Gateway-specific options ===\n\n  -f, --force-shutdown   (aliases: --force)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#reset","title":"reset","text":""},{"location":"references/mobile-gateway/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  reset { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#monitor-interface","title":"monitor-interface","text":""},{"location":"references/mobile-gateway/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  monitor-interface { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-interface, monitor-nic\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#logs","title":"logs","text":""},{"location":"references/mobile-gateway/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  logs { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/mobile-gateway/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait-for-boot\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/mobile-gateway/#wait-until-shutdown","title":"wait-until-shutdown","text":""},{"location":"references/mobile-gateway/#usage_11","title":"Usage","text":"<pre><code>Usage:\n  wait-until-shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-shutdown, wait-for-down\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / nfs","text":""},{"location":"references/nfs/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Power Management Commands<ul> <li>boot</li> <li>shutdown</li> <li>reset</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-interface</li> <li>monitor-free-disk-size</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> <li>wait-until-shutdown</li> </ul> </li> </ul>"},{"location":"references/nfs/#list","title":"list","text":""},{"location":"references/nfs/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#create","title":"create","text":""},{"location":"references/nfs/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Plan options ===\n\n      --plan string   (*required) options: [ssd/hdd] (default \"ssd\")\n      --size int      (*required) \n\n  === Network options ===\n\n      --switch-id int        (*required) \n      --ip-address strings   (*required) (aliases: --ipaddress)\n      --netmask int          (*required) (aliases: --network-mask-len)\n      --gateway string       (aliases: --default-route)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Plan\": \"ssd | hdd\",\n    \"Size\": 20,\n    \"SwitchID\": 123456789012,\n    \"IPAddresses\": [\n        \"192.0.2.21\",\n        \"192.0.2.22\"\n    ],\n    \"NetworkMaskLen\": 24,\n    \"DefaultRoute\": \"192.0.2.1\",\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/nfs/#read","title":"read","text":""},{"location":"references/nfs/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#update","title":"update","text":""},{"location":"references/nfs/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/nfs/#delete","title":"delete","text":""},{"location":"references/nfs/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Delete options ===\n\n  -f, --force   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#boot","title":"boot","text":""},{"location":"references/nfs/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  boot { ID | NAME | TAG }... [flags]\n\nAliases:\n  boot, power-on\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#shutdown","title":"shutdown","text":""},{"location":"references/nfs/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  shutdown, power-off\n\nFlags:\n\n  === Nfs-specific options ===\n\n  -f, --force-shutdown   (aliases: --force)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#reset","title":"reset","text":""},{"location":"references/nfs/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  reset { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#monitor-interface","title":"monitor-interface","text":""},{"location":"references/nfs/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  monitor-interface { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-interface, monitor-nic\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#monitor-free-disk-size","title":"monitor-free-disk-size","text":""},{"location":"references/nfs/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  monitor-free-disk-size { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/nfs/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait-for-boot\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/nfs/#wait-until-shutdown","title":"wait-until-shutdown","text":""},{"location":"references/nfs/#usage_11","title":"Usage","text":"<pre><code>Usage:\n  wait-until-shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-shutdown, wait-for-down\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/note/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / note","text":""},{"location":"references/note/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/note/#list","title":"list","text":""},{"location":"references/note/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n      --scope string    options: [user/shared]\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/note/#create","title":"create","text":""},{"location":"references/note/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string    (*required) \n      --tags strings   \n      --icon-id int    \n\n  === Note-specific options ===\n\n      --class string     (*required) options: [shell/yaml_cloud_config] (default \"shell\")\n      --content string   (*required) (aliases: --contents, --script, --scripts)\n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/note/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Class\": \"shell | yaml_cloud_config\",\n    \"Content\": \"#!/bin/bash\\n\\n...\"\n}\n</code></pre>"},{"location":"references/note/#read","title":"read","text":""},{"location":"references/note/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/note/#update","title":"update","text":""},{"location":"references/note/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string    \n      --tags strings   \n      --icon-id int    \n\n  === Note-specific options ===\n\n      --content string   (aliases: --contents)\n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/note/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Content\": \"#!/bin/bash\\n\\n...\"\n}\n</code></pre>"},{"location":"references/note/#delete","title":"delete","text":""},{"location":"references/note/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/packet-filter/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / packet-filter","text":""},{"location":"references/packet-filter/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/packet-filter/#list","title":"list","text":""},{"location":"references/packet-filter/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/packet-filter/#create","title":"create","text":""},{"location":"references/packet-filter/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n\n  === Packet-Filter-specific options ===\n\n      --expressions string   (aliases: --rules)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/packet-filter/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Expressions\": [\n        {\n            \"Protocol\": \"http | https | tcp | udp | icmp | fragment | ip\",\n            \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n            \"SourcePort\": \"1024 | 1024-2048\",\n            \"DestinationPort\": \"1024 | 1024-2048\",\n            \"Action\": \"allow | deny\",\n            \"Description\": \"description\"\n        },\n        {\n            \"Protocol\": \"tcp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"22\",\n            \"Action\": \"allow\",\n            \"Description\": \"allow ssh\"\n        },\n        {\n            \"Protocol\": \"icmp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"tcp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"32768-61000\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"udp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"32768-61000\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"fragment\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"ip\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"\",\n            \"Action\": \"deny\",\n            \"Description\": \"\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/packet-filter/#read","title":"read","text":""},{"location":"references/packet-filter/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/packet-filter/#update","title":"update","text":""},{"location":"references/packet-filter/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n\n  === Packet-Filter-specific options ===\n\n      --expressions string   (aliases: --rules)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/packet-filter/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Expressions\": [\n        {\n            \"Protocol\": \"http | https | tcp | udp | icmp | fragment | ip\",\n            \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n            \"SourcePort\": \"1024 | 1024-2048\",\n            \"DestinationPort\": \"1024 | 1024-2048\",\n            \"Action\": \"allow | deny\",\n            \"Description\": \"description\"\n        },\n        {\n            \"Protocol\": \"tcp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"22\",\n            \"Action\": \"allow\",\n            \"Description\": \"allow ssh\"\n        },\n        {\n            \"Protocol\": \"icmp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"tcp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"32768-61000\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"udp\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"32768-61000\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"fragment\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"\",\n            \"Action\": \"allow\",\n            \"Description\": \"\"\n        },\n        {\n            \"Protocol\": \"ip\",\n            \"SourceNetwork\": \"\",\n            \"SourcePort\": \"\",\n            \"DestinationPort\": \"\",\n            \"Action\": \"deny\",\n            \"Description\": \"\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/packet-filter/#delete","title":"delete","text":""},{"location":"references/packet-filter/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Wait options ===\n\n      --wait-for-release               \n      --wait-for-release-timeout int   \n      --wait-for-release-tick int      \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/private-host-plan/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / private-host-plan","text":""},{"location":"references/private-host-plan/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/private-host-plan/#list","title":"list","text":""},{"location":"references/private-host-plan/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/private-host-plan/#read","title":"read","text":""},{"location":"references/private-host-plan/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/private-host/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / private-host","text":""},{"location":"references/private-host/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/private-host/#list","title":"list","text":""},{"location":"references/private-host/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/private-host/#create","title":"create","text":""},{"location":"references/private-host/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Private-Host-specific options ===\n\n      --class string   (*required: --class or --plan-id) options: [dynamic/ms_windows]\n      --plan-id int    (*required: --class or --plan-id)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/private-host/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Class\": \"dynamic | ms_windows\"\n}\n</code></pre>"},{"location":"references/private-host/#read","title":"read","text":""},{"location":"references/private-host/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/private-host/#update","title":"update","text":""},{"location":"references/private-host/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/private-host/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/private-host/#delete","title":"delete","text":""},{"location":"references/private-host/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Wait options ===\n\n      --wait-for-release               \n      --wait-for-release-timeout int   \n      --wait-for-release-tick int      \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/profile/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb","text":"<p>Usacloud\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u6a5f\u80fd\u306fAPI\u30ad\u30fc\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58/\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002  </p> <p>Info</p> <p>\u4e00\u90e8\u306e\u9805\u76ee\u306f\u74b0\u5883\u5909\u6570\u3067\u306e\u8a2d\u5b9a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"references/profile/#_2","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210","text":"<p><code>usacloud config</code>\u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u65b0\u898f\u4f5c\u6210\u304c\u53ef\u80fd\u3067\u3059\u3002</p> <pre><code># \u73fe\u5728\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6(\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306fdefault\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210)\n$ usacloud config\n\n# \u307e\u305f\u306f\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210(example\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210)\n$ usacloud config create example\n</code></pre>"},{"location":"references/profile/#_3","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306b\u6307\u5b9a\u53ef\u80fd\u306a\u5024","text":"<p>\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306fJSON\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u8a2d\u5b9a\u53ef\u80fd\u306a\u9805\u76ee\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002</p>"},{"location":"references/profile/#api","title":"API\u30ad\u30fc\u95a2\u9023","text":"<ul> <li><code>AccessToken</code>(string): \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3</li> <li><code>AccessTokenSecret</code>(string): \u30a2\u30af\u30bb\u30b9\u30b7\u30fc\u30af\u30ec\u30c3\u30c8</li> <li><code>Zones</code>([]string): \u5229\u7528\u53ef\u80fd\u306a\u30be\u30fc\u30f3\u3001\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5024\u304c\u5229\u7528\u3055\u308c\u308b</li> </ul> <p>libsacloud: types.ZoneNames</p>"},{"location":"references/profile/#usacloud","title":"Usacloud\u30b3\u30de\u30f3\u30c9\u52d5\u4f5c\u95a2\u9023","text":"<ul> <li><code>ArgumentMatchMode</code>(string): \u64cd\u4f5c\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3067\u306e\u30ea\u30bd\u30fc\u30b9\u540d\u3068\u5f15\u6570\u306e\u6bd4\u8f03\u65b9\u6cd5(\u6709\u52b9\u306a\u5024: <code>partial</code>(\u90e8\u5206\u4e00\u81f4)/<code>exact</code>(\u5b8c\u5168\u4e00\u81f4))</li> <li><code>DefaultOutputType</code>(string): \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30bf\u30a4\u30d7(\u6709\u52b9\u306a\u5024: <code>table</code>/<code>json</code>/<code>yaml</code>)</li> <li><code>DefaultQueryDriver</code>(string): \u5404\u30b3\u30de\u30f3\u30c9\u306e<code>--query</code>\u3092\u51e6\u7406\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c9\u30e9\u30a4\u30d0(\u6709\u52b9\u306a\u5024: <code>jmespath</code>/<code>jq</code>)</li> <li><code>NoColor</code>(bool): ANSI\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u3088\u308b\u8272\u3064\u3051\u3092\u7121\u52b9\u5316</li> <li><code>ProcessTimeoutSec</code>(int): \u30b3\u30de\u30f3\u30c9\u5168\u4f53\u306e\u5b9f\u884c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u307e\u3067\u306e\u79d2\u6570</li> </ul>"},{"location":"references/profile/#api_1","title":"API\u52d5\u4f5c\u95a2\u9023","text":"<ul> <li><code>AcceptLanguage</code>(string): \u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306eAccept-Language\u30d8\u30c3\u30c0</li> <li><code>RetryMax</code>(int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u56de\u6570</li> <li><code>RetryWaitMin</code>(int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u9593\u9694(\u6700\u5c0f) (\u5358\u4f4d:\u79d2)</li> <li><code>RetryWaitMax</code>(int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u304c423/503\u3092\u8fd4\u3057\u305f\u969b\u306e\u30ea\u30c8\u30e9\u30a4\u9593\u9694(\u6700\u5927) (\u5358\u4f4d:\u79d2)</li> <li><code>StatePollingTimeout</code>(int): \u8d77\u52d5\u5f85\u3061\u306a\u3069\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8 (\u5358\u4f4d:\u79d2)</li> <li><code>StatePollingInterval</code>(int): \u8d77\u52d5\u5f85\u3061\u306a\u3069\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u51e6\u7406\u3067\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u9593\u9694 (\u5358\u4f4d:\u79d2)</li> <li><code>HTTPRequestTimeout</code>(int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306eHTTP\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8 (\u5358\u4f4d:\u79d2)</li> <li><code>HTTPRequestRateLimit</code>(int): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306e1\u79d2\u3042\u305f\u308a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u4e0a\u9650\u6570</li> <li><code>APIRootURL</code>(string): \u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u306e\u30eb\u30fc\u30c8URL</li> <li><code>DefaultZone</code>(string): \u30b0\u30ed\u30fc\u30d0\u30eb\u30ea\u30bd\u30fc\u30b9API\u3092\u547c\u3076\u969b\u306b\u6307\u5b9a\u3059\u308b\u30be\u30fc\u30f3</li> </ul>"},{"location":"references/profile/#_4","title":"\u30c7\u30d0\u30c3\u30b0\u95a2\u9023","text":"<ul> <li><code>TraceMode</code>(string): \u7a7a\u3067\u306a\u3044\u5834\u5408\u306f\u6a19\u6e96\u30a8\u30e9\u30fc\u306bHTTP\u30c8\u30ec\u30fc\u30b9\u30ed\u30b0\u3092\u51fa\u529b</li> <li><code>FakeMode</code>(bool): \u30d5\u30a7\u30a4\u30af\u30e2\u30fc\u30c9\u306e\u6709\u52b9\u5316</li> <li><code>FakeStorePath</code>(string): \u30d5\u30a7\u30a4\u30af\u30e2\u30fc\u30c9\u3067\u306e\u30d5\u30a1\u30a4\u30eb\u30b9\u30c8\u30a2\u30d1\u30b9</li> </ul>"},{"location":"references/profile/#_5","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\u4f8b","text":"<pre><code>{\n  \"APIRootURL\": \"https://secure.sakura.ad.jp/cloud/zone\",\n  \"AcceptLanguage\": \"en-US,en;q=0.9\",\n  \"AccessToken\": \"&lt;your-access-token&gt;\",\n  \"AccessTokenSecret\": \"&lt;your-access-secret&gt;\",\n  \"ArgumentMatchMode\": \"exact\",\n  \"DefaultOutputType\": \"table\",\n  \"DefaultQueryDriver\": \"jq\",\n  \"DefaultZone\": \"is1a\",\n  \"FakeMode\": false,\n  \"FakeStorePath\": \"~/.usacloud/fake_store.json\",\n  \"HTTPRequestRateLimit\": 5,\n  \"HTTPRequestTimeout\": 300,\n  \"NoColor\": false,\n  \"ProcessTimeoutSec\": 7200,\n  \"RetryMax\": 0,\n  \"RetryWaitMax\": 64,\n  \"RetryWaitMin\": 1,\n  \"StatePollingInterval\": 0,\n  \"StatePollingTimeout\": 0,\n  \"TraceMode\": \"HTTP\",\n  \"Zone\": \"is1a\",\n  \"Zones\": [\"is1a\", \"is1b\", \"tk1a\", \"tk1b\", \"tk1v\"]\n}\n</code></pre>"},{"location":"references/proxy-lb/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / proxy-lb","text":""},{"location":"references/proxy-lb/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Operation Commands<ul> <li>health-status</li> <li>renew-lets-encrypt-cert</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-connection</li> </ul> </li> </ul>"},{"location":"references/proxy-lb/#list","title":"list","text":""},{"location":"references/proxy-lb/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/proxy-lb/#create","title":"create","text":""},{"location":"references/proxy-lb/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Proxy-Lb-specific options ===\n\n      --bind-ports string                        \n      --gzip-enabled                             \n      --health-check-delay-loop int              (*required)  (default 10)\n      --health-check-host string                 \n      --health-check-path string                  (default \"/\")\n      --health-check-protocol string             (*required)  (default \"http\")\n      --inactive-sec int                          (default 10)\n      --lets-encrypt-accept-tos                  The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/)\n      --lets-encrypt-common-name string          \n      --lets-encrypt-enabled                     \n      --lets-encrypt-subject-alt-names strings   \n      --plan string                              (*required) options: [100/500/1000/5000/10000/50000/100000/400000] (default \"100\")\n      --proxy-protocol-enabled                   \n      --region string                            (*required) options: [tk1/is1/anycast] (default \"is1\")\n      --rules string                             \n      --servers string                           \n      --sorry-server-ip-address string           (aliases: --ipaddress)\n      --sorry-server-port int                    \n      --sticky-session-enabled                   \n      --sticky-session-method string             \n      --syslog-port int                          \n      --syslog-server string                     \n      --vip-fail-over                            \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/proxy-lb/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Plan\": \"100 | 500 | 1000 | 5000 | 10000 | 50000 | 100000 | 400000\",\n    \"HealthCheck\": {\n        \"Protocol\": \"http | tcp\",\n        \"Path\": \"/healthz\",\n        \"Host\": \"www.example.com\",\n        \"DelayLoop\": 10\n    },\n    \"SorryServer\": {\n        \"IPAddress\": \"192.0.2.11\",\n        \"Port\": 80\n    },\n    \"LetsEncrypt\": {\n        \"CommonName\": \"www.example.com\",\n        \"Enabled\": true,\n        \"SubjectAltNames\": [\n            \"www1.example.com\"\n        ],\n        \"AcceptTOS\": false\n    },\n    \"StickySession\": {\n        \"Method\": \"cookie\",\n        \"Enabled\": true\n    },\n    \"Gzip\": {\n        \"Enabled\": true\n    },\n    \"ProxyProtocol\": {\n        \"Enabled\": true\n    },\n    \"Syslog\": {\n        \"Server\": \"192.0.2.11\",\n        \"Port\": 514\n    },\n    \"Timeout\": {\n        \"InactiveSec\": 10\n    },\n    \"UseVIPFailover\": true,\n    \"Region\": \"tk1 | is1 | anycast\",\n    \"BindPorts\": [\n        {\n            \"ProxyMode\": \"http | https | tcp\",\n            \"Port\": 80,\n            \"RedirectToHTTPS\": true,\n            \"SupportHTTP2\": true,\n            \"AddResponseHeader\": [\n                {\n                    \"Header\": \"Cache-Control\",\n                    \"Value\": \"public, max-age=900\"\n                }\n            ],\n            \"SSLPolicy\": \"TLS-1-2-2019-04 | TLS-1-2-2021-06 | TLS-1-3-2021-06\"\n        }\n    ],\n    \"Servers\": [\n        {\n            \"IPAddress\": \"192.0.2.11\",\n            \"Port\": 80,\n            \"ServerGroup\": \"group1\",\n            \"Enabled\": true\n        }\n    ],\n    \"Rules\": [\n        {\n            \"Host\": \"www2.example.com\",\n            \"Path\": \"/foo1\",\n            \"RequestHeaderName\": \"\",\n            \"RequestHeaderValue\": \"\",\n            \"RequestHeaderValueIgnoreCase\": false,\n            \"RequestHeaderValueNotMatch\": false,\n            \"ServerGroup\": \"group1\",\n            \"Action\": \"forward\"\n        },\n        {\n            \"Host\": \"www2.example.com\",\n            \"Path\": \"/foo2\",\n            \"RequestHeaderName\": \"\",\n            \"RequestHeaderValue\": \"\",\n            \"RequestHeaderValueIgnoreCase\": false,\n            \"RequestHeaderValueNotMatch\": false,\n            \"ServerGroup\": \"group1\",\n            \"Action\": \"redirect\",\n            \"RedirectLocation\": \"/redirect\",\n            \"RedirectStatusCode\": 301\n        },\n        {\n            \"Host\": \"www2.example.com\",\n            \"Path\": \"/foo3\",\n            \"RequestHeaderName\": \"\",\n            \"RequestHeaderValue\": \"\",\n            \"RequestHeaderValueIgnoreCase\": false,\n            \"RequestHeaderValueNotMatch\": false,\n            \"ServerGroup\": \"group1\",\n            \"Action\": \"fixed\",\n            \"FixedStatusCode\": 200,\n            \"FixedContentType\": \"text/plain\",\n            \"FixedMessageBody\": \"your-content\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/proxy-lb/#read","title":"read","text":""},{"location":"references/proxy-lb/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/proxy-lb/#update","title":"update","text":""},{"location":"references/proxy-lb/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Proxy-Lb-specific options ===\n\n      --bind-ports string                        \n      --gzip-enabled                             \n      --health-check-delay-loop int              \n      --health-check-host string                 \n      --health-check-path string                 \n      --health-check-protocol string             \n      --inactive-sec int                         \n      --lets-encrypt-accept-tos                  The flag to accept the current Let's Encrypt terms of service(see: https://letsencrypt.org/repository/)\n      --lets-encrypt-common-name string          \n      --lets-encrypt-enabled                     \n      --lets-encrypt-subject-alt-names strings   \n      --plan string                              options: [100/500/1000/5000/10000/50000/100000/400000]\n      --proxy-protocol-enabled                   \n      --rules string                             \n      --servers string                           \n      --sorry-server-ip-address string           (aliases: --ipaddress)\n      --sorry-server-port int                    \n      --sticky-session-enabled                   \n      --sticky-session-method string             \n      --syslog-port int                          \n      --syslog-server string                     \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/proxy-lb/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Plan\": \"100 | 500 | 1000 | 5000 | 10000 | 50000 | 100000 | 400000\",\n    \"HealthCheck\": {\n        \"Protocol\": \"http | tcp\",\n        \"Path\": \"/healthz\",\n        \"Host\": \"www.example.com\",\n        \"DelayLoop\": 10\n    },\n    \"SorryServer\": {\n        \"IPAddress\": \"192.0.2.11\",\n        \"Port\": 80\n    },\n    \"LetsEncrypt\": {\n        \"CommonName\": \"www.example.com\",\n        \"SubjectAltNames\": null,\n        \"Enabled\": true,\n        \"AcceptTOS\": false\n    },\n    \"StickySession\": {\n        \"Method\": \"cookie\",\n        \"Enabled\": true\n    },\n    \"Gzip\": {\n        \"Enabled\": true\n    },\n    \"ProxyProtocol\": {\n        \"Enabled\": true\n    },\n    \"Syslog\": {\n        \"Server\": \"192.0.2.11\",\n        \"Port\": 514\n    },\n    \"Timeout\": {\n        \"InactiveSec\": 10\n    },\n    \"BindPortsData\": null,\n    \"BindPorts\": [\n        {\n            \"ProxyMode\": \"http | https | tcp\",\n            \"Port\": 80,\n            \"RedirectToHTTPS\": true,\n            \"SupportHTTP2\": true,\n            \"AddResponseHeader\": [\n                {\n                    \"Header\": \"Cache-Control\",\n                    \"Value\": \"public, max-age=900\"\n                }\n            ],\n            \"SSLPolicy\": \"TLS-1-2-2019-04 | TLS-1-2-2021-06 | TLS-1-3-2021-06\"\n        }\n    ],\n    \"ServersData\": null,\n    \"Servers\": [\n        {\n            \"IPAddress\": \"192.0.2.11\",\n            \"Port\": 80,\n            \"ServerGroup\": \"group1\",\n            \"Enabled\": true\n        }\n    ],\n    \"RulesData\": null,\n    \"Rules\": [\n        {\n            \"Host\": \"www2.example.com\",\n            \"Path\": \"/foo1\",\n            \"RequestHeaderName\": \"\",\n            \"RequestHeaderValue\": \"\",\n            \"RequestHeaderValueIgnoreCase\": false,\n            \"RequestHeaderValueNotMatch\": false,\n            \"ServerGroup\": \"group1\",\n            \"Action\": \"forward\"\n        },\n        {\n            \"Host\": \"www2.example.com\",\n            \"Path\": \"/foo2\",\n            \"RequestHeaderName\": \"\",\n            \"RequestHeaderValue\": \"\",\n            \"RequestHeaderValueIgnoreCase\": false,\n            \"RequestHeaderValueNotMatch\": false,\n            \"ServerGroup\": \"group1\",\n            \"Action\": \"redirect\",\n            \"RedirectLocation\": \"/redirect\",\n            \"RedirectStatusCode\": 301\n        },\n        {\n            \"Host\": \"www2.example.com\",\n            \"Path\": \"/foo3\",\n            \"RequestHeaderName\": \"\",\n            \"RequestHeaderValue\": \"\",\n            \"RequestHeaderValueIgnoreCase\": false,\n            \"RequestHeaderValueNotMatch\": false,\n            \"ServerGroup\": \"group1\",\n            \"Action\": \"fixed\",\n            \"FixedStatusCode\": 200,\n            \"FixedContentType\": \"text/plain\",\n            \"FixedMessageBody\": \"your-content\"\n        }\n    ]\n}\n</code></pre>"},{"location":"references/proxy-lb/#delete","title":"delete","text":""},{"location":"references/proxy-lb/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/proxy-lb/#health-status","title":"health-status","text":""},{"location":"references/proxy-lb/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  health-status { ID | NAME | TAG }... [flags]\n\nAliases:\n  health-status, health\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/proxy-lb/#renew-lets-encrypt-cert","title":"renew-lets-encrypt-cert","text":""},{"location":"references/proxy-lb/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  renew-lets-encrypt-cert { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/proxy-lb/#monitor-connection","title":"monitor-connection","text":""},{"location":"references/proxy-lb/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  monitor-connection { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-connection, monitor\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/region/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / region","text":""},{"location":"references/region/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/region/#list","title":"list","text":""},{"location":"references/region/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/region/#read","title":"read","text":""},{"location":"references/region/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/rest/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / rest","text":""},{"location":"references/rest/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>request</li> </ul> </li> </ul>"},{"location":"references/rest/#request","title":"request","text":""},{"location":"references/rest/#usage","title":"Usage","text":"<pre><code>Usage:\n  request [flags]\n\nFlags:\n\n  === Rest-specific options ===\n\n  -d, --data string     \n  -X, --method string   (*required) options: [get/post/patch/put/delete/GET/POST/PATCH/PUT/DELETE] (default \"get\")\n      --zone string     \n\n  === Output options ===\n\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n</code></pre>"},{"location":"references/self/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / self","text":""},{"location":"references/self/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>id</li> </ul> </li> </ul>"},{"location":"references/self/#id","title":"id","text":""},{"location":"references/self/#usage","title":"Usage","text":"<pre><code>Usage:\n  id [flags]\n\nFlags:\n\n  === Self-specific options ===\n\n  -n, --no-new-line   \n</code></pre>"},{"location":"references/server-plan/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / server-plan","text":""},{"location":"references/server-plan/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/server-plan/#list","title":"list","text":""},{"location":"references/server-plan/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server-plan/#read","title":"read","text":""},{"location":"references/server-plan/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / server","text":""},{"location":"references/server/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Connect Commands<ul> <li>ssh</li> <li>vnc</li> <li>rdp</li> </ul> </li> <li>Power Management Commands<ul> <li>boot</li> <li>shutdown</li> <li>reset</li> <li>send-nmi</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-cpu</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> <li>wait-until-shutdown</li> </ul> </li> </ul>"},{"location":"references/server/#list","title":"list","text":""},{"location":"references/server/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#create","title":"create","text":""},{"location":"references/server/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nAliases:\n  create, build\n\nFlags:\n\n  === Common options ===\n\n      --disk-name string          \n      --name string               (*required) \n      --description string        \n      --disk-description string   \n      --disk-tags strings         \n      --tags strings              \n      --disk-icon-id int          \n      --icon-id int               \n\n  === Plan options ===\n\n      --cpu int             (*required) (aliases: --core) (default 1)\n      --memory int          (*required)  (default 1)\n      --commitment string   (*required) options: [standard/dedicatedcpu] (default \"standard\")\n      --gpu int             \n      --generation string   (*required) options: [default/g100/g200] (default \"default\")\n\n  === Server-specific options ===\n\n      --boot-after-create         \n      --cdrom-id int              (aliases: --iso-image-id)\n      --interface-driver string   (*required) options: [virtio/e1000] (default \"virtio\")\n      --private-host-id int       \n\n  === Disk options ===\n\n      --disk-connection string       options: [virtio/ide]\n      --disk-disk-plan string        options: [ssd/hdd]\n      --disk-distant-from int        \n      --disk-id int                  \n      --disk-no-wait                 \n      --disk-os-type string          options: [almalinux/rockylinux/miraclelinux/centos8stream/ubuntu/debian/rancheros/k3os/...]\n      --disk-size int                (aliases: --size-gb)\n      --disk-source-archive-id int   \n      --disk-source-disk-id int      \n      --disk-ids int                 \n      --disks string                 \n\n  === Edit disk options ===\n\n      --disk-edit-host-name string          \n      --disk-edit-password string           \n      --disk-edit-ip-address string         \n      --disk-edit-netmask int               (aliases: --network-mask-len)\n      --disk-edit-gateway string            (aliases: --default-route)\n      --disk-edit-disable-pw-auth           \n      --disk-edit-enable-dhcp               \n      --disk-edit-change-partition-uuid     \n      --disk-edit-ssh-keys strings          \n      --disk-edit-ssh-key-ids int           \n      --disk-edit-make-ssh-keys-ephemeral   \n      --disk-edit-note-ids int              \n      --disk-edit-notes string              \n      --disk-edit-make-notes-ephemeral      \n\n  === Network options ===\n\n      --network-interface-packet-filter-id int     \n      --network-interface-upstream string          options: [shared/disconnected/(switch-id)]\n      --network-interface-user-ip-address string   \n      --network-interfaces string                  \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"CPU\": 1,\n    \"Memory\": 2,\n    \"GPU\": 0,\n    \"Commitment\": \"standard | dedicatedcpu\",\n    \"Generation\": \"default | g100 | g200\",\n    \"InterfaceDriver\": \"virtio | e1000\",\n    \"BootAfterCreate\": true,\n    \"CDROMID\": 123456789012,\n    \"PrivateHostID\": 123456789012,\n    \"NetworkInterfaces\": [\n        {\n            \"Upstream\": \"shared | disconnected | (switch-id)\",\n            \"PacketFilterID\": 123456789012,\n            \"UserIPAddress\": \"192.0.2.11\"\n        }\n    ],\n    \"Disks\": [\n        {\n            \"Description\": \"\u65b0\u898f\u30c7\u30a3\u30b9\u30af\u3092\u4f5c\u6210\u3059\u308b\u4f8b\",\n            \"Tags\": [\n                \"tag1=example1\",\n                \"tag2=example2\"\n            ],\n            \"IconID\": 123456789012,\n            \"DiskPlan\": \"ssd | hdd\",\n            \"Connection\": \"virtio | ide\",\n            \"SourceDiskID\": 123456789012,\n            \"SourceArchiveID\": 123456789012,\n            \"SizeGB\": 20,\n            \"DistantFrom\": [\n                123456789012\n            ],\n            \"OSType\": \"centos | centos8stream | centos7 | almalinux | rockylinux | miracle | miraclelinux | ubuntu | ubuntu2004 | ubuntu1804 | debian | debian10 | debian11 | rancheros | k3os | kusanagi | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\",\n            \"EditDisk\": {\n                \"HostName\": \"hostname\",\n                \"Password\": \"password\",\n                \"IPAddress\": \"192.0.2.11\",\n                \"NetworkMaskLen\": 24,\n                \"DefaultRoute\": \"192.0.2.1\",\n                \"DisablePWAuth\": true,\n                \"EnableDHCP\": true,\n                \"ChangePartitionUUID\": true,\n                \"SSHKeys\": [\n                    \"/path/to/your/public/key\",\n                    \"ssh-rsa ...\"\n                ],\n                \"SSHKeyIDs\": [\n                    123456789012\n                ],\n                \"IsSSHKeysEphemeral\": true,\n                \"NoteIDs\": [\n                    123456789012\n                ],\n                \"IsNotesEphemeral\": true,\n                \"Notes\": [\n                    {\n                        \"ID\": 123456789012,\n                        \"Variables\": {\n                            \"variable1\": \"foo\",\n                            \"variable2\": \"bar\"\n                        }\n                    }\n                ]\n            },\n            \"NoWait\": true\n        },\n        {\n            \"ID\": 123456789012,\n            \"Description\": \"\u65e2\u5b58\u306e\u30c7\u30a3\u30b9\u30af\u3092\u63a5\u7d9a\u3059\u308b\u4f8b\",\n            \"EditDisk\": {},\n            \"NoWait\": false\n        }\n    ],\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/server/#read","title":"read","text":""},{"location":"references/server/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#update","title":"update","text":""},{"location":"references/server/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Plan options ===\n\n      --cpu int             (aliases: --core)\n      --memory int          \n      --commitment string   options: [standard/dedicatedcpu]\n      --gpu int             \n      --generation string   options: [default/g100/g200]\n\n  === Server-specific options ===\n\n      --cdrom-id int                (aliases: --iso-image-id)\n      --disks string                \n      --force-shutdown              \n      --interface-driver string     options: [interface_dirver]\n      --network-interfaces string   \n      --private-host-id int         \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"CPU\": 1,\n    \"Memory\": 2,\n    \"GPU\": null,\n    \"Commitment\": \"standard | dedicatedcpu\",\n    \"Generation\": \"default | g100 | g200\",\n    \"InterfaceDriver\": \"virtio | e1000\",\n    \"CDROMID\": 123456789012,\n    \"PrivateHostID\": 123456789012,\n    \"NetworkInterfaces\": [\n        {\n            \"Upstream\": \"shared | disconnected | (switch-id)\",\n            \"PacketFilterID\": 123456789012,\n            \"UserIPAddress\": \"192.0.2.11\"\n        }\n    ],\n    \"Disks\": [\n        {\n            \"Description\": \"\u65b0\u898f\u30c7\u30a3\u30b9\u30af\u3092\u4f5c\u6210\u3059\u308b\u4f8b\",\n            \"Tags\": [\n                \"tag1=example1\",\n                \"tag2=example2\"\n            ],\n            \"IconID\": 123456789012,\n            \"DiskPlan\": \"ssd | hdd\",\n            \"Connection\": \"virtio | ide\",\n            \"SourceDiskID\": 123456789012,\n            \"SourceArchiveID\": 123456789012,\n            \"SizeGB\": 20,\n            \"DistantFrom\": [\n                123456789012\n            ],\n            \"OSType\": \"centos | centos8stream | centos7 | almalinux | rockylinux | miracle | miraclelinux | ubuntu | ubuntu2004 | ubuntu1804 | debian | debian10 | debian11 | rancheros | k3os | kusanagi | windows2016 | windows2016-rds | windows2016-rds-office | windows2016-sql-web | windows2016-sql-standard | windows2016-sql-standard-all | windows2016-sql2017-standard | windows2016-sql2017-enterprise | windows2016-sql2017-standard-all | windows2019 | windows2019-rds | windows2019-rds-office2019 | windows2019-sql2017-web | windows2019-sql2019-web | windows2019-sql2017-standard | windows2019-sql2019-standard | windows2019-sql2017-enterprise | windows2019-sql2019-enterprise | windows2019-sql2017-standard-all | windows2019-sql2019-standard-all\",\n            \"EditDisk\": {\n                \"HostName\": \"hostname\",\n                \"Password\": \"password\",\n                \"IPAddress\": \"192.0.2.11\",\n                \"NetworkMaskLen\": 24,\n                \"DefaultRoute\": \"192.0.2.1\",\n                \"DisablePWAuth\": true,\n                \"EnableDHCP\": true,\n                \"ChangePartitionUUID\": true,\n                \"SSHKeys\": [\n                    \"/path/to/your/public/key\",\n                    \"ssh-rsa ...\"\n                ],\n                \"SSHKeyIDs\": [\n                    123456789012\n                ],\n                \"IsSSHKeysEphemeral\": true,\n                \"NoteIDs\": [\n                    123456789012\n                ],\n                \"IsNotesEphemeral\": true,\n                \"Notes\": [\n                    {\n                        \"ID\": 123456789012,\n                        \"Variables\": {\n                            \"variable1\": \"foo\",\n                            \"variable2\": \"bar\"\n                        }\n                    }\n                ]\n            },\n            \"NoWait\": true\n        },\n        {\n            \"ID\": 123456789012,\n            \"Description\": \"\u65e2\u5b58\u306e\u30c7\u30a3\u30b9\u30af\u3092\u63a5\u7d9a\u3059\u308b\u4f8b\",\n            \"EditDisk\": {},\n            \"NoWait\": false\n        }\n    ],\n    \"NoWait\": false,\n    \"ForceShutdown\": false\n}\n</code></pre>"},{"location":"references/server/#delete","title":"delete","text":""},{"location":"references/server/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Delete options ===\n\n  -f, --force        \n      --with-disks   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#ssh","title":"ssh","text":""},{"location":"references/server/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  ssh { ID | NAME | TAG } [flags]\n\nFlags:\n\n  === Server-specific options ===\n\n  -i, --key string         \n      --password string    (aliases: --pass-phrase)\n  -p, --port int           (*required)  (default 22)\n  -l, --user string        \n      --wait-until-ready   (aliases: --wait)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#vnc","title":"vnc","text":""},{"location":"references/server/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  vnc { ID | NAME | TAG } [flags]\n\nFlags:\n\n  === Server-specific options ===\n\n      --wait-until-ready   (aliases: --wait)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#rdp","title":"rdp","text":""},{"location":"references/server/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  rdp { ID | NAME | TAG } [flags]\n\nAliases:\n  rdp, remote-desktop\n\nFlags:\n\n  === Server-specific options ===\n\n      --port int            (default 3389)\n      --user string         (default \"Administrator\")\n      --wait-until-ready   (aliases: --wait)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#boot","title":"boot","text":""},{"location":"references/server/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  boot { ID | NAME | TAG }... [flags]\n\nAliases:\n  boot, power-on\n\nFlags:\n\n  === Server-specific options ===\n\n      --user-data string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#shutdown","title":"shutdown","text":""},{"location":"references/server/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  shutdown, power-off\n\nFlags:\n\n  === Server-specific options ===\n\n  -f, --force-shutdown   (aliases: --force)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#reset","title":"reset","text":""},{"location":"references/server/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  reset { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#send-nmi","title":"send-nmi","text":""},{"location":"references/server/#usage_11","title":"Usage","text":"<pre><code>Usage:\n  send-nmi { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#monitor-cpu","title":"monitor-cpu","text":""},{"location":"references/server/#usage_12","title":"Usage","text":"<pre><code>Usage:\n  monitor-cpu { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/server/#usage_13","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait-for-boot\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/server/#wait-until-shutdown","title":"wait-until-shutdown","text":""},{"location":"references/server/#usage_14","title":"Usage","text":"<pre><code>Usage:\n  wait-until-shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-shutdown, wait-for-down\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/service-class/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / service-class","text":""},{"location":"references/service-class/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> </ul> </li> </ul>"},{"location":"references/service-class/#list","title":"list","text":""},{"location":"references/service-class/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / sim","text":""},{"location":"references/sim/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Operation Commands<ul> <li>activate</li> <li>deactivate</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-sim</li> <li>logs</li> </ul> </li> </ul>"},{"location":"references/sim/#list","title":"list","text":""},{"location":"references/sim/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#create","title":"create","text":""},{"location":"references/sim/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Sim-specific options ===\n\n      --iccid string      (*required) \n      --passcode string   (*required) (aliases: --pass-code)\n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"ICCID\": \"your-iccid\",\n    \"PassCode\": \"your-passcode\"\n}\n</code></pre>"},{"location":"references/sim/#read","title":"read","text":""},{"location":"references/sim/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#update","title":"update","text":""},{"location":"references/sim/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/sim/#delete","title":"delete","text":""},{"location":"references/sim/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Wait options ===\n\n      --wait-for-release               \n      --wait-for-release-timeout int   \n      --wait-for-release-tick int      \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#activate","title":"activate","text":""},{"location":"references/sim/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  activate { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#deactivate","title":"deactivate","text":""},{"location":"references/sim/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  deactivate { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#monitor-sim","title":"monitor-sim","text":""},{"location":"references/sim/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  monitor-sim { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-sim, monitor\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/sim/#logs","title":"logs","text":""},{"location":"references/sim/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  logs { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/simple-monitor/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / simple-monitor","text":""},{"location":"references/simple-monitor/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> <li>Monitoring Commands<ul> <li>health</li> <li>monitor-response-time</li> </ul> </li> </ul>"},{"location":"references/simple-monitor/#list","title":"list","text":""},{"location":"references/simple-monitor/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/simple-monitor/#create","title":"create","text":""},{"location":"references/simple-monitor/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Simple-Monitor-specific options ===\n\n      --delay-loop int                             (default 60)\n      --enabled                                    (default true)\n      --health-check-basic-auth-password string   \n      --health-check-basic-auth-username string   \n      --health-check-community string             \n      --health-check-contains-string string       \n      --health-check-expected-data string         \n      --health-check-ftps string                  options: [explicit/implicit]\n      --health-check-host string                  \n      --health-check-http2                        \n      --health-check-oid string                   \n      --health-check-path string                  \n      --health-check-port int                     \n      --health-check-protocol string              (*required) options: [http/https/ping/tcp/dns/ssh/smtp/pop3/snmp/sslcertificate/ftp]\n      --health-check-q-name string                \n      --health-check-remaining-days int           \n      --health-check-sni                          \n      --health-check-snmp-version string          \n      --health-check-status int                   \n      --health-check-verify-sni                   \n      --max-check-attempts int                     (default 3)\n      --notify-email-enabled                      \n      --notify-email-html                         \n      --notify-interval int                        (default 7200)\n      --notify-slack-enabled                      \n      --retry-interval int                         (default 10)\n      --slack-webhooks-url string                 \n      --target string                             (*required) \n      --timeout int                               \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/simple-monitor/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Target\": \"www.example.com\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"DelayLoop\": 60,\n    \"MaxCheckAttempts\": 3,\n    \"RetryInterval\": 10,\n    \"Timeout\": 10,\n    \"Enabled\": true,\n    \"HealthCheck\": {\n        \"Protocol\": \"http | https | ping | tcp | dns | ssh | smtp | pop3 | snmp | sslcertificate | ftp\",\n        \"Port\": 80,\n        \"Path\": \"/healthz\",\n        \"Status\": 200,\n        \"ContainsString\": \"ok\",\n        \"SNI\": true,\n        \"Host\": \"www2.example.com\",\n        \"BasicAuthUsername\": \"username\",\n        \"BasicAuthPassword\": \"password\",\n        \"HTTP2\": true,\n        \"FTPS\": \"explicit | implicit\",\n        \"VerifySNI\": true\n    },\n    \"NotifyEmailEnabled\": true,\n    \"NotifyEmailHTML\": true,\n    \"NotifySlackEnabled\": true,\n    \"SlackWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"NotifyInterval\": 7200\n}\n</code></pre>"},{"location":"references/simple-monitor/#read","title":"read","text":""},{"location":"references/simple-monitor/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/simple-monitor/#update","title":"update","text":""},{"location":"references/simple-monitor/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Simple-Monitor-specific options ===\n\n      --delay-loop int                            \n      --enabled                                   \n      --health-check-basic-auth-password string   \n      --health-check-basic-auth-username string   \n      --health-check-community string             \n      --health-check-contains-string string       \n      --health-check-expected-data string         \n      --health-check-ftps string                  options: [explicit/implicit]\n      --health-check-host string                  \n      --health-check-http2                        \n      --health-check-oid string                   \n      --health-check-path string                  \n      --health-check-port int                     \n      --health-check-protocol string              options: [http/https/ping/tcp/dns/ssh/smtp/pop3/snmp/sslcertificate/ftp]\n      --health-check-q-name string                \n      --health-check-remaining-days int           \n      --health-check-sni                          \n      --health-check-snmp-version string          \n      --health-check-status int                   \n      --health-check-verify-sni                   \n      --max-check-attempts int                    \n      --notify-email-enabled                      \n      --notify-email-html                         \n      --notify-interval int                       \n      --notify-slack-enabled                      \n      --retry-interval int                        \n      --slack-webhooks-url string                 \n      --timeout int                               \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/simple-monitor/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"DelayLoop\": 60,\n    \"MaxCheckAttempts\": 3,\n    \"RetryInterval\": 10,\n    \"Timeout\": 10,\n    \"Enabled\": true,\n    \"HealthCheck\": {\n        \"Protocol\": \"http | https | ping | tcp | dns | ssh | smtp | pop3 | snmp | sslcertificate | ftp\",\n        \"Port\": 80,\n        \"Path\": \"/healthz\",\n        \"Status\": 200,\n        \"ContainsString\": \"ok\",\n        \"SNI\": true,\n        \"Host\": \"www2.example.com\",\n        \"BasicAuthUsername\": \"username\",\n        \"BasicAuthPassword\": \"password\",\n        \"HTTP2\": true,\n        \"FTPS\": \"explicit | implicit\",\n        \"VerifySNI\": true\n    },\n    \"NotifyEmailEnabled\": true,\n    \"NotifyEmailHTML\": true,\n    \"NotifySlackEnabled\": true,\n    \"SlackWebhooksURL\": \"https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"NotifyInterval\": 7200\n}\n</code></pre>"},{"location":"references/simple-monitor/#delete","title":"delete","text":""},{"location":"references/simple-monitor/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/simple-monitor/#health","title":"health","text":""},{"location":"references/simple-monitor/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  health { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/simple-monitor/#monitor-response-time","title":"monitor-response-time","text":""},{"location":"references/simple-monitor/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  monitor-response-time { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-response-time, monitor\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ssh-key/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / ssh-key","text":""},{"location":"references/ssh-key/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>generate</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/ssh-key/#list","title":"list","text":""},{"location":"references/ssh-key/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ssh-key/#create","title":"create","text":""},{"location":"references/ssh-key/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n\n  === Ssh-Key-specific options ===\n\n      --public-key string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ssh-key/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"PublicKey\": \"/path/to/your/public/key | ssh-rsa ...\"\n}\n</code></pre>"},{"location":"references/ssh-key/#generate","title":"generate","text":""},{"location":"references/ssh-key/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  generate [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n\n  === Ssh-Key-specific options ===\n\n      --pass-phrase string   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ssh-key/#read","title":"read","text":""},{"location":"references/ssh-key/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ssh-key/#update","title":"update","text":""},{"location":"references/ssh-key/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/ssh-key/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Name\": \"example\",\n    \"Description\": \"example\"\n}\n</code></pre>"},{"location":"references/ssh-key/#delete","title":"delete","text":""},{"location":"references/ssh-key/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/subnet/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / subnet","text":""},{"location":"references/subnet/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/subnet/#list","title":"list","text":""},{"location":"references/subnet/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/subnet/#read","title":"read","text":""},{"location":"references/subnet/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/switch/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / switch","text":""},{"location":"references/switch/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>read</li> <li>update</li> <li>delete</li> </ul> </li> </ul>"},{"location":"references/switch/#list","title":"list","text":""},{"location":"references/switch/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/switch/#create","title":"create","text":""},{"location":"references/switch/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/switch/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012\n}\n</code></pre>"},{"location":"references/switch/#read","title":"read","text":""},{"location":"references/switch/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/switch/#update","title":"update","text":""},{"location":"references/switch/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Switch-specific options ===\n\n      --display-gateway string         (aliases: --display-default-route)\n      --display-network-mask-len int   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/switch/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"NetworkMaskLen\": 24,\n    \"DefaultRoute\": \"192.0.2.1\"\n}\n</code></pre>"},{"location":"references/switch/#delete","title":"delete","text":""},{"location":"references/switch/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Wait options ===\n\n      --wait-for-release               \n      --wait-for-release-timeout int   \n      --wait-for-release-tick int      \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/update-self/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / update-self","text":"<p>GitHub API\u3067\u6700\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3001\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u305f\u3089Usacloud\u81ea\u8eab\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002  </p> <pre><code>Update Usacloud to latest-stable version\n\nUsage:\n  usacloud update-self\n\nFlags:\n  -h, --help   help for update-self\n</code></pre> <p>Info</p> <p><code>update-self</code>\u30b3\u30de\u30f3\u30c9\u304cGitHub API\u3092\u547c\u3076\u969b\u3001\u74b0\u5883\u5909\u6570<code>GITHUB_TOKEN</code>\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3001\u307e\u305f\u306f<code>gitconfig</code>\u306e<code>github.token</code>\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3089\u3092\u5229\u7528\u3057\u307e\u3059\u3002</p>"},{"location":"references/vpc-router/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / vpc-router","text":""},{"location":"references/vpc-router/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>create</li> <li>create-standard</li> <li>read</li> <li>update</li> <li>update-standard</li> <li>delete</li> </ul> </li> <li>Power Management Commands<ul> <li>boot</li> <li>shutdown</li> <li>reset</li> </ul> </li> <li>Monitoring Commands<ul> <li>monitor-cpu</li> <li>monitor-interface</li> </ul> </li> <li>Other Commands<ul> <li>wait-until-ready</li> <li>wait-until-shutdown</li> </ul> </li> </ul>"},{"location":"references/vpc-router/#list","title":"list","text":""},{"location":"references/vpc-router/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n      --tags strings    \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#create","title":"create","text":""},{"location":"references/vpc-router/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  create [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Plan options ===\n\n      --plan string   (*required) options: [premium/highspec/highspec4000] (default \"premium\")\n\n  === Vpc-Router-specific options ===\n\n      --boot-after-create             \n      --dhcp-server string            \n      --dhcp-static-mapping string    \n      --dns-forwarding string         \n      --firewall string               \n      --internet-connection-enabled   \n      --l2tp string                   \n      --port-forwarding string        \n      --pptp string                   \n      --site-to-site-vpn string       \n      --static-nat string             \n      --static-route string           \n      --syslog-host string            \n      --users string                  \n      --version int                   (*required)  (default 2)\n      --vrid int                      \n      --wireguard string              \n\n  === Network options ===\n\n      --public-network-interface-ip-addresses strings        \n      --public-network-interface-ip-aliases strings          \n      --public-network-interface-switch-id int               \n      --public-network-interface-virtual-ip-address string   \n      --private-network-interfaces string                    \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Plan\": \"premium | highspec | highspec4000\",\n    \"Version\": 2,\n    \"PublicNetworkInterface\": {\n        \"SwitchID\": 123456789012,\n        \"IPAddresses\": [\n            \"192.0.2.21\",\n            \"192.0.2.22\"\n        ],\n        \"VirtualIPAddress\": \"192.0.2.101\",\n        \"IPAliases\": [\n            \"192.0.2.102\"\n        ]\n    },\n    \"PrivateNetworkInterfaces\": [\n        {\n            \"SwitchID\": 123456789012,\n            \"IPAddresses\": [\n                \"192.168.0.11\",\n                \"192.168.0.12\"\n            ],\n            \"VirtualIPAddress\": \"192.168.0.1\",\n            \"NetworkMaskLen\": 24,\n            \"Index\": 1\n        }\n    ],\n    \"RouterSetting\": {\n        \"VRID\": 1,\n        \"InternetConnectionEnabled\": true,\n        \"StaticNAT\": [\n            {\n                \"GlobalAddress\": \"192.0.2.101\",\n                \"PrivateAddress\": \"192.168.0.1\",\n                \"Description\": \"example\"\n            }\n        ],\n        \"PortForwarding\": [\n            {\n                \"Protocol\": \"tcp | udp\",\n                \"GlobalPort\": \"22\",\n                \"PrivateAddress\": \"192.168.0.11\",\n                \"PrivatePort\": \"22\",\n                \"Description\": \"example\"\n            }\n        ],\n        \"Firewall\": [\n            {\n                \"Send\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Receive\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Index\": 0\n            }\n        ],\n        \"DHCPServer\": [\n            {\n                \"Interface\": \"eth1\",\n                \"RangeStart\": \"192.168.0.240\",\n                \"RangeStop\": \"192.168.0.244\",\n                \"DNSServers\": [\n                    \"133.242.0.3\",\n                    \"133.242.0.4\"\n                ]\n            }\n        ],\n        \"DHCPStaticMapping\": [\n            {\n                \"MACAddress\": \"9C:A3:BA:xx:xx:xx\",\n                \"IPAddress\": \"192.168.0.245\"\n            }\n        ],\n        \"DNSForwarding\": {\n            \"Interface\": \"eth1\",\n            \"DNSServers\": [\n                \"133.242.0.3\",\n                \"133.242.0.4\"\n            ]\n        },\n        \"PPTPServer\": {\n            \"RangeStart\": \"192.168.0.246\",\n            \"RangeStop\": \"192.168.0.249\"\n        },\n        \"L2TPIPsecServer\": {\n            \"RangeStart\": \"192.168.0.250\",\n            \"RangeStop\": \"192.168.0.254\",\n            \"PreSharedSecret\": \"presharedsecret\"\n        },\n        \"RemoteAccessUsers\": [\n            {\n                \"UserName\": \"username\",\n                \"Password\": \"password\"\n            }\n        ],\n        \"WireGuard\": {\n            \"IPAddress\": \"192.168.0.240/28\",\n            \"Peers\": [\n                {\n                    \"Name\": \"client1\",\n                    \"IPAddress\": \"192.168.0.242\",\n                    \"PublicKey\": \"your-key\"\n                }\n            ]\n        },\n        \"SiteToSiteIPsecVPN\": [\n            {\n                \"Peer\": \"192.0.2.1\",\n                \"PreSharedSecret\": \"presharedsecret\",\n                \"RemoteID\": \"192.0.2.1\",\n                \"Routes\": [\n                    \"10.0.0.0/8\"\n                ],\n                \"LocalPrefix\": [\n                    \"192.168.0.0/24\"\n                ]\n            }\n        ],\n        \"StaticRoute\": [\n            {\n                \"Prefix\": \"172.16.0.0/16\",\n                \"NextHop\": \"192.168.0.21\"\n            }\n        ],\n        \"SyslogHost\": \"192.168.0.1\"\n    },\n    \"BootAfterCreate\": true,\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/vpc-router/#create-standard","title":"create-standard","text":""},{"location":"references/vpc-router/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  create-standard [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          (*required) \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Vpc-Router-specific options ===\n\n      --boot-after-create                   \n      --dhcp-server string                  \n      --dhcp-static-mapping string          \n      --dns-forwarding string               \n      --firewall string                     \n      --internet-connection-enabled         \n      --l2tp string                         \n      --port-forwarding string              \n      --pptp string                         \n      --private-network-interfaces string   \n      --site-to-site-vpn string             \n      --static-nat string                   \n      --static-route string                 \n      --syslog-host string                  \n      --users string                        \n      --version int                         (*required)  (default 2)\n      --vrid int                            \n      --wireguard string                    \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"Version\": 2,\n    \"PrivateNetworkInterfacesData\": \"\",\n    \"PrivateNetworkInterfaces\": [\n        {\n            \"SwitchID\": 123456789012,\n            \"IPAddress\": \"192.168.0.11\",\n            \"NetworkMaskLen\": 24,\n            \"Index\": 1\n        }\n    ],\n    \"RouterSetting\": {\n        \"InternetConnectionEnabled\": true,\n        \"PortForwarding\": [\n            {\n                \"Protocol\": \"tcp | udp\",\n                \"GlobalPort\": \"22\",\n                \"PrivateAddress\": \"192.168.0.11\",\n                \"PrivatePort\": \"22\",\n                \"Description\": \"example\"\n            }\n        ],\n        \"Firewall\": [\n            {\n                \"Send\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Receive\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Index\": 0\n            }\n        ],\n        \"DHCPServer\": [\n            {\n                \"Interface\": \"eth1\",\n                \"RangeStart\": \"192.168.0.240\",\n                \"RangeStop\": \"192.168.0.244\",\n                \"DNSServers\": [\n                    \"133.242.0.3\",\n                    \"133.242.0.4\"\n                ]\n            }\n        ],\n        \"DHCPStaticMapping\": [\n            {\n                \"MACAddress\": \"9C:A3:BA:xx:xx:xx\",\n                \"IPAddress\": \"192.168.0.245\"\n            }\n        ],\n        \"DNSForwarding\": {\n            \"Interface\": \"eth1\",\n            \"DNSServers\": [\n                \"133.242.0.3\",\n                \"133.242.0.4\"\n            ]\n        },\n        \"PPTPServer\": {\n            \"RangeStart\": \"192.168.0.246\",\n            \"RangeStop\": \"192.168.0.249\"\n        },\n        \"L2TPIPsecServer\": {\n            \"RangeStart\": \"192.168.0.250\",\n            \"RangeStop\": \"192.168.0.254\",\n            \"PreSharedSecret\": \"presharedsecret\"\n        },\n        \"RemoteAccessUsers\": [\n            {\n                \"UserName\": \"username\",\n                \"Password\": \"password\"\n            }\n        ],\n        \"WireGuard\": {\n            \"IPAddress\": \"192.168.0.240/28\",\n            \"Peers\": [\n                {\n                    \"Name\": \"client1\",\n                    \"IPAddress\": \"192.168.0.242\",\n                    \"PublicKey\": \"your-key\"\n                }\n            ]\n        },\n        \"SiteToSiteIPsecVPN\": [\n            {\n                \"Peer\": \"192.0.2.1\",\n                \"PreSharedSecret\": \"presharedsecret\",\n                \"RemoteID\": \"192.0.2.1\",\n                \"Routes\": [\n                    \"10.0.0.0/8\"\n                ],\n                \"LocalPrefix\": [\n                    \"192.168.0.0/24\"\n                ]\n            }\n        ],\n        \"StaticRoute\": [\n            {\n                \"Prefix\": \"172.16.0.0/16\",\n                \"NextHop\": \"192.168.0.21\"\n            }\n        ],\n        \"SyslogHost\": \"192.168.0.1\"\n    },\n    \"BootAfterCreate\": true,\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/vpc-router/#read","title":"read","text":""},{"location":"references/vpc-router/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#update","title":"update","text":""},{"location":"references/vpc-router/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  update { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Vpc-Router-specific options ===\n\n      --dhcp-server string            \n      --dhcp-static-mapping string    \n      --dns-forwarding string         \n      --firewall string               \n      --internet-connection-enabled   \n      --l2tp string                   \n      --port-forwarding string        \n      --pptp string                   \n      --site-to-site-vpn string       \n      --static-nat string             \n      --static-route string           \n      --syslog-host string            \n      --users string                  \n      --wireguard string              \n\n  === Network options ===\n\n      --public-network-interface-ip-addresses strings        \n      --public-network-interface-ip-aliases strings          \n      --public-network-interface-virtual-ip-address string   \n      --private-network-interfaces string                    \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#parameter-examples_2","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"PublicNetworkInterface\": {\n        \"IPAddresses\": [\n            \"192.0.2.21\",\n            \"192.0.2.22\"\n        ],\n        \"VirtualIPAddress\": \"192.0.2.101\",\n        \"IPAliases\": [\n            \"192.0.2.102\"\n        ]\n    },\n    \"PrivateNetworkInterfaces\": [\n        {\n            \"SwitchID\": 123456789012,\n            \"IPAddresses\": [\n                \"192.168.0.11\",\n                \"192.168.0.12\"\n            ],\n            \"VirtualIPAddress\": \"192.168.0.1\",\n            \"NetworkMaskLen\": 24,\n            \"Index\": 1\n        }\n    ],\n    \"RouterSetting\": {\n        \"InternetConnectionEnabled\": true,\n        \"StaticNATData\": \"\",\n        \"StaticNAT\": [\n            {\n                \"GlobalAddress\": \"192.0.2.101\",\n                \"PrivateAddress\": \"192.168.0.1\",\n                \"Description\": \"example\"\n            }\n        ],\n        \"PortForwardingData\": \"\",\n        \"PortForwarding\": [\n            {\n                \"Protocol\": \"tcp | udp\",\n                \"GlobalPort\": \"22\",\n                \"PrivateAddress\": \"192.168.0.11\",\n                \"PrivatePort\": \"22\",\n                \"Description\": \"example\"\n            }\n        ],\n        \"FirewallData\": \"\",\n        \"Firewall\": [\n            {\n                \"Send\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Receive\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Index\": 0\n            }\n        ],\n        \"DHCPServerData\": \"\",\n        \"DHCPServer\": [\n            {\n                \"Interface\": \"eth1\",\n                \"RangeStart\": \"192.168.0.240\",\n                \"RangeStop\": \"192.168.0.244\",\n                \"DNSServers\": [\n                    \"133.242.0.3\",\n                    \"133.242.0.4\"\n                ]\n            }\n        ],\n        \"DHCPStaticMappingData\": \"\",\n        \"DHCPStaticMapping\": [\n            {\n                \"MACAddress\": \"9C:A3:BA:xx:xx:xx\",\n                \"IPAddress\": \"192.168.0.245\"\n            }\n        ],\n        \"DNSForwardingData\": \"\",\n        \"DNSForwarding\": {\n            \"Interface\": \"eth1\",\n            \"DNSServers\": [\n                \"133.242.0.3\",\n                \"133.242.0.4\"\n            ]\n        },\n        \"PPTPServerData\": \"\",\n        \"PPTPServer\": {\n            \"RangeStart\": \"192.168.0.246\",\n            \"RangeStop\": \"192.168.0.249\"\n        },\n        \"L2TPIPsecServerData\": \"\",\n        \"L2TPIPsecServer\": {\n            \"RangeStart\": \"192.168.0.250\",\n            \"RangeStop\": \"192.168.0.254\",\n            \"PreSharedSecret\": \"presharedsecret\"\n        },\n        \"WireGuardData\": \"\",\n        \"WireGuard\": {\n            \"IPAddress\": \"192.168.0.240/28\",\n            \"Peers\": [\n                {\n                    \"Name\": \"client1\",\n                    \"IPAddress\": \"192.168.0.242\",\n                    \"PublicKey\": \"your-key\"\n                }\n            ]\n        },\n        \"RemoteAccessUsersData\": \"\",\n        \"RemoteAccessUsers\": [\n            {\n                \"UserName\": \"username\",\n                \"Password\": \"password\"\n            }\n        ],\n        \"SiteToSiteIPsecVPNData\": \"\",\n        \"SiteToSiteIPsecVPN\": [\n            {\n                \"Peer\": \"192.0.2.1\",\n                \"PreSharedSecret\": \"presharedsecret\",\n                \"RemoteID\": \"192.0.2.1\",\n                \"Routes\": [\n                    \"10.0.0.0/8\"\n                ],\n                \"LocalPrefix\": [\n                    \"192.168.0.0/24\"\n                ]\n            }\n        ],\n        \"StaticRouteData\": \"\",\n        \"StaticRoute\": [\n            {\n                \"Prefix\": \"172.16.0.0/16\",\n                \"NextHop\": \"192.168.0.21\"\n            }\n        ],\n        \"SyslogHost\": \"192.168.0.1\"\n    },\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/vpc-router/#update-standard","title":"update-standard","text":""},{"location":"references/vpc-router/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  update-standard { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Common options ===\n\n      --name string          \n      --description string   \n      --tags strings         \n      --icon-id int          \n\n  === Vpc-Router-specific options ===\n\n      --dhcp-server string                  \n      --dhcp-static-mapping string          \n      --dns-forwarding string               \n      --firewall string                     \n      --internet-connection-enabled         \n      --l2tp string                         \n      --port-forwarding string              \n      --pptp string                         \n      --private-network-interfaces string   \n      --site-to-site-vpn string             \n      --static-nat string                   \n      --static-route string                 \n      --syslog-host string                  \n      --users string                        \n      --wireguard string                    \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#parameter-examples_3","title":"Parameter Examples","text":"<pre><code>{\n    \"Zone\": \"tk1a | tk1b | is1a | is1b | tk1v\",\n    \"Name\": \"example\",\n    \"Description\": \"example\",\n    \"Tags\": [\n        \"tag1=example1\",\n        \"tag2=example2\"\n    ],\n    \"IconID\": 123456789012,\n    \"PrivateNetworkInterfaces\": [\n        {\n            \"SwitchID\": 123456789012,\n            \"IPAddress\": \"192.168.0.11\",\n            \"NetworkMaskLen\": 24,\n            \"Index\": 1\n        }\n    ],\n    \"RouterSetting\": {\n        \"InternetConnectionEnabled\": true,\n        \"StaticNATData\": \"\",\n        \"StaticNAT\": null,\n        \"PortForwardingData\": \"\",\n        \"PortForwarding\": [\n            {\n                \"Protocol\": \"tcp | udp\",\n                \"GlobalPort\": \"22\",\n                \"PrivateAddress\": \"192.168.0.11\",\n                \"PrivatePort\": \"22\",\n                \"Description\": \"example\"\n            }\n        ],\n        \"FirewallData\": \"\",\n        \"Firewall\": [\n            {\n                \"Send\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Receive\": [\n                    {\n                        \"Protocol\": \"tcp | udp | icmp | ip\",\n                        \"SourceNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"SourcePort\": \"1024 | 1024-2048\",\n                        \"DestinationNetwork\": \"192.0.2.1 | 192.0.2.0/24\",\n                        \"DestinationPort\": \"1024 | 1024-2048\",\n                        \"Action\": \"allow | deny\",\n                        \"Logging\": \"True\",\n                        \"Description\": \"example\"\n                    }\n                ],\n                \"Index\": 0\n            }\n        ],\n        \"DHCPServerData\": \"\",\n        \"DHCPServer\": [\n            {\n                \"Interface\": \"eth1\",\n                \"RangeStart\": \"192.168.0.240\",\n                \"RangeStop\": \"192.168.0.244\",\n                \"DNSServers\": [\n                    \"133.242.0.3\",\n                    \"133.242.0.4\"\n                ]\n            }\n        ],\n        \"DHCPStaticMappingData\": \"\",\n        \"DHCPStaticMapping\": [\n            {\n                \"MACAddress\": \"9C:A3:BA:xx:xx:xx\",\n                \"IPAddress\": \"192.168.0.245\"\n            }\n        ],\n        \"DNSForwardingData\": \"\",\n        \"DNSForwarding\": {\n            \"Interface\": \"eth1\",\n            \"DNSServers\": [\n                \"133.242.0.3\",\n                \"133.242.0.4\"\n            ]\n        },\n        \"PPTPServerData\": \"\",\n        \"PPTPServer\": {\n            \"RangeStart\": \"192.168.0.246\",\n            \"RangeStop\": \"192.168.0.249\"\n        },\n        \"L2TPIPsecServerData\": \"\",\n        \"L2TPIPsecServer\": {\n            \"RangeStart\": \"192.168.0.250\",\n            \"RangeStop\": \"192.168.0.254\",\n            \"PreSharedSecret\": \"presharedsecret\"\n        },\n        \"WireGuardData\": \"\",\n        \"WireGuard\": {\n            \"IPAddress\": \"192.168.0.240/28\",\n            \"Peers\": [\n                {\n                    \"Name\": \"client1\",\n                    \"IPAddress\": \"192.168.0.242\",\n                    \"PublicKey\": \"your-key\"\n                }\n            ]\n        },\n        \"RemoteAccessUsersData\": \"\",\n        \"RemoteAccessUsers\": [\n            {\n                \"UserName\": \"username\",\n                \"Password\": \"password\"\n            }\n        ],\n        \"SiteToSiteIPsecVPNData\": \"\",\n        \"SiteToSiteIPsecVPN\": [\n            {\n                \"Peer\": \"192.0.2.1\",\n                \"PreSharedSecret\": \"presharedsecret\",\n                \"RemoteID\": \"192.0.2.1\",\n                \"Routes\": [\n                    \"10.0.0.0/8\"\n                ],\n                \"LocalPrefix\": [\n                    \"192.168.0.0/24\"\n                ]\n            }\n        ],\n        \"StaticRouteData\": \"\",\n        \"StaticRoute\": [\n            {\n                \"Prefix\": \"172.16.0.0/16\",\n                \"NextHop\": \"192.168.0.21\"\n            }\n        ],\n        \"SyslogHost\": \"192.168.0.1\"\n    },\n    \"NoWait\": false\n}\n</code></pre>"},{"location":"references/vpc-router/#delete","title":"delete","text":""},{"location":"references/vpc-router/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  delete { ID | NAME | TAG }... [flags]\n\nAliases:\n  delete, rm\n\nFlags:\n\n  === Delete options ===\n\n  -f, --force   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Error handling options ===\n\n      --fail-if-not-found   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#boot","title":"boot","text":""},{"location":"references/vpc-router/#usage_7","title":"Usage","text":"<pre><code>Usage:\n  boot { ID | NAME | TAG }... [flags]\n\nAliases:\n  boot, power-on\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#shutdown","title":"shutdown","text":""},{"location":"references/vpc-router/#usage_8","title":"Usage","text":"<pre><code>Usage:\n  shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  shutdown, power-off\n\nFlags:\n\n  === Vpc-Router-specific options ===\n\n  -f, --force-shutdown   (aliases: --force)\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Wait options ===\n\n      --no-wait   \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#reset","title":"reset","text":""},{"location":"references/vpc-router/#usage_9","title":"Usage","text":"<pre><code>Usage:\n  reset { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#monitor-cpu","title":"monitor-cpu","text":""},{"location":"references/vpc-router/#usage_10","title":"Usage","text":"<pre><code>Usage:\n  monitor-cpu { ID | NAME | TAG }... [flags]\n\nFlags:\n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#monitor-interface","title":"monitor-interface","text":""},{"location":"references/vpc-router/#usage_11","title":"Usage","text":"<pre><code>Usage:\n  monitor-interface { ID | NAME | TAG }... [flags]\n\nAliases:\n  monitor-interface, monitor-nic\n\nFlags:\n\n  === Vpc-Router-specific options ===\n\n      --index int   \n\n  === Monitor options ===\n\n      --end string     \n      --start string   \n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#wait-until-ready","title":"wait-until-ready","text":""},{"location":"references/vpc-router/#usage_12","title":"Usage","text":"<pre><code>Usage:\n  wait-until-ready { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-ready, wait-for-boot\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/vpc-router/#wait-until-shutdown","title":"wait-until-shutdown","text":""},{"location":"references/vpc-router/#usage_13","title":"Usage","text":"<pre><code>Usage:\n  wait-until-shutdown { ID | NAME | TAG }... [flags]\n\nAliases:\n  wait-until-shutdown, wait-for-down\n\nFlags:\n\n  === Zone options ===\n\n      --zone string   (*required) \n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/web-accelerator/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / web-accelerator","text":""},{"location":"references/web-accelerator/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> <li>Certificate Management Commands<ul> <li>read-certificate</li> <li>create-certificate</li> <li>update-certificate</li> </ul> </li> <li>Cache Management Commands<ul> <li>delete-cache</li> <li>delete-cache-all</li> </ul> </li> </ul>"},{"location":"references/web-accelerator/#list","title":"list","text":""},{"location":"references/web-accelerator/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/web-accelerator/#read","title":"read","text":""},{"location":"references/web-accelerator/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/web-accelerator/#read-certificate","title":"read-certificate","text":""},{"location":"references/web-accelerator/#usage_2","title":"Usage","text":"<pre><code>Usage:\n  read-certificate { ID | NAME | TAG } [flags]\n\nAliases:\n  read-certificate, certificate-read, cert-read\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/web-accelerator/#create-certificate","title":"create-certificate","text":""},{"location":"references/web-accelerator/#usage_3","title":"Usage","text":"<pre><code>Usage:\n  create-certificate { ID | NAME | TAG } [flags]\n\nAliases:\n  create-certificate, certificate-create, cert-create\n\nFlags:\n\n  === Web-Accelerator-specific options ===\n\n      --certificate-chain string   (*required) \n      --key string                 (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/web-accelerator/#parameter-examples","title":"Parameter Examples","text":"<pre><code>{\n    \"CertificateChain\": \"/path/to/your/certificate/chain | -----BEGIN CERTIFICATE-----\\n...\",\n    \"Key\": \"/path/to/your/private-key | -----BEGIN RSA PRIVATE KEY-----\\n...\"\n}\n</code></pre>"},{"location":"references/web-accelerator/#update-certificate","title":"update-certificate","text":""},{"location":"references/web-accelerator/#usage_4","title":"Usage","text":"<pre><code>Usage:\n  update-certificate { ID | NAME | TAG } [flags]\n\nAliases:\n  update-certificate, certificate-update, cert-update\n\nFlags:\n\n  === Web-Accelerator-specific options ===\n\n      --certificate-chain string   (*required) \n      --key string                 \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/web-accelerator/#parameter-examples_1","title":"Parameter Examples","text":"<pre><code>{\n    \"CertificateChain\": \"/path/to/your/certificate/chain | -----BEGIN CERTIFICATE-----\\n...\",\n    \"Key\": \"/path/to/your/private-key | -----BEGIN RSA PRIVATE KEY-----\\n...\"\n}\n</code></pre>"},{"location":"references/web-accelerator/#delete-cache","title":"delete-cache","text":""},{"location":"references/web-accelerator/#usage_5","title":"Usage","text":"<pre><code>Usage:\n  delete-cache [flags]\n\nAliases:\n  delete-cache, cache-delete\n\nFlags:\n\n  === Web-Accelerator-specific options ===\n\n      --url strings   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/web-accelerator/#delete-cache-all","title":"delete-cache-all","text":""},{"location":"references/web-accelerator/#usage_6","title":"Usage","text":"<pre><code>Usage:\n  delete-cache-all [flags]\n\nAliases:\n  delete-cache-all, cache-delete-all\n\nFlags:\n\n  === Web-Accelerator-specific options ===\n\n      --domain string   (*required) \n\n  === Input options ===\n\n  -y, --assumeyes           Assume that the answer to any question which would be asked is yes\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/zone/","title":"\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 / zone","text":""},{"location":"references/zone/#_1","title":"\u30b3\u30de\u30f3\u30c9\u4e00\u89a7","text":"<ul> <li>Basic Commands<ul> <li>list</li> <li>read</li> </ul> </li> </ul>"},{"location":"references/zone/#list","title":"list","text":""},{"location":"references/zone/#usage","title":"Usage","text":"<pre><code>Usage:\n  list [flags]\n\nAliases:\n  list, ls, find, select\n\nFlags:\n\n  === Filter options ===\n\n      --names strings   \n\n  === Limit/Offset options ===\n\n      --count int   (aliases: --max, --limit)\n      --from int    (aliases: --offset)\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"references/zone/#read","title":"read","text":""},{"location":"references/zone/#usage_1","title":"Usage","text":"<pre><code>Usage:\n  read { ID | NAME | TAG } [flags]\n\nAliases:\n  read, show\n\nFlags:\n\n  === Input options ===\n\n      --generate-skeleton   Output skeleton of parameters with JSON format (aliases: --skeleton)\n      --parameters string   Input parameters in JSON format\n\n  === Output options ===\n\n      --format string         Output format in Go templates (aliases: --fmt)\n  -o, --output-type string    Output format options: [table/json/yaml] (aliases: --out)\n      --query string          Query for JSON output\n      --query-driver string   Name of the driver that handles queries to JSON output options: [jmespath/jq]\n  -q, --quiet                 Output IDs only\n\n  === Parameter example ===\n\n      --example   Output example parameters with JSON format\n</code></pre>"},{"location":"upgrade/v1_0_0/","title":"v1.0.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u306fUsacloud v0\u7cfb\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u304cv1\u3078\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u969b\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002  </p>"},{"location":"upgrade/v1_0_0/#_1","title":"\u4e3b\u306a\u5909\u66f4\u70b9","text":""},{"location":"upgrade/v1_0_0/#_2","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5","text":""},{"location":"upgrade/v1_0_0/#httpsreleasesusacloudjpusacloud","title":"\u914d\u5e03\u30b5\u30a4\u30c8 https://releases.usacloud.jp/usacloud \u306e\u5ec3\u6b62","text":"<p>yum/dnf/apt\u30b3\u30de\u30f3\u30c9\u3067\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u4f7f\u7528\u3057\u3066\u3044\u305f\u30ea\u30dd\u30b8\u30c8\u30ea <code>https://releases.usacloud.jp/usacloud</code>\u304c\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002 \u4ee3\u308f\u308a\u306bGitHub Releases\u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>https://github.com/sacloud/usacloud/releases/latest/</p> <p>MacOS/Linux\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002</p> <pre><code>$ curl -fsSL https://github.com/sacloud/usacloud/releases/latest/download/install.sh | bash\n</code></pre>"},{"location":"upgrade/v1_0_0/#shell-completion","title":"\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u306e\u6709\u52b9\u5316","text":"<p>\u30b7\u30a7\u30eb\u88dc\u5b8c(Shell Completion)\u3092\u6709\u52b9\u306b\u3059\u308b\u65b9\u6cd5\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f\u3002 <code>bash_completion</code>\u306a\u3069\u306e\u30b7\u30a7\u30eb\u88dc\u5b8c\u304c\u5229\u7528\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u6709\u52b9\u306b\u51fa\u6765\u307e\u3059\u3002</p>"},{"location":"upgrade/v1_0_0/#bash","title":"Bash","text":"<pre><code>#Linux\u306e\u5834\u5408\n$ usacloud completion bash &gt; /etc/bash_completion.d/usacloud\n\n#MacOS\u306e\u5834\u5408\n$ usacloud completion bash &gt; /usr/local/etc/bash_completion.d/usacloud\n</code></pre>"},{"location":"upgrade/v1_0_0/#zsh","title":"Zsh","text":"<pre><code>$ usacloud completion zsh &gt; \"${fpath[1]}/_usacloud\"\n</code></pre>"},{"location":"upgrade/v1_0_0/#fish","title":"Fish:","text":"<pre><code>$ usacloud completion fish &gt; ~/.config/fish/completions/usacloud.fish\n</code></pre>"},{"location":"upgrade/v1_0_0/#_3","title":"\u5168\u30be\u30fc\u30f3\u5bfe\u8c61\u306e\u64cd\u4f5c","text":"<p><code>--zone</code>\u306b<code>all</code>\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5168\u30be\u30fc\u30f3\u4e00\u62ec\u64cd\u4f5c\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p> <pre><code># \u5168\u30be\u30fc\u30f3\u306e\u30b5\u30fc\u30d0\u4e00\u89a7\n$ usacloud server list --zone=all\n</code></pre>"},{"location":"upgrade/v1_0_0/#rest","title":"rest\u30b3\u30de\u30f3\u30c9\u306e\u8ffd\u52a0","text":"<p><code>usacloud rest</code>\u3067\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9API\u3092\u76f4\u63a5\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306frest\u30b3\u30de\u30f3\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_0_0/#_4","title":"\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u30bf\u30a4\u30d7","text":""},{"location":"upgrade/v1_0_0/#csvtsv","title":"CSV/TSV\u51fa\u529b\u306e\u5ec3\u6b62","text":"<p><code>--output-type</code>\u3078\u306e<code>csv</code>/<code>tsv</code>\u304c\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002\u4ee3\u308f\u308a\u306b<code>--foramt</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3084JSON\u51fa\u529b+jq\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_0_0/#-selector","title":"<code>--selector</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5ec3\u6b62","text":"<p><code>--selector</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u64cd\u4f5c\u5bfe\u8c61\u3092\u30bf\u30b0\u3067\u6307\u5b9a\u53ef\u80fd\u3067\u3057\u305f\u304c\u3001v1\u3067\u306f\u5f15\u6570\u306bID/\u540d\u79f0/\u30bf\u30b0\u3092\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p>"},{"location":"upgrade/v1_0_0/#no-results","title":"<code>no results</code>\u51fa\u529b\u306e\u5ec3\u6b62","text":"<p>v0\u3067\u306f\u64cd\u4f5c\u5bfe\u8c61\u304c\u306a\u3044\u5834\u5408\u306b<code>no results</code>\u3068\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u304c\u3001v1\u3067\u306f\u4f55\u3082\u51fa\u529b\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002</p>"},{"location":"upgrade/v1_0_0/#_5","title":"\u5ec3\u6b62\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9","text":"<ul> <li>summary\u30b3\u30de\u30f3\u30c9\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002</li> </ul>"},{"location":"upgrade/v1_1_0/","title":"v1.1.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u306fUsacloud v1.0\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u304cv1.1\u3078\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u969b\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002 v0\u7cfb\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u65b9\u306fv1.0.0\u3078\u306e\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u30ac\u30a4\u30c9\u304b\u3089\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_1_0/#_1","title":"\u4e3b\u306a\u5909\u66f4\u70b9","text":""},{"location":"upgrade/v1_1_0/#_2","title":"\u30b3\u30de\u30f3\u30c9\u6319\u52d5\u306e\u5909\u66f4","text":"<ul> <li>VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\u5bfe\u5fdc</li> </ul>"},{"location":"upgrade/v1_1_0/#_3","title":"\u6a5f\u80fd\u8ffd\u52a0","text":"<ul> <li>JSON\u51fa\u529b\u6642\u306eANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc</li> <li>\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e<code>DefaultOutputType</code>\u3068<code>DefaultQueryDriver</code>\u3092\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b</li> <li><code>--query</code>\u3067jq\u4e92\u63db\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b</li> <li>\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0</li> <li>\u30bb\u30eb\u30d5\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6a5f\u80fd\u306e\u8ffd\u52a0</li> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u6a5f\u80fd</li> <li><code>rest</code>\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306e<code>--query</code>\u306e\u30b5\u30dd\u30fc\u30c8</li> </ul>"},{"location":"upgrade/v1_1_0/#vpc","title":"VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\u5bfe\u5fdc","text":"<p>VPC\u30eb\u30fc\u30bf\u4f5c\u6210\u6642\u306b<code>--version</code>\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u6307\u5b9a\u53ef\u80fd\u306a\u5024\u306f<code>1</code>\u3068<code>2</code>\u3067\u3001\u7701\u7565\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f<code>2</code>\u306b\u306a\u308a\u307e\u3059\u3002  </p> <p>VPC\u30eb\u30fc\u30bf\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002  </p> <p>\u3055\u304f\u3089\u306e\u30af\u30e9\u30a6\u30c9\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8/VPC\u30eb\u30fc\u30bf</p>"},{"location":"upgrade/v1_1_0/#jsonansi","title":"JSON\u51fa\u529b\u6642\u306eANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc","text":"<p><code>--output-type=json</code>\u3084<code>--query</code>\u6307\u5b9a\u6642\u306e\u51fa\u529b\u304cANSI\u30ab\u30e9\u30fc\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002 <code>--no-color</code>\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30ab\u30e9\u30fc\u51fa\u529b\u3092\u7121\u52b9\u5316\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"upgrade/v1_1_0/#defaultoutputtypedefaultquerydriver","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e<code>DefaultOutputType</code>\u3068<code>DefaultQueryDriver</code>\u3092\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b","text":"<p>\u5f93\u6765\u306f\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u7de8\u96c6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u74b0\u5883\u5909\u6570\u7d4c\u7531\u3067\u6307\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u74b0\u5883\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_1_0/#-queryjq","title":"<code>--query</code>\u3067jq\u4e92\u63db\u6a5f\u80fd\u3092\u5229\u7528\u53ef\u80fd\u306b","text":"<p>\u5f93\u6765\u306f<code>--query</code>\u3067JMESPath\u3092\u5229\u7528\u53ef\u80fd\u3067\u3057\u305f\u304c\u3001jq\u4e92\u63db\u6a5f\u80fd\u3082\u5229\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f\u30ac\u30a4\u30c9/\u30af\u30a8\u30ea\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_1_0/#_4","title":"\u5bfe\u8c61\u30ea\u30bd\u30fc\u30b9\u3092\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0","text":"<p>\u5f15\u6570\u3068\u30ea\u30bd\u30fc\u30b9\u540d\u3092\u5b8c\u5168\u4e00\u81f4\u3055\u305b\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3<code>--argument-match-mode</code>\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/\u30b0\u30ed\u30fc\u30d0\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_1_0/#_5","title":"\u30bb\u30eb\u30d5\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u6a5f\u80fd\u306e\u8ffd\u52a0","text":"<p>Usacloud\u306e\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u305f\u3089\u81ea\u8eab\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3059\u308b\u30b3\u30de\u30f3\u30c9<code>update-self</code>\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/update-self\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_1_0/#_6","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6307\u5b9a\u6a5f\u80fd","text":"<p>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30d7\u30e9\u30a4\u30a2\u30f3\u30b9\u3067<code>max_connections</code>\u306a\u3069\u306eRDBMS\u56fa\u6709\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u6a5f\u80fd\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9/database\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"upgrade/v1_1_0/#rest-query","title":"<code>rest</code>\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306e<code>--query</code>\u306e\u30b5\u30dd\u30fc\u30c8","text":"<p><code>rest</code>\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067<code>--query</code>\u306b\u3088\u308b\u51fa\u529b\u306e\u52a0\u5de5\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002 \u8a73\u7d30\u306f\u30ac\u30a4\u30c9/rest\u30b3\u30de\u30f3\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"}]}